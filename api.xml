<haxe>
	<class path="neko.Lib" params="" file="/usr/lib/haxe/std/neko/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Load and return a Neko primitive from a NDLL library.</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="33" static="1"><f a="lib:prim:nargs">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></loadLazy>
		<print public="1" set="method" line="44" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the specified value on the default output.</haxe_doc>
		</print>
		<println public="1" set="method" line="51" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the specified value on the default output followed by a newline character.</haxe_doc>
		</println>
		<rethrow public="1" set="method" line="59" static="1">
			<f a="e">
				<d/>
				<d/>
			</f>
			<haxe_doc>Rethrow an exception. This is useful when manually filtering an exception in order
		to keep the previous exception stack.</haxe_doc>
		</rethrow>
		<serialize public="1" set="method" line="67" static="1">
			<f a="v">
				<d/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Serialize using native Neko serialization. This will return a Binary string that can be
		stored for long term usage. The serialized data is optimized for speed and not for size.</haxe_doc>
		</serialize>
		<unserialize public="1" set="method" line="74" static="1">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<haxe_doc>Unserialize a string using native Neko serialization. See [serialize].</haxe_doc>
		</unserialize>
		<localUnserialize public="1" set="method" line="85" static="1">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<haxe_doc>Unserialize a string using native Neko serialization. See [serialize].
		This function assume that all the serialized data was serialized with current
		module, even if the module name was different. This can happen if you are unserializing
		some data into mod_neko that was serialized on a different server using a different
		file path.</haxe_doc>
		</localUnserialize>
		<nekoToHaxe public="1" set="method" line="95" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>Converts a Neko value to its Haxe equivalent. Used for wrapping String and Arrays raw values into Haxe Objects.</haxe_doc>
		</nekoToHaxe>
		<haxeToNeko public="1" set="method" line="127" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>Converts a Neko value to its Haxe equivalent. Used to unwrap String and Arrays Objects into raw Neko values.</haxe_doc>
		</haxeToNeko>
		<getClasses public="1" set="method" line="162" static="1">
			<f a=""><d/></f>
			<haxe_doc>Returns an object containing all compiled packages and classes.</haxe_doc>
		</getClasses>
		<stringReference public="1" get="inline" set="null" line="169" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string referencing the data contains in bytes.</haxe_doc>
		</stringReference>
		<bytesReference public="1" get="inline" set="null" line="176" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns bytes referencing the content of a string.</haxe_doc>
		</bytesReference>
		<__serialize line="180" static="1"><f a="">
	<d/>
	<t path="haxe.io.BytesData"/>
</f></__serialize>
		<__unserialize line="181" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<a>
		<loadprim><f a="p:n">
	<unknown/>
	<unknown/>
	<unknown/>
</f></loadprim>
		<loadmodule><f a="m:l">
	<unknown/>
	<unknown/>
	<unknown/>
</f></loadmodule>
	</a>
	<unknown/>
</f></__unserialize>
	</class>
	<class path="Array" params="T" file="/usr/lib/haxe/std/neko/_std/Array.hx">
		<new1 params="T" set="method" line="32" static="1"><f a="a:l">
	<c path="neko.NativeArray"><c path="new1.T"/></c>
	<x path="Int"/>
	<c path="Array"><c path="new1.T"/></c>
</f></new1>
		<__a><c path="neko.NativeArray"><c path="Array.T"/></c></__a>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method" line="39">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" set="method" line="50">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" set="method" line="69">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" set="method" line="82">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" set="method" line="107">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="116">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" set="method" line="123">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<remove public="1" set="method" line="131">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<reverse public="1" set="method" line="148">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="162">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="175">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="192">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method" line="215">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" set="method" line="238">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="245">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="256"><f a="pos">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="260"><f a="pos:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__grow set="method" line="281"><f a="l">
	<x path="Int"/>
	<x path="Void"/>
</f></__grow>
		<__neko set="method" line="296"><f a=""><c path="neko.NativeArray"><c path="Array.T"/></c></f></__neko>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents a Class.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/lib/haxe/std/neko/_std/Date.hx">
		<now public="1" set="method" line="69" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="73" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="81" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:
		
		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`
		
		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<new1 set="method" line="85" static="1"><f a="t">
	<d/>
	<c path="Date"/>
</f></new1>
		<date_new line="91" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></date_new>
		<date_now line="92" static="1"><f a=""><unknown/></f></date_now>
		<date_format line="93" static="1"><f a=":">
	<d/>
	<unknown/>
	<c path="String"/>
</f></date_format>
		<date_set_hour line="94" static="1"><f a=":::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></date_set_hour>
		<date_set_day line="95" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></date_set_day>
		<date_get_day line="96" static="1"><f a="">
	<d/>
	<a>
		<y><x path="Int"/></y>
		<m><x path="Int"/></m>
		<d><x path="Int"/></d>
	</a>
</f></date_get_day>
		<date_get_hour line="97" static="1"><f a="">
	<d/>
	<a>
		<s><x path="Int"/></s>
		<m><x path="Int"/></m>
		<h><x path="Int"/></h>
	</a>
</f></date_get_hour>
		<int32_to_float line="98" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></int32_to_float>
		<int32_add line="99" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></int32_add>
		<int32_shl line="100" static="1"><f a=":">
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></int32_shl>
		<__string set="method" line="101" static="1"><f a=""><c path="String"/></f></__string>
		<__t><d/></__t>
		<getTime public="1" set="method" line="33">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getFullYear public="1" set="method" line="37">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="41">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="45">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getHours public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="53">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="57">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getDay public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.
		
		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.
		
		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by
	
	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.
	
	There is some extra functions available in the `DateTools` class.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents an Enum type.
	
	The corresponding enum instance type is `EnumValue`.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/usr/lib/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" set="method" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.
		
		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).
		
		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.
	
	It is usually not used explicitly, but through it's special syntax:
	`min...max`
		
	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
	</class>
	<class path="Main" params="" file="Main.hx"><main set="method" line="4" static="1"><f a=""><x path="Void"/></f></main></class>
	<class path="Math" params="" file="/usr/lib/haxe/std/neko/_std/Math.hx">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		(Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, see:
			https://bugs.php.net/bug.php?id=42143</haxe_doc>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<min public="1" set="method" line="31" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.

		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.

		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" line="32" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.

		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<abs public="1" set="method" line="34" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.

		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<sin public="1" set="method" line="35" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of `v`.

		The unit of `v` is radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" line="36" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of `v`.

		The unit of `v` is radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<atan2 public="1" set="method" line="37" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<tan public="1" set="method" line="38" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<exp public="1" set="method" line="39" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

		If `v` is NEGATIVE_INFINITY, the result is 0.0.

		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" line="40" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.

		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

		If `v` is 0.0, the result is NEGATIVE_INFINITY.

		This is the inverse operation of exp, i.e. log(exp(v)) == v always
		holds.</haxe_doc>
		</log>
		<sqrt public="1" set="method" line="41" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.

		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" line="42" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest Int value.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.

		TODO: need spec</haxe_doc>
		</round>
		<floor public="1" set="method" line="43" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest Int value that is not greater than `v`.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.

		TODO: need spec</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="44" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest Int value that is not less than `v`.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.

		TODO: need spec</haxe_doc>
		</ceil>
		<atan public="1" set="method" line="45" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<asin public="1" set="method" line="46" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" line="47" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<pow public="1" set="method" line="48" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<fround public="1" set="method" line="50" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" set="method" line="51" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" line="52" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<__rnd static="1"><unknown/></__rnd>
		<_rand_float line="55" static="1"><f a="">
	<unknown/>
	<x path="Float"/>
</f></_rand_float>
		<_rand_int line="56" static="1"><f a=":">
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></_rand_int>
		<random public="1" set="method" line="58" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<isNaN public="1" set="method" line="60" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true.

		Otherwise the result is false. In particular, both POSITIVE_INFINITY and
		NEGATIVE_INFINITY are not considered NaN.</haxe_doc>
		</isNaN>
		<isFinite public="1" set="method" line="61" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result is
		false.

		Otherwise the result is true.</haxe_doc>
		</isFinite>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/neko/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.
		
		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.
		
		If `o` is not an object or has no field named `field`, the result is
		null.
		
		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.
		
		If `field` is null, the result is unspecified.
		
		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.
		
		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.
		
		If `o` or `field` are null, the result is unspecified.
		
		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.
		
		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="42" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.
		
		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.
		
		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="49" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="61" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.
		
		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="81" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.
		
		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" get="inline" set="null" line="85" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.
		
		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.
		
		This function is only defined if `a` and `b` are of the same type.
		
		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.
		
		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:
		
		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified
		
		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" get="inline" set="null" line="89" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.
		
		If `f1` or `f2` are not functions, the result is unspecified.
		
		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="93" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.
		
		The result is true if `v` is one of the following:
			
		- class instance
		- structure
		- Class<T>
		- Enum<T>
			
		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="97" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.
		
		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.
		
		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" get="inline" set="null" line="101" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.
		
		This method is only guaranteed to work on anonymous structures.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" get="inline" set="null" line="105" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.
		
		This is only guaranteed to work on anonymous structures.
		
		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="110" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<same_closure line="114" static="1"><f a=":">
	<d/>
	<d/>
	<x path="Bool"/>
</f></same_closure>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.
	
	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.
	
	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.
	
	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.
	
	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="neko.Boot" params="" file="/usr/lib/haxe/std/neko/Boot.hx">
		<__tmp_str set="method" line="27" static="1"><f a=""><c path="String"/></f></__tmp_str>
		<__enum_str set="method" line="31" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></__enum_str>
		<__interfLoop set="method" line="53" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="69" static="1">
			<f a="o:cl">
				<a>
					<__name__ set="null"><unknown/></__name__>
					<__enum__ set="null"><t path="#Dynamic"/></__enum__>
					<__ename__ set="null"><unknown/></__ename__>
					<__class__ set="null"><unknown/></__class__>
				</a>
				<t path="#Dynamic"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_catch"</e></m></meta>
		</__instanceof>
		<__serialize set="method" line="87" static="1"><f a="o">
	<a>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
		<__class__ set="null"><a><__name__ set="null"><a><length set="null"><x path="Int"/></length></a></__name__></a></__class__>
	</a>
	<c path="Array"><unknown/></c>
</f></__serialize>
		<__tagserialize set="method" line="107" static="1"><f a="o">
	<a>
		<tag set="null"><unknown/></tag>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
	</a>
	<c path="Array"><unknown/></c>
</f></__tagserialize>
		<__unserialize set="method" line="116" static="1"><f a="v">
	<c path="Array"><unknown/></c>
	<unknown/>
</f></__unserialize>
		<__init set="method" line="139" static="1"><f a=""><x path="Void"/></f></__init>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/neko/_std/Std.hx">
		<is public="1" set="method" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T" set="method" line="29" static="1">
			<f a="v:c">
				<a/>
				<x path="Class"><c path="instance.T"/></x>
				<c path="instance.T"/>
			</f>
			<haxe_doc>Check if an object is an instance of the given class, then cast it.
		Returns null if the object is not an instance of the class.
		Is not guaranteed to work with interfaces or core types such as String, Array and Date.</haxe_doc>
		</instance>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="37" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="42" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="53" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="60" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.
		
		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.
		
		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/neko/_std/String.hx">
		<__is_String static="1"><x path="Bool"/></__is_String>
		<__split line="25" static="1"><d/></__split>
		<fromCharCode public="1" set="method" line="200" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.
		
		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="42">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="54">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, null is returned.
		
		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="60">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="69">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="84">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.
		
		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.
		
		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.
		
		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.
		
		If `delimiter` is null, the result is unspecified.
		
		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="100">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.
		
		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.
		
		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.
		
		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.
		
		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="126">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.
		
		If `startIndex` or `endIndex` are negative, 0 is used instead.
		
		If `startIndex` exceeds `endIndex`, they are swapped.
		
		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.
		
		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toLowerCase public="1" set="method" line="150">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.
		
		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.
		
		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toString public="1" set="method" line="182">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<__compare set="method" line="188"><f a="o">
	<c path="String"/>
	<x path="Int"/>
</f></__compare>
		<__add set="method" line="192"><f a="s">
	<d/>
	<c path="String"/>
</f></__add>
		<__radd set="method" line="196"><f a="s">
	<d/>
	<c path="String"/>
</f></__radd>
		<new public="1" set="method" line="33">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.
	
	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.
	
	Strings can be constructed using the string literal syntax "string value".
	
	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/neko/_std/StringBuf.hx">
		<__make line="52" static="1"><d/></__make>
		<__add line="53" static="1"><d/></__add>
		<__add_char line="54" static="1"><d/></__add_char>
		<__add_sub line="55" static="1"><d/></__add_sub>
		<__to_string line="56" static="1"><d/></__to_string>
		<b><d/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="32"><f a=""><x path="Int"/></f></get_length>
		<add public="1" get="inline" set="null" line="36">
			<f a="x">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.
		
		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).
		
		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="40">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.
		
		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.
		
		If `s` or `pos` are null, the result is unspecified.
		
		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="44">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.
		
		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="48">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.
		
		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.
		
		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.
	
	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.
	
	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="ValueType" params="" file="/usr/lib/haxe/std/neko/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/usr/lib/haxe/std/neko/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.
		
		If `o` is null or of a different type, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="45" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.
		
		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.
		
		If `o` is null, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="52" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.
		
		If `c` has no super class, null is returned.
		
		If `c` is null, the result is unspecified.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.
		
		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `c` has no package, the class name is returned.
		
		If `c` is null, the result is unspecified.
		
		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="64" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.
		
		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `e` has no package, the enum name is returned.
		
		If `e` is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.
		
		If `name` is the path of an existing class, that class is returned.
		
		Otherwise null is returned.
		
		If `name` is null or the path to a different type, the result is
		unspecified.
		
		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="84" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.
		
		If `name` is the path of an existing enum, that enum is returned.
		
		Otherwise null is returned.
		
		If `name` is null the result is unspecified.
		
		If `name` is the path to a different type, null is returned.
		
		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="98" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.
		
		This function guarantees that the class constructor is called.
		
		Default values of constructors arguments are not guaranteed to be
		taken into account.
		
		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.
		
		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="111" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.
		
		This function guarantees that the class constructor is not called.
		
		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="117" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="129" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="135" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.
		
		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.
		
		The order of the fields in the returned Array is unspecified.
		
		If `c` is null, the result is unspecified.
		
		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="152" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.
		
		This does not include static fields of parent classes.
		
		The order of the fields in the returned Array is unspecified.
		
		If `c` is null, the result is unspecified.
		
		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="168" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="173" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.
		
		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="195" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="210" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.
		
		The result String does not contain any constructor arguments.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="214" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.
		
		If `e` has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="218" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.
		
		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="222" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.
		
		This may return the empty Array [] if all constructors of `e` require
		arguments.
		
		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.
	
	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="UInt" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/UInt.hx"><x path="Int"/></typedef>
	<class path="flash.events.IEventDispatcher" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Registers an event listener object with an EventDispatcher object so that
	 * the listener receives notification of an event. You can register event
	 * listeners on all nodes in the display list for a specific type of event,
	 * phase, and priority.
	 *
	 * <p>After you successfully register an event listener, you cannot change
	 * its priority through additional calls to <code>addEventListener()</code>.
	 * To change a listener's priority, you must first call
	 * <code>removeListener()</code>. Then you can register the listener again
	 * with the new priority level. </p>
	 *
	 * <p>Keep in mind that after the listener is registered, subsequent calls to
	 * <code>addEventListener()</code> with a different <code>type</code> or
	 * <code>useCapture</code> value result in the creation of a separate
	 * listener registration. For example, if you first register a listener with
	 * <code>useCapture</code> set to <code>true</code>, it listens only during
	 * the capture phase. If you call <code>addEventListener()</code> again using
	 * the same listener object, but with <code>useCapture</code> set to
	 * <code>false</code>, you have two separate listeners: one that listens
	 * during the capture phase and another that listens during the target and
	 * bubbling phases. </p>
	 *
	 * <p>You cannot register an event listener for only the target phase or the
	 * bubbling phase. Those phases are coupled during registration because
	 * bubbling applies only to the ancestors of the target node.</p>
	 *
	 * <p>If you no longer need an event listener, remove it by calling
	 * <code>removeEventListener()</code>, or memory problems could result. Event
	 * listeners are not automatically removed from memory because the garbage
	 * collector does not remove the listener as long as the dispatching object
	 * exists(unless the <code>useWeakReference</code> parameter is set to
	 * <code>true</code>).</p>
	 *
	 * <p>Copying an EventDispatcher instance does not copy the event listeners
	 * attached to it.(If your newly created node needs an event listener, you
	 * must attach the listener after creating the node.) However, if you move an
	 * EventDispatcher instance, the event listeners attached to it move along
	 * with it.</p>
	 *
	 * <p>If the event listener is being registered on a node while an event is
	 * being processed on this node, the event listener is not triggered during
	 * the current phase but can be triggered during a later phase in the event
	 * flow, such as the bubbling phase.</p>
	 *
	 * <p>If an event listener is removed from a node while an event is being
	 * processed on the node, it is still triggered by the current actions. After
	 * it is removed, the event listener is never invoked again(unless
	 * registered again for future processing). </p>
	 * 
	 * @param type             The type of event.
	 * @param useCapture       Determines whether the listener works in the
	 *                         capture phase or the target and bubbling phases.
	 *                         If <code>useCapture</code> is set to
	 *                         <code>true</code>, the listener processes the
	 *                         event only during the capture phase and not in the
	 *                         target or bubbling phase. If
	 *                         <code>useCapture</code> is <code>false</code>, the
	 *                         listener processes the event only during the
	 *                         target or bubbling phase. To listen for the event
	 *                         in all three phases, call
	 *                         <code>addEventListener</code> twice, once with
	 *                         <code>useCapture</code> set to <code>true</code>,
	 *                         then again with <code>useCapture</code> set to
	 *                         <code>false</code>.
	 * @param priority         The priority level of the event listener. The
	 *                         priority is designated by a signed 32-bit integer.
	 *                         The higher the number, the higher the priority.
	 *                         All listeners with priority <i>n</i> are processed
	 *                         before listeners of priority <i>n</i>-1. If two or
	 *                         more listeners share the same priority, they are
	 *                         processed in the order in which they were added.
	 *                         The default priority is 0.
	 * @param useWeakReference Determines whether the reference to the listener
	 *                         is strong or weak. A strong reference(the
	 *                         default) prevents your listener from being
	 *                         garbage-collected. A weak reference does not.
	 *
	 *                         <p>Class-level member functions are not subject to
	 *                         garbage collection, so you can set
	 *                         <code>useWeakReference</code> to <code>true</code>
	 *                         for class-level member functions without
	 *                         subjecting them to garbage collection. If you set
	 *                         <code>useWeakReference</code> to <code>true</code>
	 *                         for a listener that is a nested inner function,
	 *                         the function will be garbage-collected and no
	 *                         longer persistent. If you create references to the
	 *                         inner function(save it in another variable) then
	 *                         it is not garbage-collected and stays
	 *                         persistent.</p>
	 * @throws ArgumentError The <code>listener</code> specified is not a
	 *                       function.]]></haxe_doc>
		</addEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="flash.events.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Dispatches an event into the event flow. The event target is the
	 * EventDispatcher object upon which the <code>dispatchEvent()</code> method
	 * is called.
	 * 
	 * @param event The Event object that is dispatched into the event flow. If
	 *              the event is being redispatched, a clone of the event is
	 *              created automatically. After an event is dispatched, its
	 *              <code>target</code> property cannot be changed, so you must
	 *              create a new copy of the event for redispatching to work.
	 * @return A value of <code>true</code> if the event was successfully
	 *         dispatched. A value of <code>false</code> indicates failure or
	 *         that <code>preventDefault()</code> was called on the event.
	 * @throws Error The event dispatch recursion limit has been reached.]]></haxe_doc>
		</dispatchEvent>
		<hasEventListener public="1" set="method">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Checks whether the EventDispatcher object has any listeners registered for
	 * a specific type of event. This allows you to determine where an
	 * EventDispatcher object has altered handling of an event type in the event
	 * flow hierarchy. To determine whether a specific event type actually
	 * triggers an event listener, use <code>willTrigger()</code>.
	 *
	 * <p>The difference between <code>hasEventListener()</code> and
	 * <code>willTrigger()</code> is that <code>hasEventListener()</code>
	 * examines only the object to which it belongs, whereas
	 * <code>willTrigger()</code> examines the entire event flow for the event
	 * specified by the <code>type</code> parameter. </p>
	 *
	 * <p>When <code>hasEventListener()</code> is called from a LoaderInfo
	 * object, only the listeners that the caller can access are considered.</p>
	 * 
	 * @param type The type of event.
	 * @return A value of <code>true</code> if a listener of the specified type
	 *         is registered; <code>false</code> otherwise.]]></haxe_doc>
		</hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Removes a listener from the EventDispatcher object. If there is no
	 * matching listener registered with the EventDispatcher object, a call to
	 * this method has no effect.
	 * 
	 * @param type       The type of event.
	 * @param useCapture Specifies whether the listener was registered for the
	 *                   capture phase or the target and bubbling phases. If the
	 *                   listener was registered for both the capture phase and
	 *                   the target and bubbling phases, two calls to
	 *                   <code>removeEventListener()</code> are required to
	 *                   remove both, one call with <code>useCapture()</code> set
	 *                   to <code>true</code>, and another call with
	 *                   <code>useCapture()</code> set to <code>false</code>.]]></haxe_doc>
		</removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Checks whether an event listener is registered with this EventDispatcher
	 * object or any of its ancestors for the specified event type. This method
	 * returns <code>true</code> if an event listener is triggered during any
	 * phase of the event flow when an event of the specified type is dispatched
	 * to this EventDispatcher object or any of its descendants.
	 *
	 * <p>The difference between the <code>hasEventListener()</code> and the
	 * <code>willTrigger()</code> methods is that <code>hasEventListener()</code>
	 * examines only the object to which it belongs, whereas the
	 * <code>willTrigger()</code> method examines the entire event flow for the
	 * event specified by the <code>type</code> parameter. </p>
	 *
	 * <p>When <code>willTrigger()</code> is called from a LoaderInfo object,
	 * only the listeners that the caller can access are considered.</p>
	 * 
	 * @param type The type of event.
	 * @return A value of <code>true</code> if a listener of the specified type
	 *         will be triggered; <code>false</code> otherwise.]]></haxe_doc>
		</willTrigger>
		<new public="1" set="method">
			<f a="?target">
				<c path="flash.events.IEventDispatcher"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Aggregates an instance of the EventDispatcher class.
	 *
	 * <p>The EventDispatcher class is generally used as a base class, which
	 * means that most developers do not need to use this constructor function.
	 * However, advanced developers who are implementing the IEventDispatcher
	 * interface need to use this constructor. If you are unable to extend the
	 * EventDispatcher class and must instead implement the IEventDispatcher
	 * interface, use this constructor to aggregate an instance of the
	 * EventDispatcher class.</p>
	 * 
	 * @param target The target object for events dispatched to the
	 *               EventDispatcher object. This parameter is used when the
	 *               EventDispatcher instance is aggregated by a class that
	 *               implements IEventDispatcher; it is necessary so that the
	 *               containing object can be the target for events. Do not use
	 *               this parameter in simple cases in which a class extends
	 *               EventDispatcher.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The EventDispatcher class is the base class for all classes that dispatch
 * events. The EventDispatcher class implements the IEventDispatcher interface
 * and is the base class for the DisplayObject class. The EventDispatcher
 * class allows any object on the display list to be an event target and as
 * such, to use the methods of the IEventDispatcher interface.
 *
 * <p>Event targets are an important part of the Flash<sup>®</sup> Player and
 * Adobe<sup>®</sup> AIR<sup>®</sup> event model. The event target serves as
 * the focal point for how events flow through the display list hierarchy.
 * When an event such as a mouse click or a keypress occurs, Flash Player or
 * the AIR application dispatches an event object into the event flow from the
 * root of the display list. The event object then makes its way through the
 * display list until it reaches the event target, at which point it begins
 * its return trip through the display list. This round-trip journey to the
 * event target is conceptually divided into three phases: the capture phase
 * comprises the journey from the root to the last node before the event
 * target's node, the target phase comprises only the event target node, and
 * the bubbling phase comprises any subsequent nodes encountered on the return
 * trip to the root of the display list.</p>
 *
 * <p>In general, the easiest way for a user-defined class to gain event
 * dispatching capabilities is to extend EventDispatcher. If this is
 * impossible(that is, if the class is already extending another class), you
 * can instead implement the IEventDispatcher interface, create an
 * EventDispatcher member, and write simple hooks to route calls into the
 * aggregated EventDispatcher.</p>
 * 
 * @event activate   [broadcast event] Dispatched when the Flash Player or AIR
 *                   application gains operating system focus and becomes
 *                   active. This event is a broadcast event, which means that
 *                   it is dispatched by all EventDispatcher objects with a
 *                   listener registered for this event. For more information
 *                   about broadcast events, see the DisplayObject class.
 * @event deactivate [broadcast event] Dispatched when the Flash Player or AIR
 *                   application operating loses system focus and is becoming
 *                   inactive. This event is a broadcast event, which means
 *                   that it is dispatched by all EventDispatcher objects with
 *                   a listener registered for this event. For more
 *                   information about broadcast events, see the DisplayObject
 *                   class.]]></haxe_doc>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<alpha public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The current accessibility options for this display object. If you modify
	 * the <code>accessibilityProperties</code> property or any of the fields
	 * within <code>accessibilityProperties</code>, you must call the
	 * <code>Accessibility.updateProperties()</code> method to make your changes
	 * take effect.
	 *
	 * <p><b>Note</b>: For an object created in the Flash authoring environment,
	 * the value of <code>accessibilityProperties</code> is prepopulated with any
	 * information you entered in the Accessibility panel for that object.</p>]]></haxe_doc>
		</alpha>
		<blendMode public="1">
			<e path="flash.display.BlendMode"/>
			<haxe_doc><![CDATA[* A value from the BlendMode class that specifies which blend mode to use. A
	 * bitmap can be drawn internally in two ways. If you have a blend mode
	 * enabled or an external clipping mask, the bitmap is drawn by adding a
	 * bitmap-filled square shape to the vector render. If you attempt to set
	 * this property to an invalid value, Flash runtimes set the value to
	 * <code>BlendMode.NORMAL</code>.
	 *
	 * <p>The <code>blendMode</code> property affects each pixel of the display
	 * object. Each pixel is composed of three constituent colors(red, green,
	 * and blue), and each constituent color has a value between 0x00 and 0xFF.
	 * Flash Player or Adobe AIR compares each constituent color of one pixel in
	 * the movie clip with the corresponding color of the pixel in the
	 * background. For example, if <code>blendMode</code> is set to
	 * <code>BlendMode.LIGHTEN</code>, Flash Player or Adobe AIR compares the red
	 * value of the display object with the red value of the background, and uses
	 * the lighter of the two as the value for the red component of the displayed
	 * color.</p>
	 *
	 * <p>The following table describes the <code>blendMode</code> settings. The
	 * BlendMode class defines string values you can use. The illustrations in
	 * the table show <code>blendMode</code> values applied to a circular display
	 * object(2) superimposed on another display object(1).</p>]]></haxe_doc>
		</blendMode>
		<cacheAsBitmap public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Sets a shader that is used for blending the foreground and background.
	 * When the <code>blendMode</code> property is set to
	 * <code>BlendMode.SHADER</code>, the specified Shader is used to create the
	 * blend mode output for the display object.
	 *
	 * <p>Setting the <code>blendShader</code> property of a display object to a
	 * Shader instance automatically sets the display object's
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>. If the
	 * <code>blendShader</code> property is set(which sets the
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>), then
	 * the value of the <code>blendMode</code> property is changed, the blend
	 * mode can be reset to use the blend shader simply by setting the
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>. The
	 * <code>blendShader</code> property does not need to be set again except to
	 * change the shader that's used for the blend mode.</p>
	 *
	 * <p>The Shader assigned to the <code>blendShader</code> property must
	 * specify at least two <code>image4</code> inputs. The inputs <b>do not</b>
	 * need to be specified in code using the associated ShaderInput objects'
	 * <code>input</code> properties. The background display object is
	 * automatically used as the first input(the input with <code>index</code>
	 * 0). The foreground display object is used as the second input(the input
	 * with <code>index</code> 1). A shader used as a blend shader can specify
	 * more than two inputs. In that case, any additional input must be specified
	 * by setting its ShaderInput instance's <code>input</code> property.</p>
	 *
	 * <p>When you assign a Shader instance to this property the shader is copied
	 * internally. The blend operation uses that internal copy, not a reference
	 * to the original shader. Any changes made to the shader, such as changing a
	 * parameter value, input, or bytecode, are not applied to the copied shader
	 * that's used for the blend mode.</p>
	 * 
	 * @throws ArgumentError When the shader output type is not compatible with
	 *                       this operation(the shader must specify a
	 *                       <code>pixel4</code> output).
	 * @throws ArgumentError When the shader specifies fewer than two image
	 *                       inputs or the first two inputs are not
	 *                       <code>image4</code> inputs.
	 * @throws ArgumentError When the shader specifies an image input that isn't
	 *                       provided.
	 * @throws ArgumentError When a ByteArray or Vector.<Number> instance is used
	 *                       as an input and the <code>width</code> and
	 *                       <code>height</code> properties aren't specified for
	 *                       the ShaderInput, or the specified values don't match
	 *                       the amount of data in the input object. See the
	 *                       <code>ShaderInput.input</code> property for more
	 *                       information.]]></haxe_doc>
		</cacheAsBitmap>
		<filters public="1">
			<c path="Array"><d/></c>
			<haxe_doc><![CDATA[* An indexed array that contains each filter object currently associated
	 * with the display object. The flash.filters package contains several
	 * classes that define specific filters you can use.
	 *
	 * <p>Filters can be applied in Flash Professional at design time, or at run
	 * time by using ActionScript code. To apply a filter by using ActionScript,
	 * you must make a temporary copy of the entire <code>filters</code> array,
	 * modify the temporary array, then assign the value of the temporary array
	 * back to the <code>filters</code> array. You cannot directly add a new
	 * filter object to the <code>filters</code> array.</p>
	 *
	 * <p>To add a filter by using ActionScript, perform the following steps
	 * (assume that the target display object is named
	 * <code>myDisplayObject</code>):</p>
	 *
	 * <ol>
	 *   <li>Create a new filter object by using the constructor method of your
	 * chosen filter class.</li>
	 *   <li>Assign the value of the <code>myDisplayObject.filters</code> array
	 * to a temporary array, such as one named <code>myFilters</code>.</li>
	 *   <li>Add the new filter object to the <code>myFilters</code> temporary
	 * array.</li>
	 *   <li>Assign the value of the temporary array to the
	 * <code>myDisplayObject.filters</code> array.</li>
	 * </ol>
	 *
	 * <p>If the <code>filters</code> array is undefined, you do not need to use
	 * a temporary array. Instead, you can directly assign an array literal that
	 * contains one or more filter objects that you create. The first example in
	 * the Examples section adds a drop shadow filter by using code that handles
	 * both defined and undefined <code>filters</code> arrays.</p>
	 *
	 * <p>To modify an existing filter object, you must use the technique of
	 * modifying a copy of the <code>filters</code> array:</p>
	 *
	 * <ol>
	 *   <li>Assign the value of the <code>filters</code> array to a temporary
	 * array, such as one named <code>myFilters</code>.</li>
	 *   <li>Modify the property by using the temporary array,
	 * <code>myFilters</code>. For example, to set the quality property of the
	 * first filter in the array, you could use the following code:
	 * <code>myFilters[0].quality = 1;</code></li>
	 *   <li>Assign the value of the temporary array to the <code>filters</code>
	 * array.</li>
	 * </ol>
	 *
	 * <p>At load time, if a display object has an associated filter, it is
	 * marked to cache itself as a transparent bitmap. From this point forward,
	 * as long as the display object has a valid filter list, the player caches
	 * the display object as a bitmap. This source bitmap is used as a source
	 * image for the filter effects. Each display object usually has two bitmaps:
	 * one with the original unfiltered source display object and another for the
	 * final image after filtering. The final image is used when rendering. As
	 * long as the display object does not change, the final image does not need
	 * updating.</p>
	 *
	 * <p>The flash.filters package includes classes for filters. For example, to
	 * create a DropShadow filter, you would write:</p>
	 * 
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	 *                       and the shader output type is not compatible with
	 *                       this operation(the shader must specify a
	 *                       <code>pixel4</code> output).
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	 *                       and the shader doesn't specify any image input or
	 *                       the first input is not an <code>image4</code> input.
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	 *                       and the shader specifies an image input that isn't
	 *                       provided.
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter, a
	 *                       ByteArray or Vector.<Number> instance as a shader
	 *                       input, and the <code>width</code> and
	 *                       <code>height</code> properties aren't specified for
	 *                       the ShaderInput object, or the specified values
	 *                       don't match the amount of data in the input data.
	 *                       See the <code>ShaderInput.input</code> property for
	 *                       more information.]]></haxe_doc>
		</filters>
		<height public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the height of the display object, in pixels. The height is
	 * calculated based on the bounds of the content of the display object. When
	 * you set the <code>height</code> property, the <code>scaleY</code> property
	 * is adjusted accordingly, as shown in the following code:
	 *
	 * <p>Except for TextField and Video objects, a display object with no
	 * content(such as an empty sprite) has a height of 0, even if you try to
	 * set <code>height</code> to a different value.</p>]]></haxe_doc>
		</height>
		<loaderInfo public="1" set="null">
			<c path="flash.display.LoaderInfo"/>
			<haxe_doc><![CDATA[* Returns a LoaderInfo object containing information about loading the file
	 * to which this display object belongs. The <code>loaderInfo</code> property
	 * is defined only for the root display object of a SWF file or for a loaded
	 * Bitmap(not for a Bitmap that is drawn with ActionScript). To find the
	 * <code>loaderInfo</code> object associated with the SWF file that contains
	 * a display object named <code>myDisplayObject</code>, use
	 * <code>myDisplayObject.root.loaderInfo</code>.
	 *
	 * <p>A large SWF file can monitor its download by calling
	 * <code>this.root.loaderInfo.addEventListener(Event.COMPLETE,
	 * func)</code>.</p>]]></haxe_doc>
		</loaderInfo>
		<mask public="1">
			<c path="flash.display.DisplayObject"/>
			<haxe_doc><![CDATA[* The calling display object is masked by the specified <code>mask</code>
	 * object. To ensure that masking works when the Stage is scaled, the
	 * <code>mask</code> display object must be in an active part of the display
	 * list. The <code>mask</code> object itself is not drawn. Set
	 * <code>mask</code> to <code>null</code> to remove the mask.
	 *
	 * <p>To be able to scale a mask object, it must be on the display list. To
	 * be able to drag a mask Sprite object(by calling its
	 * <code>startDrag()</code> method), it must be on the display list. To call
	 * the <code>startDrag()</code> method for a mask sprite based on a
	 * <code>mouseDown</code> event being dispatched by the sprite, set the
	 * sprite's <code>buttonMode</code> property to <code>true</code>.</p>
	 *
	 * <p>When display objects are cached by setting the
	 * <code>cacheAsBitmap</code> property to <code>true</code> an the
	 * <code>cacheAsBitmapMatrix</code> property to a Matrix object, both the
	 * mask and the display object being masked must be part of the same cached
	 * bitmap. Thus, if the display object is cached, then the mask must be a
	 * child of the display object. If an ancestor of the display object on the
	 * display list is cached, then the mask must be a child of that ancestor or
	 * one of its descendents. If more than one ancestor of the masked object is
	 * cached, then the mask must be a descendent of the cached container closest
	 * to the masked object in the display list.</p>
	 *
	 * <p><b>Note:</b> A single <code>mask</code> object cannot be used to mask
	 * more than one calling display object. When the <code>mask</code> is
	 * assigned to a second display object, it is removed as the mask of the
	 * first object, and that object's <code>mask</code> property becomes
	 * <code>null</code>.</p>]]></haxe_doc>
		</mask>
		<mouseX public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the x coordinate of the mouse or user input device position, in
	 * pixels.
	 *
	 * <p><b>Note</b>: For a DisplayObject that has been rotated, the returned x
	 * coordinate will reflect the non-rotated object.</p>]]></haxe_doc>
		</mouseX>
		<mouseY public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the y coordinate of the mouse or user input device position, in
	 * pixels.
	 *
	 * <p><b>Note</b>: For a DisplayObject that has been rotated, the returned y
	 * coordinate will reflect the non-rotated object.</p>]]></haxe_doc>
		</mouseY>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the instance name of the DisplayObject. The object can be
	 * identified in the child list of its parent display object container by
	 * calling the <code>getChildByName()</code> method of the display object
	 * container.
	 * 
	 * @throws IllegalOperationError If you are attempting to set this property
	 *                               on an object that was placed on the timeline
	 *                               in the Flash authoring tool.]]></haxe_doc>
		</name>
		<opaqueBackground public="1">
			<t path="Null"><x path="Int"/></t>
			<haxe_doc><![CDATA[* Specifies whether the display object is opaque with a certain background
	 * color. A transparent bitmap contains alpha channel data and is drawn
	 * transparently. An opaque bitmap has no alpha channel(and renders faster
	 * than a transparent bitmap). If the bitmap is opaque, you specify its own
	 * background color to use.
	 *
	 * <p>If set to a number value, the surface is opaque(not transparent) with
	 * the RGB background color that the number specifies. If set to
	 * <code>null</code>(the default value), the display object has a
	 * transparent background.</p>
	 *
	 * <p>The <code>opaqueBackground</code> property is intended mainly for use
	 * with the <code>cacheAsBitmap</code> property, for rendering optimization.
	 * For display objects in which the <code>cacheAsBitmap</code> property is
	 * set to true, setting <code>opaqueBackground</code> can improve rendering
	 * performance.</p>
	 *
	 * <p>The opaque background region is <i>not</i> matched when calling the
	 * <code>hitTestPoint()</code> method with the <code>shapeFlag</code>
	 * parameter set to <code>true</code>.</p>
	 *
	 * <p>The opaque background region does not respond to mouse events.</p>]]></haxe_doc>
		</opaqueBackground>
		<parent public="1" set="null">
			<c path="flash.display.DisplayObjectContainer"/>
			<haxe_doc><![CDATA[* Indicates the DisplayObjectContainer object that contains this display
	 * object. Use the <code>parent</code> property to specify a relative path to
	 * display objects that are above the current display object in the display
	 * list hierarchy.
	 *
	 * <p>You can use <code>parent</code> to move up multiple levels in the
	 * display list as in the following:</p>
	 * 
	 * @throws SecurityError The parent display object belongs to a security
	 *                       sandbox to which you do not have access. You can
	 *                       avoid this situation by having the parent movie call
	 *                       the <code>Security.allowDomain()</code> method.]]></haxe_doc>
		</parent>
		<root public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<haxe_doc><![CDATA[* For a display object in a loaded SWF file, the <code>root</code> property
	 * is the top-most display object in the portion of the display list's tree
	 * structure represented by that SWF file. For a Bitmap object representing a
	 * loaded image file, the <code>root</code> property is the Bitmap object
	 * itself. For the instance of the main class of the first SWF file loaded,
	 * the <code>root</code> property is the display object itself. The
	 * <code>root</code> property of the Stage object is the Stage object itself.
	 * The <code>root</code> property is set to <code>null</code> for any display
	 * object that has not been added to the display list, unless it has been
	 * added to a display object container that is off the display list but that
	 * is a child of the top-most display object in a loaded SWF file.
	 *
	 * <p>For example, if you create a new Sprite object by calling the
	 * <code>Sprite()</code> constructor method, its <code>root</code> property
	 * is <code>null</code> until you add it to the display list(or to a display
	 * object container that is off the display list but that is a child of the
	 * top-most display object in a SWF file).</p>
	 *
	 * <p>For a loaded SWF file, even though the Loader object used to load the
	 * file may not be on the display list, the top-most display object in the
	 * SWF file has its <code>root</code> property set to itself. The Loader
	 * object does not have its <code>root</code> property set until it is added
	 * as a child of a display object for which the <code>root</code> property is
	 * set.</p>]]></haxe_doc>
		</root>
		<rotation public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the rotation of the DisplayObject instance, in degrees, from its
	 * original orientation. Values from 0 to 180 represent clockwise rotation;
	 * values from 0 to -180 represent counterclockwise rotation. Values outside
	 * this range are added to or subtracted from 360 to obtain a value within
	 * the range. For example, the statement <code>my_video.rotation = 450</code>
	 * is the same as <code> my_video.rotation = 90</code>.]]></haxe_doc>
		</rotation>
		<scale9Grid public="1">
			<c path="flash.geom.Rectangle"/>
			<haxe_doc>* Indicates the x-axis rotation of the DisplayObject instance, in degrees,
	 * from its original orientation relative to the 3D parent container. Values
	 * from 0 to 180 represent clockwise rotation; values from 0 to -180
	 * represent counterclockwise rotation. Values outside this range are added
	 * to or subtracted from 360 to obtain a value within the range.</haxe_doc>
		</scale9Grid>
		<scaleX public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the horizontal scale(percentage) of the object as applied from
	 * the registration point. The default registration point is(0,0). 1.0
	 * equals 100% scale.
	 *
	 * <p>Scaling the local coordinate system changes the <code>x</code> and
	 * <code>y</code> property values, which are defined in whole pixels. </p>]]></haxe_doc>
		</scaleX>
		<scaleY public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the vertical scale(percentage) of an object as applied from the
	 * registration point of the object. The default registration point is(0,0).
	 * 1.0 is 100% scale.
	 *
	 * <p>Scaling the local coordinate system changes the <code>x</code> and
	 * <code>y</code> property values, which are defined in whole pixels. </p>]]></haxe_doc>
		</scaleY>
		<scrollRect public="1">
			<c path="flash.geom.Rectangle"/>
			<haxe_doc><![CDATA[* Indicates the depth scale(percentage) of an object as applied from the
	 * registration point of the object. The default registration point is(0,0).
	 * 1.0 is 100% scale.
	 *
	 * <p>Scaling the local coordinate system changes the <code>x</code>,
	 * <code>y</code> and <code>z</code> property values, which are defined in
	 * whole pixels. </p>]]></haxe_doc>
		</scrollRect>
		<stage public="1" set="null">
			<c path="flash.display.Stage"/>
			<haxe_doc><![CDATA[* The Stage of the display object. A Flash runtime application has only one
	 * Stage object. For example, you can create and load multiple display
	 * objects into the display list, and the <code>stage</code> property of each
	 * display object refers to the same Stage object(even if the display object
	 * belongs to a loaded SWF file).
	 *
	 * <p>If a display object is not added to the display list, its
	 * <code>stage</code> property is set to <code>null</code>.</p>]]></haxe_doc>
		</stage>
		<transform public="1">
			<c path="flash.geom.Transform"/>
			<haxe_doc><![CDATA[* An object with properties pertaining to a display object's matrix, color
	 * transform, and pixel bounds. The specific properties  -  matrix,
	 * colorTransform, and three read-only properties
	 * (<code>concatenatedMatrix</code>, <code>concatenatedColorTransform</code>,
	 * and <code>pixelBounds</code>)  -  are described in the entry for the
	 * Transform class.
	 *
	 * <p>Each of the transform object's properties is itself an object. This
	 * concept is important because the only way to set new values for the matrix
	 * or colorTransform objects is to create a new object and copy that object
	 * into the transform.matrix or transform.colorTransform property.</p>
	 *
	 * <p>For example, to increase the <code>tx</code> value of a display
	 * object's matrix, you must make a copy of the entire matrix object, then
	 * copy the new object into the matrix property of the transform object:</p>
	 * <pre xml:space="preserve"><code> var myMatrix:Matrix =
	 * myDisplayObject.transform.matrix; myMatrix.tx += 10;
	 * myDisplayObject.transform.matrix = myMatrix; </code></pre>
	 *
	 * <p>You cannot directly set the <code>tx</code> property. The following
	 * code has no effect on <code>myDisplayObject</code>: </p>
	 * <pre xml:space="preserve"><code> myDisplayObject.transform.matrix.tx +=
	 * 10; </code></pre>
	 *
	 * <p>You can also copy an entire transform object and assign it to another
	 * display object's transform property. For example, the following code
	 * copies the entire transform object from <code>myOldDisplayObj</code> to
	 * <code>myNewDisplayObj</code>:</p>
	 * <code>myNewDisplayObj.transform = myOldDisplayObj.transform;</code>
	 *
	 * <p>The resulting display object, <code>myNewDisplayObj</code>, now has the
	 * same values for its matrix, color transform, and pixel bounds as the old
	 * display object, <code>myOldDisplayObj</code>.</p>
	 *
	 * <p>Note that AIR for TV devices use hardware acceleration, if it is
	 * available, for color transforms.</p>]]></haxe_doc>
		</transform>
		<visible public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Whether or not the display object is visible. Display objects that are not
	 * visible are disabled. For example, if <code>visible=false</code> for an
	 * InteractiveObject instance, it cannot be clicked.]]></haxe_doc>
		</visible>
		<width public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the width of the display object, in pixels. The width is
	 * calculated based on the bounds of the content of the display object. When
	 * you set the <code>width</code> property, the <code>scaleX</code> property
	 * is adjusted accordingly, as shown in the following code:
	 *
	 * <p>Except for TextField and Video objects, a display object with no
	 * content(such as an empty sprite) has a width of 0, even if you try to set
	 * <code>width</code> to a different value.</p>]]></haxe_doc>
		</width>
		<x public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the <i>x</i> coordinate of the DisplayObject instance relative
	 * to the local coordinates of the parent DisplayObjectContainer. If the
	 * object is inside a DisplayObjectContainer that has transformations, it is
	 * in the local coordinate system of the enclosing DisplayObjectContainer.
	 * Thus, for a DisplayObjectContainer rotated 90° counterclockwise, the
	 * DisplayObjectContainer's children inherit a coordinate system that is
	 * rotated 90° counterclockwise. The object's coordinates refer to the
	 * registration point position.]]></haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Indicates the <i>y</i> coordinate of the DisplayObject instance relative
	 * to the local coordinates of the parent DisplayObjectContainer. If the
	 * object is inside a DisplayObjectContainer that has transformations, it is
	 * in the local coordinate system of the enclosing DisplayObjectContainer.
	 * Thus, for a DisplayObjectContainer rotated 90° counterclockwise, the
	 * DisplayObjectContainer's children inherit a coordinate system that is
	 * rotated 90° counterclockwise. The object's coordinates refer to the
	 * registration point position.]]></haxe_doc>
		</y>
		<getBounds public="1" set="method">
			<f a="targetCoordinateSpace">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Indicates the z coordinate position along the z-axis of the DisplayObject
	 * instance relative to the 3D parent container. The z property is used for
	 * 3D coordinates, not screen or pixel coordinates.
	 *
	 * <p>When you set a <code>z</code> property for a display object to
	 * something other than the default value of <code>0</code>, a corresponding
	 * Matrix3D object is automatically created. for adjusting a display object's
	 * position and orientation in three dimensions. When working with the
	 * z-axis, the existing behavior of x and y properties changes from screen or
	 * pixel coordinates to positions relative to the 3D parent container.</p>
	 *
	 * <p>For example, a child of the <code>_root</code> at position x = 100, y =
	 * 100, z = 200 is not drawn at pixel location(100,100). The child is drawn
	 * wherever the 3D projection calculation puts it. The calculation is:</p>
	 *
	 * <p><code>(x~~cameraFocalLength/cameraRelativeZPosition,
	 * y~~cameraFocalLength/cameraRelativeZPosition)</code></p>]]></haxe_doc>
		</getBounds>
		<getRect public="1" set="method">
			<f a="targetCoordinateSpace">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Returns a rectangle that defines the boundary of the display object, based
	 * on the coordinate system defined by the <code>targetCoordinateSpace</code>
	 * parameter, excluding any strokes on shapes. The values that the
	 * <code>getRect()</code> method returns are the same or smaller than those
	 * returned by the <code>getBounds()</code> method.
	 *
	 * <p><b>Note:</b> Use <code>localToGlobal()</code> and
	 * <code>globalToLocal()</code> methods to convert the display object's local
	 * coordinates to Stage coordinates, or Stage coordinates to local
	 * coordinates, respectively.</p>
	 * 
	 * @param targetCoordinateSpace The display object that defines the
	 *                              coordinate system to use.
	 * @return The rectangle that defines the area of the display object relative
	 *         to the <code>targetCoordinateSpace</code> object's coordinate
	 *         system.]]></haxe_doc>
		</getRect>
		<globalToLocal public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Converts the <code>point</code> object from the Stage(global) coordinates
	 * to the display object's(local) coordinates.
	 *
	 * <p>To use this method, first create an instance of the Point class. The
	 * <i>x</i> and <i>y</i> values that you assign represent global coordinates
	 * because they relate to the origin(0,0) of the main display area. Then
	 * pass the Point instance as the parameter to the
	 * <code>globalToLocal()</code> method. The method returns a new Point object
	 * with <i>x</i> and <i>y</i> values that relate to the origin of the display
	 * object instead of the origin of the Stage.</p>
	 * 
	 * @param point An object created with the Point class. The Point object
	 *              specifies the <i>x</i> and <i>y</i> coordinates as
	 *              properties.
	 * @return A Point object with coordinates relative to the display object.]]></haxe_doc>
		</globalToLocal>
		<hitTestObject public="1" set="method">
			<f a="obj">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Converts a two-dimensional point from the Stage(global) coordinates to a
	 * three-dimensional display object's(local) coordinates.
	 *
	 * <p>To use this method, first create an instance of the Point class. The x
	 * and y values that you assign to the Point object represent global
	 * coordinates because they are relative to the origin(0,0) of the main
	 * display area. Then pass the Point object to the
	 * <code>globalToLocal3D()</code> method as the <code>point</code> parameter.
	 * The method returns three-dimensional coordinates as a Vector3D object
	 * containing <code>x</code>, <code>y</code>, and <code>z</code> values that
	 * are relative to the origin of the three-dimensional display object.</p>
	 * 
	 * @param point A two dimensional Point object representing global x and y
	 *              coordinates.
	 * @return A Vector3D object with coordinates relative to the
	 *         three-dimensional display object.]]></haxe_doc>
		</hitTestObject>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Evaluates the display object to see if it overlaps or intersects with the
	 * point specified by the <code>x</code> and <code>y</code> parameters. The
	 * <code>x</code> and <code>y</code> parameters specify a point in the
	 * coordinate space of the Stage, not the display object container that
	 * contains the display object(unless that display object container is the
	 * Stage).
	 * 
	 * @param x         The <i>x</i> coordinate to test against this object.
	 * @param y         The <i>y</i> coordinate to test against this object.
	 * @param shapeFlag Whether to check against the actual pixels of the object
	 *                 (<code>true</code>) or the bounding box
	 *                 (<code>false</code>).
	 * @return <code>true</code> if the display object overlaps or intersects
	 *         with the specified point; <code>false</code> otherwise.]]></haxe_doc>
		</hitTestPoint>
		<localToGlobal public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Converts a three-dimensional point of the three-dimensional display
	 * object's(local) coordinates to a two-dimensional point in the Stage
	 * (global) coordinates.
	 *
	 * <p>For example, you can only use two-dimensional coordinates(x,y) to draw
	 * with the <code>display.Graphics</code> methods. To draw a
	 * three-dimensional object, you need to map the three-dimensional
	 * coordinates of a display object to two-dimensional coordinates. First,
	 * create an instance of the Vector3D class that holds the x-, y-, and z-
	 * coordinates of the three-dimensional display object. Then pass the
	 * Vector3D object to the <code>local3DToGlobal()</code> method as the
	 * <code>point3d</code> parameter. The method returns a two-dimensional Point
	 * object that can be used with the Graphics API to draw the
	 * three-dimensional object.</p>
	 * 
	 * @param point3d A Vector3D object containing either a three-dimensional
	 *                point or the coordinates of the three-dimensional display
	 *                object.
	 * @return A two-dimensional point representing a three-dimensional point in
	 *         two-dimensional space.]]></haxe_doc>
		</localToGlobal>
		<haxe_doc><![CDATA[* The DisplayObject class is the base class for all objects that can be
 * placed on the display list. The display list manages all objects displayed
 * in flash. Use the DisplayObjectContainer class to arrange the
 * display objects in the display list. DisplayObjectContainer objects can
 * have child display objects, while other display objects, such as Shape and
 * TextField objects, are "leaf" nodes that have only parents and siblings, no
 * children.
 *
 * <p>The DisplayObject class supports basic functionality like the <i>x</i>
 * and <i>y</i> position of an object, as well as more advanced properties of
 * the object such as its transformation matrix. </p>
 *
 * <p>DisplayObject is an abstract base class; therefore, you cannot call
 * DisplayObject directly. Invoking <code>new DisplayObject()</code> throws an
 * <code>ArgumentError</code> exception. </p>
 *
 * <p>All display objects inherit from the DisplayObject class.</p>
 *
 * <p>The DisplayObject class itself does not include any APIs for rendering
 * content onscreen. For that reason, if you want create a custom subclass of
 * the DisplayObject class, you will want to extend one of its subclasses that
 * do have APIs for rendering content onscreen, such as the Shape, Sprite,
 * Bitmap, SimpleButton, TextField, or MovieClip class.</p>
 *
 * <p>The DisplayObject class contains several broadcast events. Normally, the
 * target of any particular event is a specific DisplayObject instance. For
 * example, the target of an <code>added</code> event is the specific
 * DisplayObject instance that was added to the display list. Having a single
 * target restricts the placement of event listeners to that target and in
 * some cases the target's ancestors on the display list. With broadcast
 * events, however, the target is not a specific DisplayObject instance, but
 * rather all DisplayObject instances, including those that are not on the
 * display list. This means that you can add a listener to any DisplayObject
 * instance to listen for broadcast events. In addition to the broadcast
 * events listed in the DisplayObject class's Events table, the DisplayObject
 * class also inherits two broadcast events from the EventDispatcher class:
 * <code>activate</code> and <code>deactivate</code>.</p>
 *
 * <p>Some properties previously used in the ActionScript 1.0 and 2.0
 * MovieClip, TextField, and Button classes(such as <code>_alpha</code>,
 * <code>_height</code>, <code>_name</code>, <code>_width</code>,
 * <code>_x</code>, <code>_y</code>, and others) have equivalents in the
 * ActionScript 3.0 DisplayObject class that are renamed so that they no
 * longer begin with the underscore(_) character.</p>
 *
 * <p>For more information, see the "Display Programming" chapter of the
 * <i>ActionScript 3.0 Developer's Guide</i>.</p>
 * 
 * @event added            Dispatched when a display object is added to the
 *                         display list. The following methods trigger this
 *                         event:
 *                         <code>DisplayObjectContainer.addChild()</code>,
 *                         <code>DisplayObjectContainer.addChildAt()</code>.
 * @event addedToStage     Dispatched when a display object is added to the on
 *                         stage display list, either directly or through the
 *                         addition of a sub tree in which the display object
 *                         is contained. The following methods trigger this
 *                         event:
 *                         <code>DisplayObjectContainer.addChild()</code>,
 *                         <code>DisplayObjectContainer.addChildAt()</code>.
 * @event enterFrame       [broadcast event] Dispatched when the playhead is
 *                         entering a new frame. If the playhead is not
 *                         moving, or if there is only one frame, this event
 *                         is dispatched continuously in conjunction with the
 *                         frame rate. This event is a broadcast event, which
 *                         means that it is dispatched by all display objects
 *                         with a listener registered for this event.
 * @event exitFrame        [broadcast event] Dispatched when the playhead is
 *                         exiting the current frame. All frame scripts have
 *                         been run. If the playhead is not moving, or if
 *                         there is only one frame, this event is dispatched
 *                         continuously in conjunction with the frame rate.
 *                         This event is a broadcast event, which means that
 *                         it is dispatched by all display objects with a
 *                         listener registered for this event.
 * @event frameConstructed [broadcast event] Dispatched after the constructors
 *                         of frame display objects have run but before frame
 *                         scripts have run. If the playhead is not moving, or
 *                         if there is only one frame, this event is
 *                         dispatched continuously in conjunction with the
 *                         frame rate. This event is a broadcast event, which
 *                         means that it is dispatched by all display objects
 *                         with a listener registered for this event.
 * @event removed          Dispatched when a display object is about to be
 *                         removed from the display list. Two methods of the
 *                         DisplayObjectContainer class generate this event:
 *                         <code>removeChild()</code> and
 *                         <code>removeChildAt()</code>.
 *
 *                         <p>The following methods of a
 *                         DisplayObjectContainer object also generate this
 *                         event if an object must be removed to make room for
 *                         the new object: <code>addChild()</code>,
 *                         <code>addChildAt()</code>, and
 *                         <code>setChildIndex()</code>. </p>
 * @event removedFromStage Dispatched when a display object is about to be
 *                         removed from the display list, either directly or
 *                         through the removal of a sub tree in which the
 *                         display object is contained. Two methods of the
 *                         DisplayObjectContainer class generate this event:
 *                         <code>removeChild()</code> and
 *                         <code>removeChildAt()</code>.
 *
 *                         <p>The following methods of a
 *                         DisplayObjectContainer object also generate this
 *                         event if an object must be removed to make room for
 *                         the new object: <code>addChild()</code>,
 *                         <code>addChildAt()</code>, and
 *                         <code>setChildIndex()</code>. </p>
 * @event render           [broadcast event] Dispatched when the display list
 *                         is about to be updated and rendered. This event
 *                         provides the last opportunity for objects listening
 *                         for this event to make changes before the display
 *                         list is rendered. You must call the
 *                         <code>invalidate()</code> method of the Stage
 *                         object each time you want a <code>render</code>
 *                         event to be dispatched. <code>Render</code> events
 *                         are dispatched to an object only if there is mutual
 *                         trust between it and the object that called
 *                         <code>Stage.invalidate()</code>. This event is a
 *                         broadcast event, which means that it is dispatched
 *                         by all display objects with a listener registered
 *                         for this event.
 *
 *                         <p><b>Note: </b>This event is not dispatched if the
 *                         display is not rendering. This is the case when the
 *                         content is either minimized or obscured. </p>]]></haxe_doc>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<doubleClickEnabled public="1">
			<x path="Bool"/>
			<haxe_doc>* The current accessibility implementation(AccessibilityImplementation) for
	 * this InteractiveObject instance.</haxe_doc>
		</doubleClickEnabled>
		<focusRect public="1">
			<d/>
			<haxe_doc><![CDATA[* Specifies whether this object displays a focus rectangle. It can take one
	 * of three values: <code>true</code>, <code>false</code>, or
	 * <code>null</code>. Values of <code>true</code> and <code>false</code> work
	 * as expected, specifying whether or not the focus rectangle appears. A
	 * value of <code>null</code> indicates that this object obeys the
	 * <code>stageFocusRect</code> property of the Stage.]]></haxe_doc>
		</focusRect>
		<mouseEnabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether this object receives mouse, or other user input,
	 * messages. The default value is <code>true</code>, which means that by
	 * default any InteractiveObject instance that is on the display list
	 * receives mouse events or other user input events. If
	 * <code>mouseEnabled</code> is set to <code>false</code>, the instance does
	 * not receive any mouse events(or other user input events like keyboard
	 * events). Any children of this instance on the display list are not
	 * affected. To change the <code>mouseEnabled</code> behavior for all
	 * children of an object on the display list, use
	 * <code>flash.display.DisplayObjectContainer.mouseChildren</code>.
	 *
	 * <p> No event is dispatched by setting this property. You must use the
	 * <code>addEventListener()</code> method to create interactive
	 * functionality.</p>]]></haxe_doc>
		</mouseEnabled>
		<tabEnabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether this object is in the tab order. If this object is in
	 * the tab order, the value is <code>true</code>; otherwise, the value is
	 * <code>false</code>. By default, the value is <code>false</code>, except
	 * for the following:
	 * <ul>
	 *   <li>For a SimpleButton object, the value is <code>true</code>.</li>
	 *   <li>For a TextField object with <code>type = "input"</code>, the value
	 * is <code>true</code>.</li>
	 *   <li>For a Sprite object or MovieClip object with <code>buttonMode =
	 * true</code>, the value is <code>true</code>.</li>
	 * </ul>]]></haxe_doc>
		</tabEnabled>
		<tabIndex public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* Specifies the tab ordering of objects in a SWF file. The
	 * <code>tabIndex</code> property is -1 by default, meaning no tab index is
	 * set for the object.
	 *
	 * <p>If any currently displayed object in the SWF file contains a
	 * <code>tabIndex</code> property, automatic tab ordering is disabled, and
	 * the tab ordering is calculated from the <code>tabIndex</code> properties
	 * of objects in the SWF file. The custom tab ordering includes only objects
	 * that have <code>tabIndex</code> properties.</p>
	 *
	 * <p>The <code>tabIndex</code> property can be a non-negative integer. The
	 * objects are ordered according to their <code>tabIndex</code> properties,
	 * in ascending order. An object with a <code>tabIndex</code> value of 1
	 * precedes an object with a <code>tabIndex</code> value of 2. Do not use the
	 * same <code>tabIndex</code> value for multiple objects.</p>
	 *
	 * <p>The custom tab ordering that the <code>tabIndex</code> property defines
	 * is <i>flat</i>. This means that no attention is paid to the hierarchical
	 * relationships of objects in the SWF file. All objects in the SWF file with
	 * <code>tabIndex</code> properties are placed in the tab order, and the tab
	 * order is determined by the order of the <code>tabIndex</code> values. </p>
	 *
	 * <p><b>Note:</b> To set the tab order for TLFTextField instances, cast the
	 * display object child of the TLFTextField as an InteractiveObject, then set
	 * the <code>tabIndex</code> property. For example: <pre
	 * xml:space="preserve">
	 * InteractiveObject(tlfInstance.getChildAt(1)).tabIndex = 3; </pre> To
	 * reverse the tab order from the default setting for three instances of a
	 * TLFTextField object(<code>tlfInstance1</code>, <code>tlfInstance2</code>
	 * and <code>tlfInstance3</code>), use: <pre xml:space="preserve">
	 * InteractiveObject(tlfInstance1.getChildAt(1)).tabIndex = 3;
	 * InteractiveObject(tlfInstance2.getChildAt(1)).tabIndex = 2;
	 * InteractiveObject(tlfInstance3.getChildAt(1)).tabIndex = 1; </pre> </p>]]></haxe_doc>
		</tabIndex>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Calling the <code>new InteractiveObject()</code> constructor throws an
	 * <code>ArgumentError</code> exception. You can, however, call constructors
	 * for the following subclasses of InteractiveObject:
	 * <ul>
	 *   <li><code>new SimpleButton()</code></li>
	 *   <li><code>new TextField()</code></li>
	 *   <li><code>new Loader()</code></li>
	 *   <li><code>new Sprite()</code></li>
	 *   <li><code>new MovieClip()</code></li>
	 * </ul>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The InteractiveObject class is the abstract base class for all display
 * objects with which the user can interact, using the mouse, keyboard, or
 * other user input device.
 *
 * <p>You cannot instantiate the InteractiveObject class directly. A call to
 * the <code>new InteractiveObject()</code> constructor throws an
 * <code>ArgumentError</code> exception.</p>
 *
 * <p>The InteractiveObject class itself does not include any APIs for
 * rendering content onscreen. To create a custom subclass of the
 * InteractiveObject class, extend one of the subclasses that do have APIs for
 * rendering content onscreen, such as the Sprite, SimpleButton, TextField, or
 * MovieClip classes.</p>
 * 
 * @event clear                  Dispatched when the user selects 'Clear'(or
 *                               'Delete') from the text context menu. This
 *                               event is dispatched to the object that
 *                               currently has focus. If the object that
 *                               currently has focus is a TextField, the
 *                               default behavior of this event is to cause
 *                               any currently selected text in the text field
 *                               to be deleted.
 * @event click                  Dispatched when a user presses and releases
 *                               the main button of the user's pointing device
 *                               over the same InteractiveObject. For a click
 *                               event to occur, it must always follow this
 *                               series of events in the order of occurrence:
 *                               mouseDown event, then mouseUp. The target
 *                               object must be identical for both of these
 *                               events; otherwise the <code>click</code>
 *                               event does not occur. Any number of other
 *                               mouse events can occur at any time between
 *                               the <code>mouseDown</code> or
 *                               <code>mouseUp</code> events; the
 *                               <code>click</code> event still occurs.
 * @event contextMenu            Dispatched when a user gesture triggers the
 *                               context menu associated with this interactive
 *                               object in an AIR application.
 * @event copy                   Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a copy operation or selects 'Copy' from
 *                               the text context menu. This event is
 *                               dispatched to the object that currently has
 *                               focus. If the object that currently has focus
 *                               is a TextField, the default behavior of this
 *                               event is to cause any currently selected text
 *                               in the text field to be copied to the
 *                               clipboard.
 * @event cut                    Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a cut operation or selects 'Cut' from the
 *                               text context menu. This event is dispatched
 *                               to the object that currently has focus. If
 *                               the object that currently has focus is a
 *                               TextField, the default behavior of this event
 *                               is to cause any currently selected text in
 *                               the text field to be cut to the clipboard.
 * @event doubleClick            Dispatched when a user presses and releases
 *                               the main button of a pointing device twice in
 *                               rapid succession over the same
 *                               InteractiveObject when that object's
 *                               <code>doubleClickEnabled</code> flag is set
 *                               to <code>true</code>. For a
 *                               <code>doubleClick</code> event to occur, it
 *                               must immediately follow the following series
 *                               of events: <code>mouseDown</code>,
 *                               <code>mouseUp</code>, <code>click</code>,
 *                               <code>mouseDown</code>, <code>mouseUp</code>.
 *                               All of these events must share the same
 *                               target as the <code>doubleClick</code> event.
 *                               The second click, represented by the second
 *                               <code>mouseDown</code> and
 *                               <code>mouseUp</code> events, must occur
 *                               within a specific period of time after the
 *                               <code>click</code> event. The allowable
 *                               length of this period varies by operating
 *                               system and can often be configured by the
 *                               user. If the target is a selectable text
 *                               field, the word under the pointer is selected
 *                               as the default behavior. If the target
 *                               InteractiveObject does not have its
 *                               <code>doubleClickEnabled</code> flag set to
 *                               <code>true</code> it receives two
 *                               <code>click</code> events.
 *
 *                               <p>The <code>doubleClickEnabled</code>
 *                               property defaults to <code>false</code>. </p>
 *
 *                               <p>The double-click text selection behavior
 *                               of a TextField object is not related to the
 *                               <code>doubleClick</code> event. Use
 *                               <code>TextField.doubleClickEnabled</code> to
 *                               control TextField selections.</p>
 * @event focusIn                Dispatched <i>after</i> a display object
 *                               gains focus. This situation happens when a
 *                               user highlights the object with a pointing
 *                               device or keyboard navigation. The recipient
 *                               of such focus is called the target object of
 *                               this event, while the corresponding
 *                               InteractiveObject instance that lost focus
 *                               because of this change is called the related
 *                               object. A reference to the related object is
 *                               stored in the receiving object's
 *                               <code>relatedObject</code> property. The
 *                               <code>shiftKey</code> property is not used.
 *                               This event follows the dispatch of the
 *                               previous object's <code>focusOut</code>
 *                               event.
 * @event focusOut               Dispatched <i>after</i> a display object
 *                               loses focus. This happens when a user
 *                               highlights a different object with a pointing
 *                               device or keyboard navigation. The object
 *                               that loses focus is called the target object
 *                               of this event, while the corresponding
 *                               InteractiveObject instance that receives
 *                               focus is called the related object. A
 *                               reference to the related object is stored in
 *                               the target object's
 *                               <code>relatedObject</code> property. The
 *                               <code>shiftKey</code> property is not used.
 *                               This event precedes the dispatch of the
 *                               <code>focusIn</code> event by the related
 *                               object.
 * @event gesturePan             Dispatched when the user moves a point of
 *                               contact over the InteractiveObject instance
 *                               on a touch-enabled device(such as moving a
 *                               finger from left to right over a display
 *                               object on a mobile phone or tablet with a
 *                               touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>mouseOver</code> event and as a
 *                               <code>touchOver</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>mouseOver</code> event or a
 *                               <code>touchOver</code> event or a
 *                               <code>gesturePan</code> event, or all if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gesturePan</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event gesturePressAndTap     Dispatched when the user creates a point of
 *                               contact with an InteractiveObject instance,
 *                               then taps on a touch-enabled device(such as
 *                               placing several fingers over a display object
 *                               to open a menu and then taps one finger to
 *                               select a menu item on a mobile phone or
 *                               tablet with a touch screen). Some devices
 *                               might also interpret this contact as a
 *                               combination of several mouse events, as well.
 *
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, and then provides
 *                               a secondary tap, the InteractiveObject
 *                               instance can dispatch a
 *                               <code>mouseOver</code> event and a
 *                               <code>click</code> event(among others) as
 *                               well as the <code>gesturePressAndTap</code>
 *                               event, or all if the current environment
 *                               supports it. Choose how you want to handle
 *                               the user interaction. Use the
 *                               flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gesturePressAndTap</code> event, you
 *                               can design your event handler to respond to
 *                               the specific needs of a touch-enabled
 *                               environment and provide users with a richer
 *                               touch-enabled experience. You can also handle
 *                               both events, separately, to provide a
 *                               different response for a touch event than a
 *                               mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact(the "push"). The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the secondary
 *                               point of contact(the "tap").</p>
 * @event gestureRotate          Dispatched when the user performs a rotation
 *                               gesture at a point of contact with an
 *                               InteractiveObject instance(such as touching
 *                               two fingers and rotating them over a display
 *                               object on a mobile phone or tablet with a
 *                               touch screen). Two-finger rotation is a
 *                               common rotation gesture, but each device and
 *                               operating system can have its own
 *                               requirements to indicate rotation. Some
 *                               devices might also interpret this contact as
 *                               a combination of several mouse events, as
 *                               well.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>mouseOver</code> event and a
 *                               <code>click</code> event(among others), in
 *                               addition to the <code>gestureRotate</code>
 *                               event, or all if the current environment
 *                               supports it. Choose how you want to handle
 *                               the user interaction. Use the
 *                               flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gestureRotate</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact. The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the point of
 *                               contact where the rotation gesture is
 *                               complete.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event gestureSwipe           Dispatched when the user performs a swipe
 *                               gesture at a point of contact with an
 *                               InteractiveObject instance(such as touching
 *                               three fingers to a screen and then moving
 *                               them in parallel over a display object on a
 *                               mobile phone or tablet with a touch screen).
 *                               Moving several fingers in parallel is a
 *                               common swipe gesture, but each device and
 *                               operating system can have its own
 *                               requirements for a swipe. Some devices might
 *                               also interpret this contact as a combination
 *                               of several mouse events, as well.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, and then moves the
 *                               fingers together, the InteractiveObject
 *                               instance can dispatch a <code>rollOver</code>
 *                               event and a <code>rollOut</code> event(among
 *                               others), in addition to the
 *                               <code>gestureSwipe</code> event, or all if
 *                               the current environment supports it. Choose
 *                               how you want to handle the user interaction.
 *                               If you choose to handle the
 *                               <code>rollOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gestureSwipe</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact. The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the point of
 *                               contact where the swipe gesture is
 *                               complete.</p>
 *
 *                               <p><b>Note:</b> While some devices using the
 *                               Mac OS operating system can interpret a
 *                               four-finger swipe, this API only supports a
 *                               three-finger swipe.</p>
 * @event gestureTwoFingerTap    Dispatched when the user presses two points
 *                               of contact over the same InteractiveObject
 *                               instance on a touch-enabled device(such as
 *                               presses and releases two fingers over a
 *                               display object on a mobile phone or tablet
 *                               with a touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>doubleClick</code> event.
 *
 *                               <p>Specifically, if a user taps two fingers
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>doubleClick</code> event or a
 *                               <code>gestureTwoFingerTap</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the flash.ui.Multitouch
 *                               class to manage touch event handling(enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>doubleClick</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>gestureTwoFingerTap</code> event, you
 *                               can design your event handler to respond to
 *                               the specific needs of a touch-enabled
 *                               environment and provide users with a richer
 *                               touch-enabled experience. You can also handle
 *                               both events, separately, to provide a
 *                               different response for a touch event than a
 *                               mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event gestureZoom            Dispatched when the user performs a zoom
 *                               gesture at a point of contact with an
 *                               InteractiveObject instance(such as touching
 *                               two fingers to a screen and then quickly
 *                               spreading the fingers apart over a display
 *                               object on a mobile phone or tablet with a
 *                               touch screen). Moving fingers apart is a
 *                               common zoom gesture, but each device and
 *                               operating system can have its own
 *                               requirements to indicate zoom. Some devices
 *                               might also interpret this contact as a
 *                               combination of several mouse events, as well.
 *
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, and then moves the
 *                               fingers apart, the InteractiveObject instance
 *                               can dispatch a <code>mouseOver</code> event
 *                               and a <code>click</code> event(among
 *                               others), in addition to the
 *                               <code>gestureZoom</code> event, or all if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gestureZoom</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact. The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the point of
 *                               contact where the zoom gesture is
 *                               complete.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event imeStartComposition    This event is dispatched to any client app
 *                               that supports inline input with an IME
 * @event keyDown                Dispatched when the user presses a key.
 *                               Mappings between keys and specific characters
 *                               vary by device and operating system. This
 *                               event type is generated after such a mapping
 *                               occurs but before the processing of an input
 *                               method editor(IME). IMEs are used to enter
 *                               characters, such as Chinese ideographs, that
 *                               the standard QWERTY keyboard is ill-equipped
 *                               to produce. This event occurs before the
 *                               <code>keyUp</code> event.
 *
 *                               <p>In AIR, canceling this event prevents the
 *                               character from being entered into a text
 *                               field.</p>
 * @event keyFocusChange         Dispatched when the user attempts to change
 *                               focus by using keyboard navigation. The
 *                               default behavior of this event is to change
 *                               the focus and dispatch the corresponding
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events.
 *
 *                               <p>This event is dispatched to the object
 *                               that currently has focus. The related object
 *                               for this event is the InteractiveObject
 *                               instance that receives focus if you do not
 *                               prevent the default behavior. You can prevent
 *                               the change in focus by calling the
 *                               <code>preventDefault()</code> method in an
 *                               event listener that is properly registered
 *                               with the target object. Focus changes and
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events are dispatched
 *                               by default.</p>
 * @event keyUp                  Dispatched when the user releases a key.
 *                               Mappings between keys and specific characters
 *                               vary by device and operating system. This
 *                               event type is generated after such a mapping
 *                               occurs but before the processing of an input
 *                               method editor(IME). IMEs are used to enter
 *                               characters, such as Chinese ideographs, that
 *                               the standard QWERTY keyboard is ill-equipped
 *                               to produce. This event occurs after a
 *                               <code>keyDown</code> event and has the
 *                               following characteristics:
 * @event middleClick            Dispatched when a user presses and releases
 *                               the middle button of the user's pointing
 *                               device over the same InteractiveObject. For a
 *                               <code>middleClick</code> event to occur, it
 *                               must always follow this series of events in
 *                               the order of occurrence:
 *                               <code>middleMouseDown</code> event, then
 *                               <code>middleMouseUp</code>. The target object
 *                               must be identical for both of these events;
 *                               otherwise the <code>middleClick</code> event
 *                               does not occur. Any number of other mouse
 *                               events can occur at any time between the
 *                               <code>middleMouseDown</code> or
 *                               <code>middleMouseUp</code> events; the
 *                               <code>middleClick</code> event still occurs.
 * @event middleMouseDown        Dispatched when a user presses the middle
 *                               pointing device button over an
 *                               InteractiveObject instance.
 * @event middleMouseUp          Dispatched when a user releases the pointing
 *                               device button over an InteractiveObject
 *                               instance.
 * @event mouseDown              Dispatched when a user presses the pointing
 *                               device button over an InteractiveObject
 *                               instance. If the target is a SimpleButton
 *                               instance, the SimpleButton instance displays
 *                               the <code>downState</code> display object as
 *                               the default behavior. If the target is a
 *                               selectable text field, the text field begins
 *                               selection as the default behavior.
 * @event mouseFocusChange       Dispatched when the user attempts to change
 *                               focus by using a pointer device. The default
 *                               behavior of this event is to change the focus
 *                               and dispatch the corresponding
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events.
 *
 *                               <p>This event is dispatched to the object
 *                               that currently has focus. The related object
 *                               for this event is the InteractiveObject
 *                               instance that receives focus if you do not
 *                               prevent the default behavior. You can prevent
 *                               the change in focus by calling
 *                               <code>preventDefault()</code> in an event
 *                               listener that is properly registered with the
 *                               target object. The <code>shiftKey</code>
 *                               property is not used. Focus changes and
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events are dispatched
 *                               by default.</p>
 * @event mouseMove              Dispatched when a user moves the pointing
 *                               device while it is over an InteractiveObject.
 *                               If the target is a text field that the user
 *                               is selecting, the selection is updated as the
 *                               default behavior.
 * @event mouseOut               Dispatched when the user moves a pointing
 *                               device away from an InteractiveObject
 *                               instance. The event target is the object
 *                               previously under the pointing device. The
 *                               <code>relatedObject</code> is the object the
 *                               pointing device has moved to. If the target
 *                               is a SimpleButton instance, the button
 *                               displays the <code>upState</code> display
 *                               object as the default behavior.
 *
 *                               <p>The <code>mouseOut</code> event is
 *                               dispatched each time the mouse leaves the
 *                               area of any child object of the display
 *                               object container, even if the mouse remains
 *                               over another child object of the display
 *                               object container. This is different behavior
 *                               than the purpose of the <code>rollOut</code>
 *                               event, which is to simplify the coding of
 *                               rollover behaviors for display object
 *                               containers with children. When the mouse
 *                               leaves the area of a display object or the
 *                               area of any of its children to go to an
 *                               object that is not one of its children, the
 *                               display object dispatches the
 *                               <code>rollOut</code> event.The
 *                               <code>rollOut</code> events are dispatched
 *                               consecutively up the parent chain of the
 *                               object, starting with the object and ending
 *                               with the highest parent that is neither the
 *                               root nor an ancestor of the
 *                               <code>relatedObject</code>.</p>
 * @event mouseOver              Dispatched when the user moves a pointing
 *                               device over an InteractiveObject instance.
 *                               The <code>relatedObject</code> is the object
 *                               that was previously under the pointing
 *                               device. If the target is a SimpleButton
 *                               instance, the object displays the
 *                               <code>overState</code> or
 *                               <code>upState</code> display object,
 *                               depending on whether the mouse button is
 *                               down, as the default behavior.
 *
 *                               <p>The <code>mouseOver</code> event is
 *                               dispatched each time the mouse enters the
 *                               area of any child object of the display
 *                               object container, even if the mouse was
 *                               already over another child object of the
 *                               display object container. This is different
 *                               behavior than the purpose of the
 *                               <code>rollOver</code> event, which is to
 *                               simplify the coding of rollout behaviors for
 *                               display object containers with children. When
 *                               the mouse enters the area of a display object
 *                               or the area of any of its children from an
 *                               object that is not one of its children, the
 *                               display object dispatches the
 *                               <code>rollOver</code> event. The
 *                               <code>rollOver</code> events are dispatched
 *                               consecutively down the parent chain of the
 *                               object, starting with the highest parent that
 *                               is neither the root nor an ancestor of the
 *                               <code>relatedObject</code> and ending with
 *                               the object.</p>
 * @event mouseUp                Dispatched when a user releases the pointing
 *                               device button over an InteractiveObject
 *                               instance. If the target is a SimpleButton
 *                               instance, the object displays the
 *                               <code>upState</code> display object. If the
 *                               target is a selectable text field, the text
 *                               field ends selection as the default behavior.
 * @event mouseWheel             Dispatched when a mouse wheel is spun over an
 *                               InteractiveObject instance. If the target is
 *                               a text field, the text scrolls as the default
 *                               behavior. Only available on Microsoft Windows
 *                               operating systems.
 * @event nativeDragComplete     Dispatched by the drag initiator
 *                               InteractiveObject when the user releases the
 *                               drag gesture.
 *
 *                               <p>The event's dropAction property indicates
 *                               the action set by the drag target object; a
 *                               value of "none"
 *                              (<code>DragActions.NONE</code>) indicates
 *                               that the drop was canceled or was not
 *                               accepted.</p>
 *
 *                               <p>The <code>nativeDragComplete</code> event
 *                               handler is a convenient place to update the
 *                               state of the initiating display object, for
 *                               example, by removing an item from a list(on
 *                               a drag action of "move"), or by changing the
 *                               visual properties.</p>
 * @event nativeDragDrop         Dispatched by the target InteractiveObject
 *                               when a dragged object is dropped on it and
 *                               the drop has been accepted with a call to
 *                               DragManager.acceptDragDrop().
 *
 *                               <p>Access the dropped data using the event
 *                               object <code>clipboard</code> property.</p>
 *
 *                               <p>The handler for this event should set the
 *                               <code>DragManager.dropAction</code> property
 *                               to provide feedback to the initiator object
 *                               about which drag action was taken. If no
 *                               value is set, the DragManager will select a
 *                               default value from the list of allowed
 *                               actions.</p>
 * @event nativeDragEnter        Dispatched by an InteractiveObject when a
 *                               drag gesture enters its boundary.
 *
 *                               <p>Handle either the
 *                               <code>nativeDragEnter</code> or
 *                               <code>nativeDragOver</code> events to allow
 *                               the display object to become the drop
 *                               target.</p>
 *
 *                               <p>To determine whether the dispatching
 *                               display object can accept the drop, check the
 *                               suitability of the data in
 *                               <code>clipboard</code> property of the event
 *                               object, and the allowed drag actions in the
 *                               <code>allowedActions</code> property.</p>
 * @event nativeDragExit         Dispatched by an InteractiveObject when a
 *                               drag gesture leaves its boundary.
 * @event nativeDragOver         Dispatched by an InteractiveObject
 *                               continually while a drag gesture remains
 *                               within its boundary.
 *
 *                               <p><code>nativeDragOver</code> events are
 *                               dispatched whenever the mouse is moved. On
 *                               Windows and Mac, they are also dispatched on
 *                               a short timer interval even when the mouse
 *                               has not moved.</p>
 *
 *                               <p>Handle either the
 *                               <code>nativeDragOver</code> or
 *                               <code>nativeDragEnter</code> events to allow
 *                               the display object to become the drop
 *                               target.</p>
 *
 *                               <p>To determine whether the dispatching
 *                               display object can accept the drop, check the
 *                               suitability of the data in
 *                               <code>clipboard</code> property of the event
 *                               object, and the allowed drag actions in the
 *                               <code>allowedActions</code> property.</p>
 * @event nativeDragStart        Dispatched at the beginning of a drag
 *                               operation by the InteractiveObject that is
 *                               specified as the drag initiator in the
 *                               DragManager.doDrag() call.
 * @event nativeDragUpdate       Dispatched during a drag operation by the
 *                               InteractiveObject that is specified as the
 *                               drag initiator in the DragManager.doDrag()
 *                               call.
 *
 *                               <p><code>nativeDragUpdate</code> events are
 *                               not dispatched on Linux.</p>
 * @event paste                  Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a paste operation or selects 'Paste' from
 *                               the text context menu. This event is
 *                               dispatched to the object that currently has
 *                               focus. If the object that currently has focus
 *                               is a TextField, the default behavior of this
 *                               event is to cause the contents of the
 *                               clipboard to be pasted into the text field at
 *                               the current insertion point replacing any
 *                               currently selected text in the text field.
 * @event rightClick             Dispatched when a user presses and releases
 *                               the right button of the user's pointing
 *                               device over the same InteractiveObject. For a
 *                               <code>rightClick</code> event to occur, it
 *                               must always follow this series of events in
 *                               the order of occurrence:
 *                               <code>rightMouseDown</code> event, then
 *                               <code>rightMouseUp</code>. The target object
 *                               must be identical for both of these events;
 *                               otherwise the <code>rightClick</code> event
 *                               does not occur. Any number of other mouse
 *                               events can occur at any time between the
 *                               <code>rightMouseDown</code> or
 *                               <code>rightMouseUp</code> events; the
 *                               <code>rightClick</code> event still occurs.
 * @event rightMouseDown         Dispatched when a user presses the pointing
 *                               device button over an InteractiveObject
 *                               instance.
 * @event rightMouseUp           Dispatched when a user releases the pointing
 *                               device button over an InteractiveObject
 *                               instance.
 * @event rollOut                Dispatched when the user moves a pointing
 *                               device away from an InteractiveObject
 *                               instance. The event target is the object
 *                               previously under the pointing device or a
 *                               parent of that object. The
 *                               <code>relatedObject</code> is the object that
 *                               the pointing device has moved to. The
 *                               <code>rollOut</code> events are dispatched
 *                               consecutively up the parent chain of the
 *                               object, starting with the object and ending
 *                               with the highest parent that is neither the
 *                               root nor an ancestor of the
 *                               <code>relatedObject</code>.
 *
 *                               <p>The purpose of the <code>rollOut</code>
 *                               event is to simplify the coding of rollover
 *                               behaviors for display object containers with
 *                               children. When the mouse leaves the area of a
 *                               display object or the area of any of its
 *                               children to go to an object that is not one
 *                               of its children, the display object
 *                               dispatches the <code>rollOut</code> event.
 *                               This is different behavior than that of the
 *                               <code>mouseOut</code> event, which is
 *                               dispatched each time the mouse leaves the
 *                               area of any child object of the display
 *                               object container, even if the mouse remains
 *                               over another child object of the display
 *                               object container.</p>
 * @event rollOver               Dispatched when the user moves a pointing
 *                               device over an InteractiveObject instance.
 *                               The event target is the object under the
 *                               pointing device or a parent of that object.
 *                               The <code>relatedObject</code> is the object
 *                               that was previously under the pointing
 *                               device. The <code>rollOver</code> events are
 *                               dispatched consecutively down the parent
 *                               chain of the object, starting with the
 *                               highest parent that is neither the root nor
 *                               an ancestor of the <code>relatedObject</code>
 *                               and ending with the object.
 *
 *                               <p>The purpose of the <code>rollOver</code>
 *                               event is to simplify the coding of rollout
 *                               behaviors for display object containers with
 *                               children. When the mouse enters the area of a
 *                               display object or the area of any of its
 *                               children from an object that is not one of
 *                               its children, the display object dispatches
 *                               the <code>rollOver</code> event. This is
 *                               different behavior than that of the
 *                               <code>mouseOver</code> event, which is
 *                               dispatched each time the mouse enters the
 *                               area of any child object of the display
 *                               object container, even if the mouse was
 *                               already over another child object of the
 *                               display object container. </p>
 * @event selectAll              Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a select all operation or selects 'Select
 *                               All' from the text context menu. This event
 *                               is dispatched to the object that currently
 *                               has focus. If the object that currently has
 *                               focus is a TextField, the default behavior of
 *                               this event is to cause all the contents of
 *                               the text field to be selected.
 * @event softKeyboardActivate   Dispatched immediately after the soft
 *                               keyboard is raised.
 * @event softKeyboardActivating Dispatched immediately before the soft
 *                               keyboard is raised.
 * @event softKeyboardDeactivate Dispatched immediately after the soft
 *                               keyboard is lowered.
 * @event tabChildrenChange      Dispatched when the value of the object's
 *                               <code>tabChildren</code> flag changes.
 * @event tabEnabledChange       Dispatched when the object's
 *                               <code>tabEnabled</code> flag changes.
 * @event tabIndexChange         Dispatched when the value of the object's
 *                               <code>tabIndex</code> property changes.
 * @event textInput              Dispatched when a user enters one or more
 *                               characters of text. Various text input
 *                               methods can generate this event, including
 *                               standard keyboards, input method editors
 *                              (IMEs), voice or speech recognition systems,
 *                               and even the act of pasting plain text with
 *                               no formatting or style information.
 * @event touchBegin             Dispatched when the user first contacts a
 *                               touch-enabled device(such as touches a
 *                               finger to a mobile phone or tablet with a
 *                               touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>mouseDown</code> event.
 *
 *                               <p>Specifically, if a user touches a finger
 *                               to a touch screen, the InteractiveObject
 *                               instance can dispatch a
 *                               <code>mouseDown</code> event or a
 *                               <code>touchBegin</code> event, or both if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseDown</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>touchBegin</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchEnd               Dispatched when the user removes contact with
 *                               a touch-enabled device(such as lifts a
 *                               finger off a mobile phone or tablet with a
 *                               touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>mouseUp</code> event.
 *
 *                               <p>Specifically, if a user lifts a finger
 *                               from a touch screen, the InteractiveObject
 *                               instance can dispatch a <code>mouseUp</code>
 *                               event or a <code>touchEnd</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the flash.ui.Multitouch
 *                               class to manage touch event handling(enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>mouseUp</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchEnd</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchMove              Dispatched when the user moves the point of
 *                               contact with a touch-enabled device(such as
 *                               drags a finger across a mobile phone or
 *                               tablet with a touch screen). Some devices
 *                               might also interpret this contact as a
 *                               <code>mouseMove</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               across a touch screen, the InteractiveObject
 *                               instance can dispatch a
 *                               <code>mouseMove</code> event or a
 *                               <code>touchMove</code> event, or both if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseMove</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>touchMove</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchOut               Dispatched when the user moves the point of
 *                               contact away from InteractiveObject instance
 *                               on a touch-enabled device(such as drags a
 *                               finger from one display object to another on
 *                               a mobile phone or tablet with a touch
 *                               screen). Some devices might also interpret
 *                               this contact as a <code>mouseOut</code>
 *                               event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               across a touch screen, the InteractiveObject
 *                               instance can dispatch a <code>mouseOut</code>
 *                               event or a <code>touchOut</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the flash.ui.Multitouch
 *                               class to manage touch event handling(enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>mouseOut</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchOut</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchOver              Dispatched when the user moves the point of
 *                               contact over an InteractiveObject instance on
 *                               a touch-enabled device(such as drags a
 *                               finger from a point outside a display object
 *                               to a point over a display object on a mobile
 *                               phone or tablet with a touch screen). Some
 *                               devices might also interpret this contact as
 *                               a <code>mouseOver</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>mouseOver</code> event or a
 *                               <code>touchOver</code> event, or both if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the flash.ui.Multitouch class to manage touch
 *                               event handling(enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>touchOver</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchRollOut           Dispatched when the user moves the point of
 *                               contact away from an InteractiveObject
 *                               instance on a touch-enabled device(such as
 *                               drags a finger from over a display object to
 *                               a point outside the display object on a
 *                               mobile phone or tablet with a touch screen).
 *                               Some devices might also interpret this
 *                               contact as a <code>rollOut</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>rollOut</code> event or a
 *                               <code>touchRollOut</code> event, or both if
 *                               the current environment supports it. Choose
 *                               how you want to handle the user interaction.
 *                               Use the flash.ui.Multitouch class to manage
 *                               touch event handling(enable touch gesture
 *                               event handling, simple touch point event
 *                               handling, or disable touch events so only
 *                               mouse events are dispatched). If you choose
 *                               to handle the <code>rollOut</code> event,
 *                               then the same event handler will run on a
 *                               touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchRollOut</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchRollOver          Dispatched when the user moves the point of
 *                               contact over an InteractiveObject instance on
 *                               a touch-enabled device(such as drags a
 *                               finger from a point outside a display object
 *                               to a point over a display object on a mobile
 *                               phone or tablet with a touch screen). Some
 *                               devices might also interpret this contact as
 *                               a <code>rollOver</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>rollOver</code> event or a
 *                               <code>touchRollOver</code> event, or both if
 *                               the current environment supports it. Choose
 *                               how you want to handle the user interaction.
 *                               Use the flash.ui.Multitouch class to manage
 *                               touch event handling(enable touch gesture
 *                               event handling, simple touch point event
 *                               handling, or disable touch events so only
 *                               mouse events are dispatched). If you choose
 *                               to handle the <code>rollOver</code> event,
 *                               then the same event handler will run on a
 *                               touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchRollOver</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchTap               Dispatched when the user lifts the point of
 *                               contact over the same InteractiveObject
 *                               instance on which the contact was initiated
 *                               on a touch-enabled device(such as presses
 *                               and releases a finger from a single point
 *                               over a display object on a mobile phone or
 *                               tablet with a touch screen). Some devices
 *                               might also interpret this contact as a
 *                               <code>click</code> event.
 *
 *                               <p>Specifically, if a user taps a finger over
 *                               an InteractiveObject, the InteractiveObject
 *                               instance can dispatch a <code>click</code>
 *                               event or a <code>touchTap</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the flash.ui.Multitouch
 *                               class to manage touch event handling(enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>click</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchTap</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>]]></haxe_doc>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Determines whether or not the children of the object are mouse, or user
	 * input device, enabled. If an object is enabled, a user can interact with
	 * it by using a mouse or user input device. The default is
	 * <code>true</code>.
	 *
	 * <p>This property is useful when you create a button with an instance of
	 * the Sprite class(instead of using the SimpleButton class). When you use a
	 * Sprite instance to create a button, you can choose to decorate the button
	 * by using the <code>addChild()</code> method to add additional Sprite
	 * instances. This process can cause unexpected behavior with mouse events
	 * because the Sprite instances you add as children can become the target
	 * object of a mouse event when you expect the parent instance to be the
	 * target object. To ensure that the parent instance serves as the target
	 * objects for mouse events, you can set the <code>mouseChildren</code>
	 * property of the parent instance to <code>false</code>.</p>
	 *
	 * <p> No event is dispatched by setting this property. You must use the
	 * <code>addEventListener()</code> method to create interactive
	 * functionality.</p>]]></haxe_doc>
		</mouseChildren>
		<numChildren public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Returns the number of children of this object.</haxe_doc>
		</numChildren>
		<tabChildren public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Determines whether the children of the object are tab enabled. Enables or
	 * disables tabbing for the children of the object. The default is
	 * <code>true</code>.
	 *
	 * <p><b>Note:</b> Do not use the <code>tabChildren</code> property with
	 * Flex. Instead, use the
	 * <code>mx.core.UIComponent.hasFocusableChildren</code> property.</p>
	 * 
	 * @throws IllegalOperationError Calling this property of the Stage object
	 *                               throws an exception. The Stage object does
	 *                               not implement this property.]]></haxe_doc>
		</tabChildren>
		<addChild public="1" set="method">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Adds a child DisplayObject instance to this DisplayObjectContainer
	 * instance. The child is added to the front(top) of all other children in
	 * this DisplayObjectContainer instance.(To add a child to a specific index
	 * position, use the <code>addChildAt()</code> method.)
	 *
	 * <p>If you add a child object that already has a different display object
	 * container as a parent, the object is removed from the child list of the
	 * other display object container. </p>
	 *
	 * <p><b>Note:</b> The command <code>stage.addChild()</code> can cause
	 * problems with a published SWF file, including security problems and
	 * conflicts with other loaded SWF files. There is only one Stage within a
	 * Flash runtime instance, no matter how many SWF files you load into the
	 * runtime. So, generally, objects should not be added to the Stage,
	 * directly, at all. The only object the Stage should contain is the root
	 * object. Create a DisplayObjectContainer to contain all of the items on the
	 * display list. Then, if necessary, add that DisplayObjectContainer instance
	 * to the Stage.</p>
	 * 
	 * @param child The DisplayObject instance to add as a child of this
	 *              DisplayObjectContainer instance.
	 * @return The DisplayObject instance that you pass in the <code>child</code>
	 *         parameter.
	 * @throws ArgumentError Throws if the child is the same as the parent. Also
	 *                       throws if the caller is a child(or grandchild etc.)
	 *                       of the child being added.
	 * @event added Dispatched when a display object is added to the display
	 *              list.]]></haxe_doc>
		</addChild>
		<addChildAt public="1" set="method">
			<f a="child:index">
				<c path="flash.display.DisplayObject"/>
				<x path="Int"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Adds a child DisplayObject instance to this DisplayObjectContainer
	 * instance. The child is added at the index position specified. An index of
	 * 0 represents the back(bottom) of the display list for this
	 * DisplayObjectContainer object.
	 *
	 * <p>For example, the following example shows three display objects, labeled
	 * a, b, and c, at index positions 0, 2, and 1, respectively:</p>
	 *
	 * <p>If you add a child object that already has a different display object
	 * container as a parent, the object is removed from the child list of the
	 * other display object container. </p>
	 * 
	 * @param child The DisplayObject instance to add as a child of this
	 *              DisplayObjectContainer instance.
	 * @param index The index position to which the child is added. If you
	 *              specify a currently occupied index position, the child object
	 *              that exists at that position and all higher positions are
	 *              moved up one position in the child list.
	 * @return The DisplayObject instance that you pass in the <code>child</code>
	 *         parameter.
	 * @throws ArgumentError Throws if the child is the same as the parent. Also
	 *                       throws if the caller is a child(or grandchild etc.)
	 *                       of the child being added.
	 * @throws RangeError    Throws if the index position does not exist in the
	 *                       child list.
	 * @event added Dispatched when a display object is added to the display
	 *              list.]]></haxe_doc>
		</addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Indicates whether the security restrictions would cause any display
	 * objects to be omitted from the list returned by calling the
	 * <code>DisplayObjectContainer.getObjectsUnderPoint()</code> method with the
	 * specified <code>point</code> point. By default, content from one domain
	 * cannot access objects from another domain unless they are permitted to do
	 * so with a call to the <code>Security.allowDomain()</code> method. For more
	 * information, related to security, see the Flash Player Developer Center
	 * Topic: <a href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.
	 *
	 * <p>The <code>point</code> parameter is in the coordinate space of the
	 * Stage, which may differ from the coordinate space of the display object
	 * container(unless the display object container is the Stage). You can use
	 * the <code>globalToLocal()</code> and the <code>localToGlobal()</code>
	 * methods to convert points between these coordinate spaces.</p>
	 * 
	 * @param point The point under which to look.
	 * @return <code>true</code> if the point contains child display objects with
	 *         security restrictions.]]></haxe_doc>
		</areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the specified display object is a child of the
	 * DisplayObjectContainer instance or the instance itself. The search
	 * includes the entire display list including this DisplayObjectContainer
	 * instance. Grandchildren, great-grandchildren, and so on each return
	 * <code>true</code>.
	 * 
	 * @param child The child object to test.
	 * @return <code>true</code> if the <code>child</code> object is a child of
	 *         the DisplayObjectContainer or the container itself; otherwise
	 *         <code>false</code>.]]></haxe_doc>
		</contains>
		<getChildAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns the child display object instance that exists at the specified
	 * index.
	 * 
	 * @param index The index position of the child object.
	 * @return The child display object at the specified index position.
	 * @throws RangeError    Throws if the index does not exist in the child
	 *                       list.
	 * @throws SecurityError This child display object belongs to a sandbox to
	 *                       which you do not have access. You can avoid this
	 *                       situation by having the child movie call
	 *                       <code>Security.allowDomain()</code>.]]></haxe_doc>
		</getChildAt>
		<getChildByName public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns the child display object that exists with the specified name. If
	 * more that one child display object has the specified name, the method
	 * returns the first object in the child list.
	 *
	 * <p>The <code>getChildAt()</code> method is faster than the
	 * <code>getChildByName()</code> method. The <code>getChildAt()</code> method
	 * accesses a child from a cached array, whereas the
	 * <code>getChildByName()</code> method has to traverse a linked list to
	 * access a child.</p>
	 * 
	 * @param name The name of the child to return.
	 * @return The child display object with the specified name.
	 * @throws SecurityError This child display object belongs to a sandbox to
	 *                       which you do not have access. You can avoid this
	 *                       situation by having the child movie call the
	 *                       <code>Security.allowDomain()</code> method.]]></haxe_doc>
		</getChildByName>
		<getChildIndex public="1" set="method">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the index position of a <code>child</code> DisplayObject instance.
	 * 
	 * @param child The DisplayObject instance to identify.
	 * @return The index position of the child display object to identify.
	 * @throws ArgumentError Throws if the child parameter is not a child of this
	 *                       object.]]></haxe_doc>
		</getChildIndex>
		<getObjectsUnderPoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="Array"><c path="flash.display.DisplayObject"/></c>
			</f>
			<haxe_doc><![CDATA[* Returns an array of objects that lie under the specified point and are
	 * children(or grandchildren, and so on) of this DisplayObjectContainer
	 * instance. Any child objects that are inaccessible for security reasons are
	 * omitted from the returned array. To determine whether this security
	 * restriction affects the returned array, call the
	 * <code>areInaccessibleObjectsUnderPoint()</code> method.
	 *
	 * <p>The <code>point</code> parameter is in the coordinate space of the
	 * Stage, which may differ from the coordinate space of the display object
	 * container(unless the display object container is the Stage). You can use
	 * the <code>globalToLocal()</code> and the <code>localToGlobal()</code>
	 * methods to convert points between these coordinate spaces.</p>
	 * 
	 * @param point The point under which to look.
	 * @return An array of objects that lie under the specified point and are
	 *         children(or grandchildren, and so on) of this
	 *         DisplayObjectContainer instance.]]></haxe_doc>
		</getObjectsUnderPoint>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Removes the specified <code>child</code> DisplayObject instance from the
	 * child list of the DisplayObjectContainer instance. The <code>parent</code>
	 * property of the removed child is set to <code>null</code> , and the object
	 * is garbage collected if no other references to the child exist. The index
	 * positions of any display objects above the child in the
	 * DisplayObjectContainer are decreased by 1.
	 *
	 * <p>The garbage collector reallocates unused memory space. When a variable
	 * or object is no longer actively referenced or stored somewhere, the
	 * garbage collector sweeps through and wipes out the memory space it used to
	 * occupy if no other references to it exist.</p>
	 * 
	 * @param child The DisplayObject instance to remove.
	 * @return The DisplayObject instance that you pass in the <code>child</code>
	 *         parameter.
	 * @throws ArgumentError Throws if the child parameter is not a child of this
	 *                       object.]]></haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Removes a child DisplayObject from the specified <code>index</code>
	 * position in the child list of the DisplayObjectContainer. The
	 * <code>parent</code> property of the removed child is set to
	 * <code>null</code>, and the object is garbage collected if no other
	 * references to the child exist. The index positions of any display objects
	 * above the child in the DisplayObjectContainer are decreased by 1.
	 *
	 * <p>The garbage collector reallocates unused memory space. When a variable
	 * or object is no longer actively referenced or stored somewhere, the
	 * garbage collector sweeps through and wipes out the memory space it used to
	 * occupy if no other references to it exist.</p>
	 * 
	 * @param index The child index of the DisplayObject to remove.
	 * @return The DisplayObject instance that was removed.
	 * @throws RangeError    Throws if the index does not exist in the child
	 *                       list.
	 * @throws SecurityError This child display object belongs to a sandbox to
	 *                       which the calling object does not have access. You
	 *                       can avoid this situation by having the child movie
	 *                       call the <code>Security.allowDomain()</code> method.]]></haxe_doc>
		</removeChildAt>
		<setChildIndex public="1" set="method">
			<f a="child:index">
				<c path="flash.display.DisplayObject"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Changes the position of an existing child in the display object container.
	 * This affects the layering of child objects. For example, the following
	 * example shows three display objects, labeled a, b, and c, at index
	 * positions 0, 1, and 2, respectively:
	 *
	 * <p>When you use the <code>setChildIndex()</code> method and specify an
	 * index position that is already occupied, the only positions that change
	 * are those in between the display object's former and new position. All
	 * others will stay the same. If a child is moved to an index LOWER than its
	 * current index, all children in between will INCREASE by 1 for their index
	 * reference. If a child is moved to an index HIGHER than its current index,
	 * all children in between will DECREASE by 1 for their index reference. For
	 * example, if the display object container in the previous example is named
	 * <code>container</code>, you can swap the position of the display objects
	 * labeled a and b by calling the following code:</p>
	 *
	 * <p>This code results in the following arrangement of objects:</p>
	 * 
	 * @param child The child DisplayObject instance for which you want to change
	 *              the index number.
	 * @param index The resulting index number for the <code>child</code> display
	 *              object.
	 * @throws ArgumentError Throws if the child parameter is not a child of this
	 *                       object.
	 * @throws RangeError    Throws if the index does not exist in the child
	 *                       list.]]></haxe_doc>
		</setChildIndex>
		<swapChildren public="1" set="method">
			<f a="child1:child2">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.display.DisplayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Swaps the z-order(front-to-back order) of the two specified child
	 * objects. All other child objects in the display object container remain in
	 * the same index positions.
	 * 
	 * @param child1 The first child object.
	 * @param child2 The second child object.
	 * @throws ArgumentError Throws if either child parameter is not a child of
	 *                       this object.</haxe_doc>
		</swapChildren>
		<swapChildrenAt public="1" set="method">
			<f a="index1:index2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Swaps the z-order(front-to-back order) of the child objects at the two
	 * specified index positions in the child list. All other child objects in
	 * the display object container remain in the same index positions.
	 * 
	 * @param index1 The index position of the first child object.
	 * @param index2 The index position of the second child object.
	 * @throws RangeError If either index does not exist in the child list.</haxe_doc>
		</swapChildrenAt>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns a TextSnapshot object for this DisplayObjectContainer instance.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The DisplayObjectContainer class is the base class for all objects that can
 * serve as display object containers on the display list. The display list
 * manages all objects displayed in the Flash runtimes. Use the
 * DisplayObjectContainer class to arrange the display objects in the display
 * list. Each DisplayObjectContainer object has its own child list for
 * organizing the z-order of the objects. The z-order is the front-to-back
 * order that determines which object is drawn in front, which is behind, and
 * so on.
 *
 * <p>DisplayObject is an abstract base class; therefore, you cannot call
 * DisplayObject directly. Invoking <code>new DisplayObject()</code> throws an
 * <code>ArgumentError</code> exception.</p>
 * The DisplayObjectContainer class is an abstract base class for all objects
 * that can contain child objects. It cannot be instantiated directly; calling
 * the <code>new DisplayObjectContainer()</code> constructor throws an
 * <code>ArgumentError</code> exception.
 *
 * <p>For more information, see the "Display Programming" chapter of the
 * <i>ActionScript 3.0 Developer's Guide</i>.</p>]]></haxe_doc>
	</class>
	<class path="flash.display.Sprite" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies the button mode of this sprite. If <code>true</code>, this
	 * sprite behaves as a button, which means that it triggers the display of
	 * the hand cursor when the pointer passes over the sprite and can receive a
	 * <code>click</code> event if the enter or space keys are pressed when the
	 * sprite has focus. You can suppress the display of the hand cursor by
	 * setting the <code>useHandCursor</code> property to <code>false</code>, in
	 * which case the pointer is displayed.
	 *
	 * <p>Although it is better to use the SimpleButton class to create buttons,
	 * you can use the <code>buttonMode</code> property to give a sprite some
	 * button-like functionality. To include a sprite in the tab order, set the
	 * <code>tabEnabled</code> property(inherited from the InteractiveObject
	 * class and <code>false</code> by default) to <code>true</code>.
	 * Additionally, consider whether you want the children of your sprite to be
	 * user input enabled. Most buttons do not enable user input interactivity
	 * for their child objects because it confuses the event flow. To disable
	 * user input interactivity for all child objects, you must set the
	 * <code>mouseChildren</code> property(inherited from the
	 * DisplayObjectContainer class) to <code>false</code>.</p>
	 *
	 * <p>If you use the <code>buttonMode</code> property with the MovieClip
	 * class(which is a subclass of the Sprite class), your button might have
	 * some added functionality. If you include frames labeled _up, _over, and
	 * _down, Flash Player provides automatic state changes(functionality
	 * similar to that provided in previous versions of ActionScript for movie
	 * clips used as buttons). These automatic state changes are not available
	 * for sprites, which have no timeline, and thus no frames to label. </p>]]></haxe_doc>
		</buttonMode>
		<dropTarget public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<haxe_doc>* Specifies the display object over which the sprite is being dragged, or on
	 * which the sprite was dropped.</haxe_doc>
		</dropTarget>
		<graphics public="1" set="null">
			<c path="flash.display.Graphics"/>
			<haxe_doc>* Specifies the Graphics object that belongs to this sprite where vector
	 * drawing commands can occur.</haxe_doc>
		</graphics>
		<hitArea public="1">
			<c path="flash.display.Sprite"/>
			<haxe_doc><![CDATA[* Designates another sprite to serve as the hit area for a sprite. If the
	 * <code>hitArea</code> property does not exist or the value is
	 * <code>null</code> or <code>undefined</code>, the sprite itself is used as
	 * the hit area. The value of the <code>hitArea</code> property can be a
	 * reference to a Sprite object.
	 *
	 * <p>You can change the <code>hitArea</code> property at any time; the
	 * modified sprite immediately uses the new hit area behavior. The sprite
	 * designated as the hit area does not need to be visible; its graphical
	 * shape, although not visible, is still detected as the hit area.</p>
	 *
	 * <p><b>Note:</b> You must set to <code>false</code> the
	 * <code>mouseEnabled</code> property of the sprite designated as the hit
	 * area. Otherwise, your sprite button might not work because the sprite
	 * designated as the hit area receives the user input events instead of your
	 * sprite button.</p>]]></haxe_doc>
		</hitArea>
		<soundTransform public="1">
			<c path="flash.media.SoundTransform"/>
			<haxe_doc><![CDATA[* Controls sound within this sprite.
	 *
	 * <p><b>Note:</b> This property does not affect HTML content in an
	 * HTMLControl object(in Adobe AIR).</p>]]></haxe_doc>
		</soundTransform>
		<useHandCursor public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether the pointing hand(hand cursor)
	 * appears when the pointer rolls over a sprite in which the
	 * <code>buttonMode</code> property is set to <code>true</code>. The default
	 * value of the <code>useHandCursor</code> property is <code>true</code>. If
	 * <code>useHandCursor</code> is set to <code>true</code>, the pointing hand
	 * used for buttons appears when the pointer rolls over a button sprite. If
	 * <code>useHandCursor</code> is <code>false</code>, the arrow pointer is
	 * used instead.
	 *
	 * <p>You can change the <code>useHandCursor</code> property at any time; the
	 * modified sprite immediately takes on the new cursor appearance. </p>
	 *
	 * <p><b>Note:</b> In Flex or Flash Builder, if your sprite has child
	 * sprites, you might want to set the <code>mouseChildren</code> property to
	 * <code>false</code>. For example, if you want a hand cursor to appear over
	 * a Flex <mx:Label> control, set the <code>useHandCursor</code> and
	 * <code>buttonMode</code> properties to <code>true</code>, and the
	 * <code>mouseChildren</code> property to <code>false</code>.</p>]]></haxe_doc>
		</useHandCursor>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds">
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Lets the user drag the specified sprite. The sprite remains draggable
	 * until explicitly stopped through a call to the
	 * <code>Sprite.stopDrag()</code> method, or until another sprite is made
	 * draggable. Only one sprite is draggable at a time.
	 *
	 * <p>Three-dimensional display objects follow the pointer and
	 * <code>Sprite.startDrag()</code> moves the object within the
	 * three-dimensional plane defined by the display object. Or, if the display
	 * object is a two-dimensional object and the child of a three-dimensional
	 * object, the two-dimensional object moves within the three dimensional
	 * plane defined by the three-dimensional parent object.</p>
	 * 
	 * @param lockCenter Specifies whether the draggable sprite is locked to the
	 *                   center of the pointer position(<code>true</code>), or
	 *                   locked to the point where the user first clicked the
	 *                   sprite(<code>false</code>).
	 * @param bounds     Value relative to the coordinates of the Sprite's parent
	 *                   that specify a constraint rectangle for the Sprite.]]></haxe_doc>
		</startDrag>
		<stopDrag public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Ends the <code>startDrag()</code> method. A sprite that was made draggable
	 * with the <code>startDrag()</code> method remains draggable until a
	 * <code>stopDrag()</code> method is added, or until another sprite becomes
	 * draggable. Only one sprite is draggable at a time.
	 *]]></haxe_doc>
		</stopDrag>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a new Sprite instance. After you create the Sprite instance, call
	 * the <code>DisplayObjectContainer.addChild()</code> or
	 * <code>DisplayObjectContainer.addChildAt()</code> method to add the Sprite
	 * to a parent DisplayObjectContainer.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Sprite class is a basic display list building block: a display list
 * node that can display graphics and can also contain children.
 *
 * <p>A Sprite object is similar to a movie clip, but does not have a
 * timeline. Sprite is an appropriate base class for objects that do not
 * require timelines. For example, Sprite would be a logical base class for
 * user interface(UI) components that typically do not use the timeline.</p>
 *
 * <p>The Sprite class is new in ActionScript 3.0. It provides an alternative
 * to the functionality of the MovieClip class, which retains all the
 * functionality of previous ActionScript releases to provide backward
 * compatibility.</p>]]></haxe_doc>
	</class>
	<class path="flash.display.MovieClip" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Specifies the number of the frame in which the playhead is located in the
	 * timeline of the MovieClip instance. If the movie clip has multiple scenes,
	 * this value is the frame number in the current scene.</haxe_doc>
		</currentFrame>
		<currentLabel public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The current label in which the playhead is located in the timeline of the
	 * MovieClip instance. If the current frame has no label,
	 * <code>currentLabel</code> is set to the name of the previous frame that
	 * includes a label. If the current frame and previous frames do not include
	 * a label, <code>currentLabel</code> returns <code>null</code>.]]></haxe_doc>
		</currentLabel>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>* Returns an array of FrameLabel objects from the current scene. If the
	 * MovieClip instance does not use scenes, the array includes all frame
	 * labels from the entire MovieClip instance.</haxe_doc>
		</enabled>
		<framesLoaded public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The number of frames that are loaded from a streaming SWF file. You can
	 * use the <code>framesLoaded</code> property to determine whether the
	 * contents of a specific frame and all the frames before it loaded and are
	 * available locally in the browser. You can also use it to monitor the
	 * downloading of large SWF files. For example, you might want to display a
	 * message to users indicating that the SWF file is loading until a specified
	 * frame in the SWF file finishes loading.
	 *
	 * <p>If the movie clip contains multiple scenes, the
	 * <code>framesLoaded</code> property returns the number of frames loaded for
	 * <i>all</i> scenes in the movie clip.</p>]]></haxe_doc>
		</framesLoaded>
		<totalFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* An array of Scene objects, each listing the name, the number of frames,
	 * and the frame labels for a scene in the MovieClip instance.</haxe_doc>
		</totalFrames>
		<trackAsMenu public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether other display objects that are SimpleButton or MovieClip
	 * objects can receive mouse release events or other user input release
	 * events. The <code>trackAsMenu</code> property lets you create menus. You
	 * can set the <code>trackAsMenu</code> property on any SimpleButton or
	 * MovieClip object. The default value of the <code>trackAsMenu</code>
	 * property is <code>false</code>.
	 *
	 * <p>You can change the <code>trackAsMenu</code> property at any time; the
	 * modified movie clip immediately uses the new behavior.</p>]]></haxe_doc>
		</trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method">
			<f a="frame:?scene">
				<t path="flash.utils.Object"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Starts playing the SWF file at the specified frame. This happens after all
	 * remaining actions in the frame have finished executing. To specify a scene
	 * as well as a frame, specify a value for the <code>scene</code> parameter.
	 * 
	 * @param frame A number representing the frame number, or a string
	 *              representing the label of the frame, to which the playhead is
	 *              sent. If you specify a number, it is relative to the scene
	 *              you specify. If you do not specify a scene, the current scene
	 *              determines the global frame number to play. If you do specify
	 *              a scene, the playhead jumps to the frame number in the
	 *              specified scene.
	 * @param scene The name of the scene to play. This parameter is optional.]]></haxe_doc>
		</gotoAndPlay>
		<gotoAndStop public="1" set="method">
			<f a="frame:?scene">
				<t path="flash.utils.Object"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Brings the playhead to the specified frame of the movie clip and stops it
	 * there. This happens after all remaining actions in the frame have finished
	 * executing. If you want to specify a scene in addition to a frame, specify
	 * a <code>scene</code> parameter.
	 * 
	 * @param frame A number representing the frame number, or a string
	 *              representing the label of the frame, to which the playhead is
	 *              sent. If you specify a number, it is relative to the scene
	 *              you specify. If you do not specify a scene, the current scene
	 *              determines the global frame number at which to go to and
	 *              stop. If you do specify a scene, the playhead goes to the
	 *              frame number in the specified scene and stops.
	 * @param scene The name of the scene. This parameter is optional.
	 * @throws ArgumentError If the <code>scene</code> or <code>frame</code>
	 *                       specified are not found in this movie clip.]]></haxe_doc>
		</gotoAndStop>
		<nextFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sends the playhead to the next frame and stops it. This happens after all
	 * remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</nextFrame>
		<nextScene public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the playhead to the next scene of the MovieClip instance. This
	 * happens after all remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</nextScene>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the playhead in the timeline of the movie clip.
	 *</haxe_doc>
		</play>
		<prevFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sends the playhead to the previous frame and stops it. This happens after
	 * all remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</prevFrame>
		<prevScene public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the playhead to the previous scene of the MovieClip instance. This
	 * happens after all remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</prevScene>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the playhead in the movie clip.
	 *</haxe_doc>
		</stop>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a new MovieClip instance. After creating the MovieClip, call the
	 * <code>addChild()</code> or <code>addChildAt()</code> method of a display
	 * object container that is onstage.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The MovieClip class inherits from the following classes: Sprite,
 * DisplayObjectContainer, InteractiveObject, DisplayObject, and
 * EventDispatcher.
 *
 * <p>Unlike the Sprite object, a MovieClip object has a timeline.</p>
 *
 * <p>>In Flash Professional, the methods for the MovieClip class provide the
 * same functionality as actions that target movie clips. Some additional
 * methods do not have equivalent actions in the Actions toolbox in the
 * Actions panel in the Flash authoring tool. </p>
 *
 * <p>Children instances placed on the Stage in Flash Professional cannot be
 * accessed by code from within the constructor of a parent instance since
 * they have not been created at that point in code execution. Before
 * accessing the child, the parent must instead either create the child
 * instance by code or delay access to a callback function that listens for
 * the child to dispatch its <code>Event.ADDED_TO_STAGE</code> event.</p>
 *
 * <p>If you modify any of the following properties of a MovieClip object that
 * contains a motion tween, the playhead is stopped in that MovieClip object:
 * <code>alpha</code>, <code>blendMode</code>, <code>filters</code>,
 * <code>height</code>, <code>opaqueBackground</code>, <code>rotation</code>,
 * <code>scaleX</code>, <code>scaleY</code>, <code>scale9Grid</code>,
 * <code>scrollRect</code>, <code>transform</code>, <code>visible</code>,
 * <code>width</code>, <code>x</code>, or <code>y</code>. However, it does not
 * stop the playhead in any child MovieClip objects of that MovieClip
 * object.</p>
 *
 * <p><b>Note:</b>Flash Lite 4 supports the MovieClip.opaqueBackground
 * property only if FEATURE_BITMAPCACHE is defined. The default configuration
 * of Flash Lite 4 does not define FEATURE_BITMAPCACHE. To enable the
 * MovieClip.opaqueBackground property for a suitable device, define
 * FEATURE_BITMAPCACHE in your project.</p>]]></haxe_doc>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="/usr/lib/haxe/std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="51" static="1"><x path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="83" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="92" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="102" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="110" static="1"><f a="rgb">
	<x path="Int"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="116" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="144" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="163" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="208" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<start set="method" line="53"><f a=""><x path="Void"/></f></start>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="/usr/lib/haxe/std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Int"/></f></getTimer>
		<eval public="1" set="method" line="13" static="1"><f a="path">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="33" static="1"><f a="url:?target">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<x path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="41" static="1"><f a="cmd:?param">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></fscommand>
		<trace public="1" set="method" line="45" static="1"><f a="arg">
	<d/>
	<x path="Void"/>
</f></trace>
		<attach public="1" set="method" line="49" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.display.MovieClip"/>
</f></attach>
		<as public="1" params="T" get="inline" set="null" line="54" static="1"><f a="v:c">
	<d/>
	<x path="Class"><c path="as.T"/></x>
	<t path="Null"><c path="as.T"/></t>
</f></as>
		<redirectTraces public="1" set="method" line="58" static="1"><f a=""><x path="Void"/></f></redirectTraces>
		<traceToConsole set="method" line="63" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></traceToConsole>
	</class>
	<class path="flash.Vector" params="T" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/Vector.hx" extern="1">
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<new public="1"><f a="?length:?fixed">
	<t path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.BitmapData" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The height of the bitmap image in pixels.</haxe_doc>
		</height>
		<rect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<haxe_doc>* The rectangle that defines the size and location of the bitmap image. The
	 * top and left of the rectangle are 0; the width and height are equal to the
	 * width and height in pixels of the BitmapData object.</haxe_doc>
		</rect>
		<transparent public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Defines whether the bitmap image supports per-pixel transparency. You can
	 * set this value only when you construct a BitmapData object by passing in
	 * <code>true</code> for the <code>transparent</code> parameter of the
	 * constructor. Then, after you create a BitmapData object, you can check
	 * whether it supports per-pixel transparency by determining if the value of
	 * the <code>transparent</code> property is <code>true</code>.]]></haxe_doc>
		</transparent>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The width of the bitmap image in pixels.</haxe_doc>
		</width>
		<applyFilter public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:filter">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.filters.BitmapFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Takes a source image and a filter object and generates the filtered image. 
	 * 
	 * This method relies on the behavior of built-in filter objects, which determine the 
	 * destination rectangle that is affected by an input source rectangle.
	 * 
	 * After a filter is applied, the resulting image can be larger than the input image. 
	 * For example, if you use a BlurFilter class to blur a source rectangle of(50,50,100,100) 
	 * and a destination point of(10,10), the area that changes in the destination image is 
	 * larger than(10,10,60,60) because of the blurring. This happens internally during the 
	 * applyFilter() call.
	 * 
	 * If the <code>sourceRect</code> parameter of the sourceBitmapData parameter is an 
	 * interior region, such as(50,50,100,100) in a 200 x 200 image, the filter uses the source 
	 * pixels outside the <code>sourceRect</code> parameter to generate the destination rectangle.
	 * 
	 * If the BitmapData object and the object specified as the <code>sourceBitmapData</code> 
	 * parameter are the same object, the application uses a temporary copy of the object to 
	 * perform the filter. For best performance, avoid this situation.
	 * 
	 * @param	sourceBitmapData		The input bitmap image to use. The source image can be a different BitmapData object or it can refer to the current BitmapData instance.
	 * @param	sourceRect		A rectangle that defines the area of the source image to use as input.
	 * @param	destPoint		The point within the destination image(the current BitmapData instance) that corresponds to the upper-left corner of the source rectangle. 
	 * @param	filter		The filter object that you use to perform the filtering operation.]]></haxe_doc>
		</applyFilter>
		<clone public="1" set="method">
			<f a=""><c path="flash.display.BitmapData"/></f>
			<haxe_doc>* Returns a new BitmapData object that is a clone of the original instance with an exact copy of the contained bitmap. 
	 * @return		A new BitmapData object that is identical to the original.</haxe_doc>
		</clone>
		<colorTransform public="1" set="method">
			<f a="rect:colorTransform">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adjusts the color values in a specified area of a bitmap image by using a <code>ColorTransform</code>
	 * object. If the rectangle matches the boundaries of the bitmap image, this method transforms the color 
	 * values of the entire image. 
	 * @param	rect		A Rectangle object that defines the area of the image in which the ColorTransform object is applied.
	 * @param	colorTransform		A ColorTransform object that describes the color transformation values to apply.]]></haxe_doc>
		</colorTransform>
		<copyChannel public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<t path="UInt"/>
				<t path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Compares two BitmapData objects. If the two BitmapData objects have the
	 * same dimensions(width and height), the method returns a new BitmapData
	 * object, in which each pixel is the "difference" between the pixels in the
	 * two source objects:
	 * <ul>
	 *   <li>If two pixels are equal, the difference pixel is 0x00000000. </li>
	 *   <li>If two pixels have different RGB values(ignoring the alpha value),
	 * the difference pixel is 0xRRGGBB where RR/GG/BB are the individual
	 * difference values between red, green, and blue channels(the pixel value
	 * in the source object minus the pixel value in the
	 * <code>otherBitmapData</code> object). Alpha channel differences are
	 * ignored in this case. </li>
	 *   <li>If only the alpha channel value is different, the pixel value is
	 * 0x<i>ZZ</i>FFFFFF, where <i>ZZ</i> is the difference in the alpha values
	 * (the alpha value in the source object minus the alpha value in the
	 * <code>otherBitmapData</code> object).</li>
	 * </ul>
	 *
	 * <p>For example, consider the following two BitmapData objects:</p>
	 * 
	 * @param otherBitmapData The BitmapData object to compare with the source
	 *                        BitmapData object.
	 * @return If the two BitmapData objects have the same dimensions(width and
	 *         height), the method returns a new BitmapData object that has the
	 *         difference between the two objects(see the main discussion). If
	 *         the BitmapData objects are equivalent, the method returns the
	 *         number 0. If the widths of the BitmapData objects are not equal,
	 *         the method returns the number -3. If the heights of the BitmapData
	 *         objects are not equal, the method returns the number -4.
	 * @throws TypeError The otherBitmapData is null.]]></haxe_doc>
		</copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Provides a fast routine to perform pixel manipulation between images with
	 * no stretching, rotation, or color effects. This method copies a
	 * rectangular area of a source image to a rectangular area of the same size
	 * at the destination point of the destination BitmapData object.
	 *
	 * <p>If you include the <code>alphaBitmap</code> and <code>alphaPoint</code>
	 * parameters, you can use a secondary image as an alpha source for the
	 * source image. If the source image has alpha data, both sets of alpha data
	 * are used to composite pixels from the source image to the destination
	 * image. The <code>alphaPoint</code> parameter is the point in the alpha
	 * image that corresponds to the upper-left corner of the source rectangle.
	 * Any pixels outside the intersection of the source image and alpha image
	 * are not copied to the destination image.</p>
	 *
	 * <p>The <code>mergeAlpha</code> property controls whether or not the alpha
	 * channel is used when a transparent image is copied onto another
	 * transparent image. To copy pixels with the alpha channel data, set the
	 * <code>mergeAlpha</code> property to <code>true</code>. By default, the
	 * <code>mergeAlpha</code> property is <code>false</code>.</p>
	 * 
	 * @param sourceBitmapData The input bitmap image from which to copy pixels.
	 *                         The source image can be a different BitmapData
	 *                         instance, or it can refer to the current
	 *                         BitmapData instance.
	 * @param sourceRect       A rectangle that defines the area of the source
	 *                         image to use as input.
	 * @param destPoint        The destination point that represents the
	 *                         upper-left corner of the rectangular area where
	 *                         the new pixels are placed.
	 * @param alphaBitmapData  A secondary, alpha BitmapData object source.
	 * @param alphaPoint       The point in the alpha BitmapData object source
	 *                         that corresponds to the upper-left corner of the
	 *                         <code>sourceRect</code> parameter.
	 * @param mergeAlpha       To use the alpha channel, set the value to
	 *                         <code>true</code>. To copy pixels with no alpha
	 *                         channel, set the value to <code>false</code>.
	 * @throws TypeError The sourceBitmapData, sourceRect, destPoint are null.]]></haxe_doc>
		</copyPixels>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Frees memory that is used to store the BitmapData object.
	 *
	 * <p>When the <code>dispose()</code> method is called on an image, the width
	 * and height of the image are set to 0. All subsequent calls to methods or
	 * properties of this BitmapData instance fail, and an exception is thrown.
	 * </p>
	 *
	 * <p><code>BitmapData.dispose()</code> releases the memory occupied by the
	 * actual bitmap data, immediately(a bitmap can consume up to 64 MB of
	 * memory). After using <code>BitmapData.dispose()</code>, the BitmapData
	 * object is no longer usable and an exception may be thrown if
	 * you call functions on the BitmapData object. However,
	 * <code>BitmapData.dispose()</code> does not garbage collect the BitmapData
	 * object(approximately 128 bytes); the memory occupied by the actual
	 * BitmapData object is released at the time the BitmapData object is
	 * collected by the garbage collector.</p>
	 *]]></haxe_doc>
		</dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws the <code>source</code> display object onto the bitmap image, using
	 * the NME software renderer. You can specify <code>matrix</code>,
	 * <code>colorTransform</code>, <code>blendMode</code>, and a destination
	 * <code>clipRect</code> parameter to control how the rendering performs.
	 * Optionally, you can specify whether the bitmap should be smoothed when
	 * scaled(this works only if the source object is a BitmapData object).
	 *
	 * <p>The source display object does not use any of its applied
	 * transformations for this call. It is treated as it exists in the library
	 * or file, with no matrix transform, no color transform, and no blend mode.
	 * To draw a display object(such as a movie clip) by using its own transform
	 * properties, you can copy its <code>transform</code> property object to the
	 * <code>transform</code> property of the Bitmap object that uses the
	 * BitmapData object.</p>
	 * 
	 * @param source         The display object or BitmapData object to draw to
	 *                       the BitmapData object.(The DisplayObject and
	 *                       BitmapData classes implement the IBitmapDrawable
	 *                       interface.)
	 * @param matrix         A Matrix object used to scale, rotate, or translate
	 *                       the coordinates of the bitmap. If you do not want to
	 *                       apply a matrix transformation to the image, set this
	 *                       parameter to an identity matrix, created with the
	 *                       default <code>new Matrix()</code> constructor, or
	 *                       pass a <code>null</code> value.
	 * @param colorTransform A ColorTransform object that you use to adjust the
	 *                       color values of the bitmap. If no object is
	 *                       supplied, the bitmap image's colors are not
	 *                       transformed. If you must pass this parameter but you
	 *                       do not want to transform the image, set this
	 *                       parameter to a ColorTransform object created with
	 *                       the default <code>new ColorTransform()</code>
	 *                       constructor.
	 * @param blendMode      A string value, from the flash.display.BlendMode
	 *                       class, specifying the blend mode to be applied to
	 *                       the resulting bitmap.
	 * @param clipRect       A Rectangle object that defines the area of the
	 *                       source object to draw. If you do not supply this
	 *                       value, no clipping occurs and the entire source
	 *                       object is drawn.
	 * @param smoothing      A Boolean value that determines whether a BitmapData
	 *                       object is smoothed when scaled or rotated, due to a
	 *                       scaling or rotation in the <code>matrix</code>
	 *                       parameter. The <code>smoothing</code> parameter only
	 *                       applies if the <code>source</code> parameter is a
	 *                       BitmapData object. With <code>smoothing</code> set
	 *                       to <code>false</code>, the rotated or scaled
	 *                       BitmapData image can appear pixelated or jagged. For
	 *                       example, the following two images use the same
	 *                       BitmapData object for the <code>source</code>
	 *                       parameter, but the <code>smoothing</code> parameter
	 *                       is set to <code>true</code> on the left and
	 *                       <code>false</code> on the right:
	 *
	 *                       <p>Drawing a bitmap with <code>smoothing</code> set
	 *                       to <code>true</code> takes longer than doing so with
	 *                       <code>smoothing</code> set to
	 *                       <code>false</code>.</p>
	 * @throws ArgumentError The <code>source</code> parameter is not a
	 *                       BitmapData or DisplayObject object.
	 * @throws ArgumentError The source is null or not a valid IBitmapDrawable
	 *                       object.
	 * @throws SecurityError The <code>source</code> object and(in the case of a
	 *                       Sprite or MovieClip object) all of its child objects
	 *                       do not come from the same domain as the caller, or
	 *                       are not in a content that is accessible to the
	 *                       caller by having called the
	 *                       <code>Security.allowDomain()</code> method. This
	 *                       restriction does not apply to AIR content in the
	 *                       application security sandbox.]]></haxe_doc>
		</draw>
		<fillRect public="1" set="method">
			<f a="rect:color">
				<c path="flash.geom.Rectangle"/>
				<t path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills a rectangular area of pixels with a specified ARGB color.
	 * 
	 * @param rect  The rectangular area to fill.
	 * @param color The ARGB color value that fills the area. ARGB colors are
	 *              often specified in hexadecimal format; for example,
	 *              0xFF336699.
	 * @throws TypeError The rect is null.</haxe_doc>
		</fillRect>
		<floodFill public="1" set="method">
			<f a="x:y:color">
				<x path="Int"/>
				<x path="Int"/>
				<t path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Performs a flood fill operation on an image starting at an(<i>x</i>,
	 * <i>y</i>) coordinate and filling with a certain color. The
	 * <code>floodFill()</code> method is similar to the paint bucket tool in
	 * various paint programs. The color is an ARGB color that contains alpha
	 * information and color information.
	 * 
	 * @param x     The <i>x</i> coordinate of the image.
	 * @param y     The <i>y</i> coordinate of the image.
	 * @param color The ARGB color to use as a fill.]]></haxe_doc>
		</floodFill>
		<generateFilterRect public="1" set="method">
			<f a="sourceRect:filter">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.filters.BitmapFilter"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Determines the destination rectangle that the <code>applyFilter()</code>
	 * method call affects, given a BitmapData object, a source rectangle, and a
	 * filter object.
	 *
	 * <p>For example, a blur filter normally affects an area larger than the
	 * size of the original image. A 100 x 200 pixel image that is being filtered
	 * by a default BlurFilter instance, where <code>blurX = blurY = 4</code>
	 * generates a destination rectangle of <code>(-2,-2,104,204)</code>. The
	 * <code>generateFilterRect()</code> method lets you find out the size of
	 * this destination rectangle in advance so that you can size the destination
	 * image appropriately before you perform a filter operation.</p>
	 *
	 * <p>Some filters clip their destination rectangle based on the source image
	 * size. For example, an inner <code>DropShadow</code> does not generate a
	 * larger result than its source image. In this API, the BitmapData object is
	 * used as the source bounds and not the source <code>rect</code>
	 * parameter.</p>
	 * 
	 * @param sourceRect A rectangle defining the area of the source image to use
	 *                   as input.
	 * @param filter     A filter object that you use to calculate the
	 *                   destination rectangle.
	 * @return A destination rectangle computed by using an image, the
	 *         <code>sourceRect</code> parameter, and a filter.
	 * @throws TypeError The sourceRect or filter are null.]]></haxe_doc>
		</generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor">
				<t path="UInt"/>
				<t path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Determines a rectangular region that either fully encloses all pixels of a
	 * specified color within the bitmap image(if the <code>findColor</code>
	 * parameter is set to <code>true</code>) or fully encloses all pixels that
	 * do not include the specified color(if the <code>findColor</code>
	 * parameter is set to <code>false</code>).
	 *
	 * <p>For example, if you have a source image and you want to determine the
	 * rectangle of the image that contains a nonzero alpha channel, pass
	 * <code>{mask: 0xFF000000, color: 0x00000000}</code> as parameters. If the
	 * <code>findColor</code> parameter is set to <code>true</code>, the entire
	 * image is searched for the bounds of pixels for which <code>(value & mask)
	 * == color</code>(where <code>value</code> is the color value of the
	 * pixel). If the <code>findColor</code> parameter is set to
	 * <code>false</code>, the entire image is searched for the bounds of pixels
	 * for which <code>(value & mask) != color</code>(where <code>value</code>
	 * is the color value of the pixel). To determine white space around an
	 * image, pass <code>{mask: 0xFFFFFFFF, color: 0xFFFFFFFF}</code> to find the
	 * bounds of nonwhite pixels.</p>
	 * 
	 * @param mask      A hexadecimal value, specifying the bits of the ARGB
	 *                  color to consider. The color value is combined with this
	 *                  hexadecimal value, by using the <code>&</code>(bitwise
	 *                  AND) operator.
	 * @param color     A hexadecimal value, specifying the ARGB color to match
	 *                 (if <code>findColor</code> is set to <code>true</code>)
	 *                  or <i>not</i> to match(if <code>findColor</code> is set
	 *                  to <code>false</code>).
	 * @param findColor If the value is set to <code>true</code>, returns the
	 *                  bounds of a color value in an image. If the value is set
	 *                  to <code>false</code>, returns the bounds of where this
	 *                  color doesn't exist in an image.
	 * @return The region of the image that is the specified color.]]></haxe_doc>
		</getColorBoundsRect>
		<getPixel public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<t path="UInt"/>
			</f>
			<haxe_doc><![CDATA[* Returns an integer that represents an RGB pixel value from a BitmapData
	 * object at a specific point(<i>x</i>, <i>y</i>). The
	 * <code>getPixel()</code> method returns an unmultiplied pixel value. No
	 * alpha information is returned.
	 *
	 * <p>All pixels in a BitmapData object are stored as premultiplied color
	 * values. A premultiplied image pixel has the red, green, and blue color
	 * channel values already multiplied by the alpha data. For example, if the
	 * alpha value is 0, the values for the RGB channels are also 0, independent
	 * of their unmultiplied values. This loss of data can cause some problems
	 * when you perform operations. All BitmapData methods take and return
	 * unmultiplied values. The internal pixel representation is converted from
	 * premultiplied to unmultiplied before it is returned as a value. During a
	 * set operation, the pixel value is premultiplied before the raw image pixel
	 * is set.</p>
	 * 
	 * @param x The <i>x</i> position of the pixel.
	 * @param y The <i>y</i> position of the pixel.
	 * @return A number that represents an RGB pixel value. If the(<i>x</i>,
	 *         <i>y</i>) coordinates are outside the bounds of the image, the
	 *         method returns 0.]]></haxe_doc>
		</getPixel>
		<getPixel32 public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<t path="UInt"/>
			</f>
			<haxe_doc><![CDATA[* Returns an ARGB color value that contains alpha channel data and RGB data.
	 * This method is similar to the <code>getPixel()</code> method, which
	 * returns an RGB color without alpha channel data.
	 *
	 * <p>All pixels in a BitmapData object are stored as premultiplied color
	 * values. A premultiplied image pixel has the red, green, and blue color
	 * channel values already multiplied by the alpha data. For example, if the
	 * alpha value is 0, the values for the RGB channels are also 0, independent
	 * of their unmultiplied values. This loss of data can cause some problems
	 * when you perform operations. All BitmapData methods take and return
	 * unmultiplied values. The internal pixel representation is converted from
	 * premultiplied to unmultiplied before it is returned as a value. During a
	 * set operation, the pixel value is premultiplied before the raw image pixel
	 * is set.</p>
	 * 
	 * @param x The <i>x</i> position of the pixel.
	 * @param y The <i>y</i> position of the pixel.
	 * @return A number representing an ARGB pixel value. If the(<i>x</i>,
	 *         <i>y</i>) coordinates are outside the bounds of the image, 0 is
	 *         returned.]]></haxe_doc>
		</getPixel32>
		<getPixels public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<haxe_doc>* Generates a byte array from a rectangular region of pixel data. Writes an
	 * unsigned integer(a 32-bit unmultiplied pixel value) for each pixel into
	 * the byte array.
	 * 
	 * @param rect A rectangular area in the current BitmapData object.
	 * @return A ByteArray representing the pixels in the given Rectangle.
	 * @throws TypeError The rect is null.</haxe_doc>
		</getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><t path="UInt"/></c>
			</f>
			<haxe_doc>* Generates a vector array from a rectangular region of pixel data. Returns
	 * a Vector object of unsigned integers(a 32-bit unmultiplied pixel value)
	 * for the specified rectangle.
	 * 
	 * @param rect A rectangular area in the current BitmapData object.
	 * @return A Vector representing the given Rectangle.
	 * @throws TypeError The rect is null.</haxe_doc>
		</getVector>
		<lock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Computes a 256-value binary number histogram of a BitmapData object. This
	 * method returns a Vector object containing four Vector.<Number> instances
	 * (four Vector objects that contain Number objects). The four Vector
	 * instances represent the red, green, blue and alpha components in order.
	 * Each Vector instance contains 256 values that represent the population
	 * count of an individual component value, from 0 to 255.
	 * 
	 * @param hRect The area of the BitmapData object to use.]]></haxe_doc>
		</lock>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale">
				<x path="Int"/>
				<t path="UInt"/>
				<t path="UInt"/>
				<t path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Performs per-channel blending from a source image to a destination image.
	 * For each channel and each pixel, a new value is computed based on the
	 * channel values of the source and destination pixels. For example, in the
	 * red channel, the new value is computed as follows(where
	 * <code>redSrc</code> is the red channel value for a pixel in the source
	 * image and <code>redDest</code> is the red channel value at the
	 * corresponding pixel of the destination image):
	 *
	 * <p> <code> new redDest = [(redSrc * redMultiplier) + (redDest * (256 -
	 * redMultiplier))] / 256; </code> </p>
	 *
	 * <p>The <code>redMultiplier</code>, <code>greenMultiplier</code>,
	 * <code>blueMultiplier</code>, and <code>alphaMultiplier</code> values are
	 * the multipliers used for each color channel. Use a hexadecimal value
	 * ranging from <code>0</code> to <code>0x100</code>(256) where
	 * <code>0</code> specifies the full value from the destination is used in
	 * the result, <code>0x100</code> specifies the full value from the source is
	 * used, and numbers in between specify a blend is used(such as
	 * <code>0x80</code> for 50%).</p>
	 * 
	 * @param sourceBitmapData The input bitmap image to use. The source image
	 *                         can be a different BitmapData object, or it can
	 *                         refer to the current BitmapData object.
	 * @param sourceRect       A rectangle that defines the area of the source
	 *                         image to use as input.
	 * @param destPoint        The point within the destination image(the
	 *                         current BitmapData instance) that corresponds to
	 *                         the upper-left corner of the source rectangle.
	 * @param redMultiplier    A hexadecimal uint value by which to multiply the
	 *                         red channel value.
	 * @param greenMultiplier  A hexadecimal uint value by which to multiply the
	 *                         green channel value.
	 * @param blueMultiplier   A hexadecimal uint value by which to multiply the
	 *                         blue channel value.
	 * @param alphaMultiplier  A hexadecimal uint value by which to multiply the
	 *                         alpha transparency value.
	 * @throws TypeError The sourceBitmapData, sourceRect or destPoint are null.]]></haxe_doc>
		</noise>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
				<x path="Float"/>
				<x path="Float"/>
				<t path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<t path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Remaps the color channel values in an image that has up to four arrays of
	 * color palette data, one for each channel.
	 *
	 * <p>Flash runtimes use the following steps to generate the resulting
	 * image:</p>
	 *
	 * <ol>
	 *   <li>After the red, green, blue, and alpha values are computed, they are
	 * added together using standard 32-bit-integer arithmetic. </li>
	 *   <li>The red, green, blue, and alpha channel values of each pixel are
	 * extracted into separate 0 to 255 values. These values are used to look up
	 * new color values in the appropriate array: <code>redArray</code>,
	 * <code>greenArray</code>, <code>blueArray</code>, and
	 * <code>alphaArray</code>. Each of these four arrays should contain 256
	 * values. </li>
	 *   <li>After all four of the new channel values are retrieved, they are
	 * combined into a standard ARGB value that is applied to the pixel.</li>
	 * </ol>
	 *
	 * <p>Cross-channel effects can be supported with this method. Each input
	 * array can contain full 32-bit values, and no shifting occurs when the
	 * values are added together. This routine does not support per-channel
	 * clamping. </p>
	 *
	 * <p>If no array is specified for a channel, the color channel is copied
	 * from the source image to the destination image.</p>
	 *
	 * <p>You can use this method for a variety of effects such as general
	 * palette mapping(taking one channel and converting it to a false color
	 * image). You can also use this method for a variety of advanced color
	 * manipulation algorithms, such as gamma, curves, levels, and
	 * quantizing.</p>
	 * 
	 * @param sourceBitmapData The input bitmap image to use. The source image
	 *                         can be a different BitmapData object, or it can
	 *                         refer to the current BitmapData instance.
	 * @param sourceRect       A rectangle that defines the area of the source
	 *                         image to use as input.
	 * @param destPoint        The point within the destination image(the
	 *                         current BitmapData object) that corresponds to the
	 *                         upper-left corner of the source rectangle.
	 * @throws TypeError The sourceBitmapData, sourceRect or destPoint are null.]]></haxe_doc>
		</perlinNoise>
		<scroll public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Performs a pixel dissolve either from a source image to a destination
	 * image or by using the same image. Flash runtimes use a
	 * <code>randomSeed</code> value to generate a random pixel dissolve. The
	 * return value of the function must be passed in on subsequent calls to
	 * continue the pixel dissolve until it is finished.
	 *
	 * <p>If the source image does not equal the destination image, pixels are
	 * copied from the source to the destination by using all of the properties.
	 * This process allows dissolving from a blank image into a fully populated
	 * image.</p>
	 *
	 * <p>If the source and destination images are equal, pixels are filled with
	 * the <code>color</code> parameter. This process allows dissolving away from
	 * a fully populated image. In this mode, the destination <code>point</code>
	 * parameter is ignored.</p>
	 * 
	 * @param sourceBitmapData The input bitmap image to use. The source image
	 *                         can be a different BitmapData object, or it can
	 *                         refer to the current BitmapData instance.
	 * @param sourceRect       A rectangle that defines the area of the source
	 *                         image to use as input.
	 * @param destPoint        The point within the destination image(the
	 *                         current BitmapData instance) that corresponds to
	 *                         the upper-left corner of the source rectangle.
	 * @param randomSeed       The random seed to use to start the pixel
	 *                         dissolve.
	 * @param numPixels        The default is 1/30 of the source area(width x
	 *                         height).
	 * @param fillColor        An ARGB color value that you use to fill pixels
	 *                         whose source value equals its destination value.
	 * @return The new random seed value to use for subsequent calls.
	 * @throws TypeError The sourceBitmapData, sourceRect or destPoint are null.
	 * @throws TypeError The numPixels value is negative]]></haxe_doc>
		</scroll>
		<setPixel public="1" set="method">
			<f a="x:y:color">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets a single pixel of a BitmapData object. The current alpha channel
	 * value of the image pixel is preserved during this operation. The value of
	 * the RGB color parameter is treated as an unmultiplied color value.
	 *
	 * <p><b>Note:</b> To increase performance, when you use the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method repeatedly,
	 * call the <code>lock()</code> method before you call the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method, and then call
	 * the <code>unlock()</code> method when you have made all pixel changes.
	 * This process prevents objects that reference this BitmapData instance from
	 * updating until you finish making the pixel changes.</p>
	 * 
	 * @param x     The <i>x</i> position of the pixel whose value changes.
	 * @param y     The <i>y</i> position of the pixel whose value changes.
	 * @param color The resulting RGB color for the pixel.]]></haxe_doc>
		</setPixel>
		<setPixel32 public="1" set="method">
			<f a="x:y:color">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets the color and alpha transparency values of a single pixel of a
	 * BitmapData object. This method is similar to the <code>setPixel()</code>
	 * method; the main difference is that the <code>setPixel32()</code> method
	 * takes an ARGB color value that contains alpha channel information.
	 *
	 * <p>All pixels in a BitmapData object are stored as premultiplied color
	 * values. A premultiplied image pixel has the red, green, and blue color
	 * channel values already multiplied by the alpha data. For example, if the
	 * alpha value is 0, the values for the RGB channels are also 0, independent
	 * of their unmultiplied values. This loss of data can cause some problems
	 * when you perform operations. All BitmapData methods take and return
	 * unmultiplied values. The internal pixel representation is converted from
	 * premultiplied to unmultiplied before it is returned as a value. During a
	 * set operation, the pixel value is premultiplied before the raw image pixel
	 * is set.</p>
	 *
	 * <p><b>Note:</b> To increase performance, when you use the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method repeatedly,
	 * call the <code>lock()</code> method before you call the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method, and then call
	 * the <code>unlock()</code> method when you have made all pixel changes.
	 * This process prevents objects that reference this BitmapData instance from
	 * updating until you finish making the pixel changes.</p>
	 * 
	 * @param x     The <i>x</i> position of the pixel whose value changes.
	 * @param y     The <i>y</i> position of the pixel whose value changes.
	 * @param color The resulting ARGB color for the pixel. If the bitmap is
	 *              opaque(not transparent), the alpha transparency portion of
	 *              this color value is ignored.]]></haxe_doc>
		</setPixel32>
		<setPixels public="1" set="method">
			<f a="rect:inputByteArray">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Converts a byte array into a rectangular region of pixel data. For each
	 * pixel, the <code>ByteArray.readUnsignedInt()</code> method is called and
	 * the return value is written into the pixel. If the byte array ends before
	 * the full rectangle is written, the function returns. The data in the byte
	 * array is expected to be 32-bit ARGB pixel values. No seeking is performed
	 * on the byte array before or after the pixels are read.
	 * 
	 * @param rect           Specifies the rectangular region of the BitmapData
	 *                       object.
	 * @param inputByteArray A ByteArray object that consists of 32-bit
	 *                       unmultiplied pixel values to be used in the
	 *                       rectangular region.
	 * @throws EOFError  The <code>inputByteArray</code> object does not include
	 *                   enough data to fill the area of the <code>rect</code>
	 *                   rectangle. The method fills as many pixels as possible
	 *                   before throwing the exception.
	 * @throws TypeError The rect or inputByteArray are null.]]></haxe_doc>
		</setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><t path="UInt"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Converts a Vector into a rectangular region of pixel data. For each pixel,
	 * a Vector element is read and written into the BitmapData pixel. The data
	 * in the Vector is expected to be 32-bit ARGB pixel values.
	 * 
	 * @param rect Specifies the rectangular region of the BitmapData object.
	 * @throws RangeError The vector array is not large enough to read all the
	 *                    pixel data.</haxe_doc>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="Int"/>
				<t path="UInt"/>
				<t path="UInt"/>
				<x path="Bool"/>
				<t path="UInt"/>
			</f>
			<haxe_doc><![CDATA[* Tests pixel values in an image against a specified threshold and sets
	 * pixels that pass the test to new color values. Using the
	 * <code>threshold()</code> method, you can isolate and replace color ranges
	 * in an image and perform other logical operations on image pixels.
	 *
	 * <p>The <code>threshold()</code> method's test logic is as follows:</p>
	 *
	 * <ol>
	 *   <li>If <code>((pixelValue & mask) operation(threshold & mask))</code>,
	 * then set the pixel to <code>color</code>;</li>
	 *   <li>Otherwise, if <code>copySource == true</code>, then set the pixel to
	 * corresponding pixel value from <code>sourceBitmap</code>.</li>
	 * </ol>
	 *
	 * <p>The <code>operation</code> parameter specifies the comparison operator
	 * to use for the threshold test. For example, by using "==" as the
	 * <code>operation</code> parameter, you can isolate a specific color value
	 * in an image. Or by using <code>{operation: "<", mask: 0xFF000000,
	 * threshold: 0x7F000000, color: 0x00000000}</code>, you can set all
	 * destination pixels to be fully transparent when the source image pixel's
	 * alpha is less than 0x7F. You can use this technique for animated
	 * transitions and other effects.</p>
	 * 
	 * @param sourceBitmapData The input bitmap image to use. The source image
	 *                         can be a different BitmapData object or it can
	 *                         refer to the current BitmapData instance.
	 * @param sourceRect       A rectangle that defines the area of the source
	 *                         image to use as input.
	 * @param destPoint        The point within the destination image(the
	 *                         current BitmapData instance) that corresponds to
	 *                         the upper-left corner of the source rectangle.
	 * @param operation        One of the following comparison operators, passed
	 *                         as a String: "<", "<=", ">", ">=", "==", "!="
	 * @param threshold        The value that each pixel is tested against to see
	 *                         if it meets or exceeds the threshhold.
	 * @param color            The color value that a pixel is set to if the
	 *                         threshold test succeeds. The default value is
	 *                         0x00000000.
	 * @param mask             The mask to use to isolate a color component.
	 * @param copySource       If the value is <code>true</code>, pixel values
	 *                         from the source image are copied to the
	 *                         destination when the threshold test fails. If the
	 *                         value is <code>false</code>, the source image is
	 *                         not copied when the threshold test fails.
	 * @return The number of pixels that were changed.
	 * @throws ArgumentError The operation string is not a valid operation
	 * @throws TypeError     The sourceBitmapData, sourceRect destPoint or
	 *                       operation are null.]]></haxe_doc>
		</threshold>
		<unlock public="1" set="method">
			<f a="?changeRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Unlocks an image so that any objects that reference the BitmapData object,
	 * such as Bitmap objects, are updated when this BitmapData object changes.
	 * To improve performance, use this method along with the <code>lock()</code>
	 * method before and after numerous calls to the <code>setPixel()</code> or
	 * <code>setPixel32()</code> method.
	 * 
	 * @param changeRect The area of the BitmapData object that has changed. If
	 *                   you do not specify a value for this parameter, the
	 *                   entire area of the BitmapData object is considered
	 *                   changed.]]></haxe_doc>
		</unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a BitmapData object with a specified width and height. If you specify a value for 
	 * the <code>fillColor</code> parameter, every pixel in the bitmap is set to that color. 
	 * 
	 * By default, the bitmap is created as transparent, unless you pass the value <code>false</code>
	 * for the transparent parameter. After you create an opaque bitmap, you cannot change it 
	 * to a transparent bitmap. Every pixel in an opaque bitmap uses only 24 bits of color channel 
	 * information. If you define the bitmap as transparent, every pixel uses 32 bits of color 
	 * channel information, including an alpha transparency channel.
	 * 
	 * @param	width		The width of the bitmap image in pixels. 
	 * @param	height		The height of the bitmap image in pixels. 
	 * @param	transparent		Specifies whether the bitmap image supports per-pixel transparency. The default value is <code>true</code>(transparent). To create a fully transparent bitmap, set the value of the <code>transparent</code> parameter to <code>true</code> and the value of the <code>fillColor</code> parameter to 0x00000000(or to 0). Setting the <code>transparent</code> property to <code>false</code> can result in minor improvements in rendering performance.
	 * @param	fillColor		A 32-bit ARGB color value that you use to fill the bitmap image area. The default value is 0xFFFFFFFF(solid white).]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The BitmapData class lets you work with the data(pixels) of a Bitmap
 * object. You can use the methods of the BitmapData class to create
 * arbitrarily sized transparent or opaque bitmap images and manipulate them
 * in various ways at runtime. You can also access the BitmapData for a bitmap
 * image that you load with the <code>flash.Assets</code> or 
 * <code>flash.display.Loader</code> classes.
 *
 * <p>This class lets you separate bitmap rendering operations from the
 * internal display updating routines of flash. By manipulating a
 * BitmapData object directly, you can create complex images without incurring
 * the per-frame overhead of constantly redrawing the content from vector
 * data.</p>
 *
 * <p>The methods of the BitmapData class support effects that are not
 * available through the filters available to non-bitmap display objects.</p>
 *
 * <p>A BitmapData object contains an array of pixel data. This data can
 * represent either a fully opaque bitmap or a transparent bitmap that
 * contains alpha channel data. Either type of BitmapData object is stored as
 * a buffer of 32-bit integers. Each 32-bit integer determines the properties
 * of a single pixel in the bitmap.</p>
 *
 * <p>Each 32-bit integer is a combination of four 8-bit channel values(from
 * 0 to 255) that describe the alpha transparency and the red, green, and blue
 * (ARGB) values of the pixel.(For ARGB values, the most significant byte
 * represents the alpha channel value, followed by red, green, and blue.)</p>
 *
 * <p>The four channels(alpha, red, green, and blue) are represented as
 * numbers when you use them with the <code>BitmapData.copyChannel()</code>
 * method or the <code>DisplacementMapFilter.componentX</code> and
 * <code>DisplacementMapFilter.componentY</code> properties, and these numbers
 * are represented by the following constants in the BitmapDataChannel
 * class:</p>
 *
 * <ul>
 *   <li><code>BitmapDataChannel.ALPHA</code></li>
 *   <li><code>BitmapDataChannel.RED</code></li>
 *   <li><code>BitmapDataChannel.GREEN</code></li>
 *   <li><code>BitmapDataChannel.BLUE</code></li>
 * </ul>
 *
 * <p>You can attach BitmapData objects to a Bitmap object by using the
 * <code>bitmapData</code> property of the Bitmap object.</p>
 *
 * <p>You can use a BitmapData object to fill a Graphics object by using the
 * <code>Graphics.beginBitmapFill()</code> method.</p>
 * 
 * <p>You can also use a BitmapData object to perform batch tile rendering
 * using the <code>flash.display.Tilesheet</code> class.</p>
 *
 * <p>In Flash Player 10, the maximum size for a BitmapData object
 * is 8,191 pixels in width or height, and the total number of pixels cannot
 * exceed 16,777,215 pixels.(So, if a BitmapData object is 8,191 pixels wide,
 * it can only be 2,048 pixels high.) In Flash Player 9 and earlier, the limitation 
 * is 2,880 pixels in height and 2,880 in width.</p>]]></haxe_doc>
	</class>
	<enum path="flash.display.BlendMode" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/BlendMode.hx">
		<ADD><haxe_doc><![CDATA[* Adds the values of the constituent colors of the display object to the
	 * colors of its background, applying a ceiling of 0xFF. This setting is
	 * commonly used for animating a lightening dissolve between two objects.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xAAA633, and the background pixel has an RGB value of 0xDD2200, the
	 * resulting RGB value for the displayed pixel is 0xFFC833(because 0xAA +
	 * 0xDD > 0xFF, 0xA6 + 0x22 = 0xC8, and 0x33 + 0x00 = 0x33).</p>]]></haxe_doc></ADD>
		<ALPHA><haxe_doc><![CDATA[* Applies the alpha value of each pixel of the display object to the
	 * background. This requires the <code>blendMode</code> property of the
	 * parent display object be set to
	 * <code>flash.display.BlendMode.LAYER</code>.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></ALPHA>
		<DARKEN><haxe_doc><![CDATA[* Selects the darker of the constituent colors of the display object and the
	 * colors of the background(the colors with the smaller values). This
	 * setting is commonly used for superimposing type.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	 * resulting RGB value for the displayed pixel is 0xDDCC00(because 0xFF >
	 * 0xDD, 0xCC < 0xF8, and 0x33 > 0x00 = 33).</p>
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></DARKEN>
		<DIFFERENCE><haxe_doc><![CDATA[* Compares the constituent colors of the display object with the colors of
	 * its background, and subtracts the darker of the values of the two
	 * constituent colors from the lighter value. This setting is commonly used
	 * for more vibrant colors.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	 * resulting RGB value for the displayed pixel is 0x222C33(because 0xFF -
	 * 0xDD = 0x22, 0xF8 - 0xCC = 0x2C, and 0x33 - 0x00 = 0x33).</p>]]></haxe_doc></DIFFERENCE>
		<ERASE><haxe_doc><![CDATA[* Erases the background based on the alpha value of the display object. This
	 * process requires that the <code>blendMode</code> property of the parent
	 * display object be set to <code>flash.display.BlendMode.LAYER</code>.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></ERASE>
		<HARDLIGHT><haxe_doc><![CDATA[* Adjusts the color of each pixel based on the darkness of the display
	 * object. If the display object is lighter than 50% gray, the display object
	 * and background colors are screened, which results in a lighter color. If
	 * the display object is darker than 50% gray, the colors are multiplied,
	 * which results in a darker color. This setting is commonly used for shading
	 * effects.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></HARDLIGHT>
		<INVERT><haxe_doc>* Inverts the background.</haxe_doc></INVERT>
		<LAYER><haxe_doc><![CDATA[* Forces the creation of a transparency group for the display object. This
	 * means that the display object is precomposed in a temporary buffer before
	 * it is processed further. The precomposition is done automatically if the
	 * display object is precached by means of bitmap caching or if the display
	 * object is a display object container that has at least one child object
	 * with a <code>blendMode</code> setting other than <code>"normal"</code>.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></LAYER>
		<LIGHTEN><haxe_doc><![CDATA[* Selects the lighter of the constituent colors of the display object and
	 * the colors of the background(the colors with the larger values). This
	 * setting is commonly used for superimposing type.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	 * resulting RGB value for the displayed pixel is 0xFFF833(because 0xFF >
	 * 0xDD, 0xCC < 0xF8, and 0x33 > 0x00 = 33).</p>
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></LIGHTEN>
		<MULTIPLY><haxe_doc><![CDATA[* Multiplies the values of the display object constituent colors by the
	 * constituent colors of the background color, and normalizes by dividing by
	 * 0xFF, resulting in darker colors. This setting is commonly used for
	 * shadows and depth effects.
	 *
	 * <p>For example, if a constituent color(such as red) of one pixel in the
	 * display object and the corresponding color of the pixel in the background
	 * both have the value 0x88, the multiplied result is 0x4840. Dividing by
	 * 0xFF yields a value of 0x48 for that constituent color, which is a darker
	 * shade than the color of the display object or the color of the
	 * background.</p>]]></haxe_doc></MULTIPLY>
		<NORMAL><haxe_doc>* The display object appears in front of the background. Pixel values of the
	 * display object override the pixel values of the background. Where the
	 * display object is transparent, the background is visible.</haxe_doc></NORMAL>
		<OVERLAY><haxe_doc><![CDATA[* Adjusts the color of each pixel based on the darkness of the background.
	 * If the background is lighter than 50% gray, the display object and
	 * background colors are screened, which results in a lighter color. If the
	 * background is darker than 50% gray, the colors are multiplied, which
	 * results in a darker color. This setting is commonly used for shading
	 * effects.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></OVERLAY>
		<SCREEN><haxe_doc>* Multiplies the complement(inverse) of the display object color by the
	 * complement of the background color, resulting in a bleaching effect. This
	 * setting is commonly used for highlights or to remove black areas of the
	 * display object.</haxe_doc></SCREEN>
		<SHADER><haxe_doc><![CDATA[* Uses a shader to define the blend between objects.
	 *
	 * <p>Setting the <code>blendShader</code> property to a Shader instance
	 * automatically sets the display object's <code>blendMode</code> property to
	 * <code>BlendMode.SHADER</code>. If the <code>blendMode</code> property is
	 * set to <code>BlendMode.SHADER</code> without first setting the
	 * <code>blendShader</code> property, the <code>blendMode</code> property is
	 * set to <code>BlendMode.NORMAL</code> instead. If the
	 * <code>blendShader</code> property is set(which sets the
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>), then
	 * later the value of the <code>blendMode</code> property is changed, the
	 * blend mode can be reset to use the blend shader simply by setting the
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>. The
	 * <code>blendShader</code> property does not need to be set again except to
	 * change the shader that's used to define the blend mode.</p>
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></SHADER>
		<SUBTRACT><haxe_doc><![CDATA[* Subtracts the values of the constituent colors in the display object from
	 * the values of the background color, applying a floor of 0. This setting is
	 * commonly used for animating a darkening dissolve between two objects.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xAA2233, and the background pixel has an RGB value of 0xDDA600, the
	 * resulting RGB value for the displayed pixel is 0x338400(because 0xDD -
	 * 0xAA = 0x33, 0xA6 - 0x22 = 0x84, and 0x00 - 0x33 < 0x00).</p>]]></haxe_doc></SUBTRACT>
		<haxe_doc><![CDATA[* A class that provides constant values for visual blend mode effects. These
 * constants are used in the following:
 * <ul>
 *   <li> The <code>blendMode</code> property of the
 * flash.display.DisplayObject class.</li>
 *   <li> The <code>blendMode</code> parameter of the <code>draw()</code>
 * method of the flash.display.BitmapData class</li>
 * </ul>]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/CapsStyle.hx">
		<ROUND><haxe_doc><![CDATA[* Used to specify round caps in the <code>caps</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method.]]></haxe_doc></ROUND>
		<NONE><haxe_doc><![CDATA[* Used to specify no caps in the <code>caps</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method.]]></haxe_doc></NONE>
		<SQUARE><haxe_doc><![CDATA[* Used to specify square caps in the <code>caps</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method.]]></haxe_doc></SQUARE>
		<haxe_doc><![CDATA[* The CapsStyle class is an enumeration of constant values that specify the
 * caps style to use in drawing lines. The constants are provided for use as
 * values in the <code>caps</code> parameter of the
 * <code>flash.display.Graphics.lineStyle()</code> method. You can specify the
 * following three types of caps:]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.GradientType" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/GradientType.hx">
		<LINEAR><haxe_doc>* Value used to specify a linear gradient fill.</haxe_doc></LINEAR>
		<RADIAL><haxe_doc>* Value used to specify a radial gradient fill.</haxe_doc></RADIAL>
		<haxe_doc><![CDATA[* The GradientType class provides values for the <code>type</code> parameter
 * in the <code>beginGradientFill()</code> and
 * <code>lineGradientStyle()</code> methods of the flash.display.Graphics
 * class.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Fills a drawing area with a bitmap image. The bitmap can be repeated or
	 * tiled to fill the area. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called. </p>
	 * 
	 * @param bitmap A transparent or opaque bitmap image that contains the bits
	 *               to be displayed.
	 * @param matrix A matrix object(of the flash.geom.Matrix class), which you
	 *               can use to define transformations on the bitmap. For
	 *               example, you can use the following matrix to rotate a bitmap
	 *               by 45 degrees(pi/4 radians):
	 * @param repeat If <code>true</code>, the bitmap image repeats in a tiled
	 *               pattern. If <code>false</code>, the bitmap image does not
	 *               repeat, and the edges of the bitmap are used for any fill
	 *               area that extends beyond the bitmap.
	 *
	 *               <p>For example, consider the following bitmap(a 20 x
	 *               20-pixel checkerboard pattern):</p>
	 *
	 *               <p>When <code>repeat</code> is set to <code>true</code>(as
	 *               in the following example), the bitmap fill repeats the
	 *               bitmap:</p>
	 *
	 *               <p>When <code>repeat</code> is set to <code>false</code>,
	 *               the bitmap fill uses the edge pixels for the fill area
	 *               outside the bitmap:</p>
	 * @param smooth If <code>false</code>, upscaled bitmap images are rendered
	 *               by using a nearest-neighbor algorithm and look pixelated. If
	 *               <code>true</code>, upscaled bitmap images are rendered by
	 *               using a bilinear algorithm. Rendering by using the nearest
	 *               neighbor algorithm is faster.]]></haxe_doc>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a simple one-color fill that subsequent calls to other Graphics
	 * methods(such as <code>lineTo()</code> or <code>drawCircle()</code>) use
	 * when drawing. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called.</p>
	 * 
	 * @param color The color of the fill(0xRRGGBB).
	 * @param alpha The alpha value of the fill(0.0 to 1.0).]]></haxe_doc>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a gradient fill used by subsequent calls to other Graphics
	 * methods(such as <code>lineTo()</code> or <code>drawCircle()</code>) for
	 * the object. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called. </p>
	 * 
	 * @param type                A value from the GradientType class that
	 *                            specifies which gradient type to use:
	 *                            <code>GradientType.LINEAR</code> or
	 *                            <code>GradientType.RADIAL</code>.
	 * @param matrix              A transformation matrix as defined by the
	 *                            flash.geom.Matrix class. The flash.geom.Matrix
	 *                            class includes a
	 *                            <code>createGradientBox()</code> method, which
	 *                            lets you conveniently set up the matrix for use
	 *                            with the <code>beginGradientFill()</code>
	 *                            method.
	 * @param spreadMethod        A value from the SpreadMethod class that
	 *                            specifies which spread method to use, either:
	 *                            <code>SpreadMethod.PAD</code>,
	 *                            <code>SpreadMethod.REFLECT</code>, or
	 *                            <code>SpreadMethod.REPEAT</code>.
	 *
	 *                            <p>For example, consider a simple linear
	 *                            gradient between two colors:</p>
	 *
	 *                            <p>This example uses
	 *                            <code>SpreadMethod.PAD</code> for the spread
	 *                            method, and the gradient fill looks like the
	 *                            following:</p>
	 *
	 *                            <p>If you use <code>SpreadMethod.REFLECT</code>
	 *                            for the spread method, the gradient fill looks
	 *                            like the following:</p>
	 *
	 *                            <p>If you use <code>SpreadMethod.REPEAT</code>
	 *                            for the spread method, the gradient fill looks
	 *                            like the following:</p>
	 * @param interpolationMethod A value from the InterpolationMethod class that
	 *                            specifies which value to use:
	 *                            <code>InterpolationMethod.LINEAR_RGB</code> or
	 *                            <code>InterpolationMethod.RGB</code>
	 *
	 *                            <p>For example, consider a simple linear
	 *                            gradient between two colors(with the
	 *                            <code>spreadMethod</code> parameter set to
	 *                            <code>SpreadMethod.REFLECT</code>). The
	 *                            different interpolation methods affect the
	 *                            appearance as follows: </p>
	 * @param focalPointRatio     A number that controls the location of the
	 *                            focal point of the gradient. 0 means that the
	 *                            focal point is in the center. 1 means that the
	 *                            focal point is at one border of the gradient
	 *                            circle. -1 means that the focal point is at the
	 *                            other border of the gradient circle. A value
	 *                            less than -1 or greater than 1 is rounded to -1
	 *                            or 1. For example, the following example shows
	 *                            a <code>focalPointRatio</code> set to 0.75:
	 * @throws ArgumentError If the <code>type</code> parameter is not valid.]]></haxe_doc>
		</beginGradientFill>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Specifies a shader fill used by subsequent calls to other Graphics methods
	 * (such as <code>lineTo()</code> or <code>drawCircle()</code>) for the
	 * object. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called.</p>
	 *
	 * <p>Shader fills are not supported under GPU rendering; filled areas will
	 * be colored cyan.</p>
	 * 
	 * @param shader The shader to use for the fill. This Shader instance is not
	 *               required to specify an image input. However, if an image
	 *               input is specified in the shader, the input must be provided
	 *               manually. To specify the input, set the <code>input</code>
	 *               property of the corresponding ShaderInput property of the
	 *               <code>Shader.data</code> property.
	 *
	 *               <p>When you pass a Shader instance as an argument the shader
	 *               is copied internally. The drawing fill operation uses that
	 *               internal copy, not a reference to the original shader. Any
	 *               changes made to the shader, such as changing a parameter
	 *               value, input, or bytecode, are not applied to the copied
	 *               shader that's used for the fill.</p>
	 * @param matrix A matrix object(of the flash.geom.Matrix class), which you
	 *               can use to define transformations on the shader. For
	 *               example, you can use the following matrix to rotate a shader
	 *               by 45 degrees(pi/4 radians):
	 *
	 *               <p>The coordinates received in the shader are based on the
	 *               matrix that is specified for the <code>matrix</code>
	 *               parameter. For a default(<code>null</code>) matrix, the
	 *               coordinates in the shader are local pixel coordinates which
	 *               can be used to sample an input.</p>
	 * @throws ArgumentError When the shader output type is not compatible with
	 *                       this operation(the shader must specify a
	 *                       <code>pixel3</code> or <code>pixel4</code> output).
	 * @throws ArgumentError When the shader specifies an image input that isn't
	 *                       provided.
	 * @throws ArgumentError When a ByteArray or Vector.<Number> instance is used
	 *                       as an input and the <code>width</code> and
	 *                       <code>height</code> properties aren't specified for
	 *                       the ShaderInput, or the specified values don't match
	 *                       the amount of data in the input object. See the
	 *                       <code>ShaderInput.input</code> property for more
	 *                       information.]]></haxe_doc>
		</clear>
		<curveTo public="1" set="method">
			<f a="controlX:controlY:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Copies all of drawing commands from the source Graphics object into the
	 * calling Graphics object.
	 * 
	 * @param sourceGraphics The Graphics object from which to copy the drawing
	 *                       commands.</haxe_doc>
		</curveTo>
		<drawCircle public="1" set="method">
			<f a="x:y:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a circle. Set the line style, fill, or both before you call the
	 * <code>drawCircle()</code> method, by calling the <code>linestyle()</code>,
	 * <code>lineGradientStyle()</code>, <code>beginFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	 * method.
	 * 
	 * @param x      The <i>x</i> location of the center of the circle relative
	 *               to the registration point of the parent display object(in
	 *               pixels).
	 * @param y      The <i>y</i> location of the center of the circle relative
	 *               to the registration point of the parent display object(in
	 *               pixels).
	 * @param radius The radius of the circle(in pixels).]]></haxe_doc>
		</drawCircle>
		<drawEllipse public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws an ellipse. Set the line style, fill, or both before you call the
	 * <code>drawEllipse()</code> method, by calling the
	 * <code>linestyle()</code>, <code>lineGradientStyle()</code>,
	 * <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	 * <code>beginBitmapFill()</code> method.
	 * 
	 * @param x      The <i>x</i> location of the top-left of the bounding-box of
	 *               the ellipse relative to the registration point of the parent
	 *               display object(in pixels).
	 * @param y      The <i>y</i> location of the top left of the bounding-box of
	 *               the ellipse relative to the registration point of the parent
	 *               display object(in pixels).
	 * @param width  The width of the ellipse(in pixels).
	 * @param height The height of the ellipse(in pixels).]]></haxe_doc>
		</drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Submits a series of IGraphicsData instances for drawing. This method
	 * accepts a Vector containing objects including paths, fills, and strokes
	 * that implement the IGraphicsData interface. A Vector of IGraphicsData
	 * instances can refer to a part of a shape, or a complex fully defined set
	 * of data for rendering a complete shape.
	 *
	 * <p> Graphics paths can contain other graphics paths. If the
	 * <code>graphicsData</code> Vector includes a path, that path and all its
	 * sub-paths are rendered during this operation. </p>
	 *]]></haxe_doc>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Submits a series of commands for drawing. The <code>drawPath()</code>
	 * method uses vector arrays to consolidate individual <code>moveTo()</code>,
	 * <code>lineTo()</code>, and <code>curveTo()</code> drawing commands into a
	 * single call. The <code>drawPath()</code> method parameters combine drawing
	 * commands with x- and y-coordinate value pairs and a drawing direction. The
	 * drawing commands are values from the GraphicsPathCommand class. The x- and
	 * y-coordinate value pairs are Numbers in an array where each pair defines a
	 * coordinate location. The drawing direction is a value from the
	 * GraphicsPathWinding class.
	 *
	 * <p> Generally, drawings render faster with <code>drawPath()</code> than
	 * with a series of individual <code>lineTo()</code> and
	 * <code>curveTo()</code> methods. </p>
	 *
	 * <p> The <code>drawPath()</code> method uses a uses a floating computation
	 * so rotation and scaling of shapes is more accurate and gives better
	 * results. However, curves submitted using the <code>drawPath()</code>
	 * method can have small sub-pixel alignment errors when used in conjunction
	 * with the <code>lineTo()</code> and <code>curveTo()</code> methods. </p>
	 *
	 * <p> The <code>drawPath()</code> method also uses slightly different rules
	 * for filling and drawing lines. They are: </p>
	 *
	 * <ul>
	 *   <li>When a fill is applied to rendering a path:
	 * <ul>
	 *   <li>A sub-path of less than 3 points is not rendered.(But note that the
	 * stroke rendering will still occur, consistent with the rules for strokes
	 * below.)</li>
	 *   <li>A sub-path that isn't closed(the end point is not equal to the
	 * begin point) is implicitly closed.</li>
	 * </ul>
	 * </li>
	 *   <li>When a stroke is applied to rendering a path:
	 * <ul>
	 *   <li>The sub-paths can be composed of any number of points.</li>
	 *   <li>The sub-path is never implicitly closed.</li>
	 * </ul>
	 * </li>
	 * </ul>
	 * 
	 * @param winding Specifies the winding rule using a value defined in the
	 *                GraphicsPathWinding class.]]></haxe_doc>
		</drawPath>
		<drawRect public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a rectangle. Set the line style, fill, or both before you call the
	 * <code>drawRect()</code> method, by calling the <code>linestyle()</code>,
	 * <code>lineGradientStyle()</code>, <code>beginFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	 * method.
	 * 
	 * @param x      A number indicating the horizontal position relative to the
	 *               registration point of the parent display object(in pixels).
	 * @param y      A number indicating the vertical position relative to the
	 *               registration point of the parent display object(in pixels).
	 * @param width  The width of the rectangle(in pixels).
	 * @param height The height of the rectangle(in pixels).
	 * @throws ArgumentError If the <code>width</code> or <code>height</code>
	 *                       parameters are not a number
	 *                      (<code>Number.NaN</code>).]]></haxe_doc>
		</drawRect>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a rounded rectangle. Set the line style, fill, or both before you
	 * call the <code>drawRoundRect()</code> method, by calling the
	 * <code>linestyle()</code>, <code>lineGradientStyle()</code>,
	 * <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	 * <code>beginBitmapFill()</code> method.
	 * 
	 * @param x             A number indicating the horizontal position relative
	 *                      to the registration point of the parent display
	 *                      object(in pixels).
	 * @param y             A number indicating the vertical position relative to
	 *                      the registration point of the parent display object
	 *                     (in pixels).
	 * @param width         The width of the round rectangle(in pixels).
	 * @param height        The height of the round rectangle(in pixels).
	 * @param ellipseWidth  The width of the ellipse used to draw the rounded
	 *                      corners(in pixels).
	 * @param ellipseHeight The height of the ellipse used to draw the rounded
	 *                      corners(in pixels). Optional; if no value is
	 *                      specified, the default value matches that provided
	 *                      for the <code>ellipseWidth</code> parameter.
	 * @throws ArgumentError If the <code>width</code>, <code>height</code>,
	 *                       <code>ellipseWidth</code> or
	 *                       <code>ellipseHeight</code> parameters are not a
	 *                       number(<code>Number.NaN</code>).]]></haxe_doc>
		</drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Renders a set of triangles, typically to distort bitmaps and give them a
	 * three-dimensional appearance. The <code>drawTriangles()</code> method maps
	 * either the current fill, or a bitmap fill, to the triangle faces using a
	 * set of(u,v) coordinates.
	 *
	 * <p> Any type of fill can be used, but if the fill has a transform matrix
	 * that transform matrix is ignored. </p>
	 *
	 * <p> A <code>uvtData</code> parameter improves texture mapping when a
	 * bitmap fill is used. </p>
	 * 
	 * @param culling Specifies whether to render triangles that face in a
	 *                specified direction. This parameter prevents the rendering
	 *                of triangles that cannot be seen in the current view. This
	 *                parameter can be set to any value defined by the
	 *                TriangleCulling class.]]></haxe_doc>
		</drawTriangles>
		<endFill public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Applies a fill to the lines and curves that were added since the last call
	 * to the <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	 * <code>beginBitmapFill()</code> method. Flash uses the fill that was
	 * specified in the previous call to the <code>beginFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	 * method. If the current drawing position does not equal the previous
	 * position specified in a <code>moveTo()</code> method and a fill is
	 * defined, the path is closed with a line and then filled.
	 *]]></haxe_doc>
		</endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a bitmap to use for the line stroke when drawing lines.
	 *
	 * <p>The bitmap line style is used for subsequent calls to Graphics methods
	 * such as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	 * method. The line style remains in effect until you call the
	 * <code>lineStyle()</code> or <code>lineGradientStyle()</code> methods, or
	 * the <code>lineBitmapStyle()</code> method again with different parameters.
	 * </p>
	 *
	 * <p>You can call the <code>lineBitmapStyle()</code> method in the middle of
	 * drawing a path to specify different styles for different line segments
	 * within a path. </p>
	 *
	 * <p>Call the <code>lineStyle()</code> method before you call the
	 * <code>lineBitmapStyle()</code> method to enable a stroke, or else the
	 * value of the line style is <code>undefined</code>.</p>
	 *
	 * <p>Calls to the <code>clear()</code> method set the line style back to
	 * <code>undefined</code>. </p>
	 * 
	 * @param bitmap The bitmap to use for the line stroke.
	 * @param matrix An optional transformation matrix as defined by the
	 *               flash.geom.Matrix class. The matrix can be used to scale or
	 *               otherwise manipulate the bitmap before applying it to the
	 *               line style.
	 * @param repeat Whether to repeat the bitmap in a tiled fashion.
	 * @param smooth Whether smoothing should be applied to the bitmap.]]></haxe_doc>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a gradient to use for the stroke when drawing lines.
	 *
	 * <p>The gradient line style is used for subsequent calls to Graphics
	 * methods such as the <code>lineTo()</code> methods or the
	 * <code>drawCircle()</code> method. The line style remains in effect until
	 * you call the <code>lineStyle()</code> or <code>lineBitmapStyle()</code>
	 * methods, or the <code>lineGradientStyle()</code> method again with
	 * different parameters. </p>
	 *
	 * <p>You can call the <code>lineGradientStyle()</code> method in the middle
	 * of drawing a path to specify different styles for different line segments
	 * within a path. </p>
	 *
	 * <p>Call the <code>lineStyle()</code> method before you call the
	 * <code>lineGradientStyle()</code> method to enable a stroke, or else the
	 * value of the line style is <code>undefined</code>.</p>
	 *
	 * <p>Calls to the <code>clear()</code> method set the line style back to
	 * <code>undefined</code>. </p>
	 * 
	 * @param type                A value from the GradientType class that
	 *                            specifies which gradient type to use, either
	 *                            GradientType.LINEAR or GradientType.RADIAL.
	 * @param matrix              A transformation matrix as defined by the
	 *                            flash.geom.Matrix class. The flash.geom.Matrix
	 *                            class includes a
	 *                            <code>createGradientBox()</code> method, which
	 *                            lets you conveniently set up the matrix for use
	 *                            with the <code>lineGradientStyle()</code>
	 *                            method.
	 * @param spreadMethod        A value from the SpreadMethod class that
	 *                            specifies which spread method to use:
	 * @param interpolationMethod A value from the InterpolationMethod class that
	 *                            specifies which value to use. For example,
	 *                            consider a simple linear gradient between two
	 *                            colors(with the <code>spreadMethod</code>
	 *                            parameter set to
	 *                            <code>SpreadMethod.REFLECT</code>). The
	 *                            different interpolation methods affect the
	 *                            appearance as follows:
	 * @param focalPointRatio     A number that controls the location of the
	 *                            focal point of the gradient. The value 0 means
	 *                            the focal point is in the center. The value 1
	 *                            means the focal point is at one border of the
	 *                            gradient circle. The value -1 means that the
	 *                            focal point is at the other border of the
	 *                            gradient circle. Values less than -1 or greater
	 *                            than 1 are rounded to -1 or 1. The following
	 *                            image shows a gradient with a
	 *                            <code>focalPointRatio</code> of -0.75:]]></haxe_doc>
		</lineGradientStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<e path="flash.display.LineScaleMode"/>
				<e path="flash.display.CapsStyle"/>
				<e path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a shader to use for the line stroke when drawing lines.
	 *
	 * <p>The shader line style is used for subsequent calls to Graphics methods
	 * such as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	 * method. The line style remains in effect until you call the
	 * <code>lineStyle()</code> or <code>lineGradientStyle()</code> methods, or
	 * the <code>lineBitmapStyle()</code> method again with different parameters.
	 * </p>
	 *
	 * <p>You can call the <code>lineShaderStyle()</code> method in the middle of
	 * drawing a path to specify different styles for different line segments
	 * within a path. </p>
	 *
	 * <p>Call the <code>lineStyle()</code> method before you call the
	 * <code>lineShaderStyle()</code> method to enable a stroke, or else the
	 * value of the line style is <code>undefined</code>.</p>
	 *
	 * <p>Calls to the <code>clear()</code> method set the line style back to
	 * <code>undefined</code>. </p>
	 * 
	 * @param shader The shader to use for the line stroke.
	 * @param matrix An optional transformation matrix as defined by the
	 *               flash.geom.Matrix class. The matrix can be used to scale or
	 *               otherwise manipulate the bitmap before applying it to the
	 *               line style.]]></haxe_doc>
		</lineStyle>
		<lineTo public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a line using the current line style from the current drawing
	 * position to(<code>x</code>, <code>y</code>); the current drawing position
	 * is then set to(<code>x</code>, <code>y</code>). If the display object in
	 * which you are drawing contains content that was created with the Flash
	 * drawing tools, calls to the <code>lineTo()</code> method are drawn
	 * underneath the content. If you call <code>lineTo()</code> before any calls
	 * to the <code>moveTo()</code> method, the default position for the current
	 * drawing is(<i>0, 0</i>). If any of the parameters are missing, this
	 * method fails and the current drawing position is not changed.
	 * 
	 * @param x A number that indicates the horizontal position relative to the
	 *          registration point of the parent display object(in pixels).
	 * @param y A number that indicates the vertical position relative to the
	 *          registration point of the parent display object(in pixels).]]></haxe_doc>
		</lineTo>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Moves the current drawing position to(<code>x</code>, <code>y</code>). If
	 * any of the parameters are missing, this method fails and the current
	 * drawing position is not changed.
	 * 
	 * @param x A number that indicates the horizontal position relative to the
	 *          registration point of the parent display object(in pixels).
	 * @param y A number that indicates the vertical position relative to the
	 *          registration point of the parent display object(in pixels).]]></haxe_doc>
		</moveTo>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[* The Graphics class contains a set of methods that you can use to create a
 * vector shape. Display objects that support drawing include Sprite and Shape
 * objects. Each of these classes includes a <code>graphics</code> property
 * that is a Graphics object. The following are among those helper functions
 * provided for ease of use: <code>drawRect()</code>,
 * <code>drawRoundRect()</code>, <code>drawCircle()</code>, and
 * <code>drawEllipse()</code>.
 *
 * <p>You cannot create a Graphics object directly from ActionScript code. If
 * you call <code>new Graphics()</code>, an exception is thrown.</p>
 *
 * <p>The Graphics class is final; it cannot be subclassed.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<haxe_doc><![CDATA[* The GraphicsPathWinding class provides values for the
 * <code>flash.display.GraphicsPath.winding</code> property and the
 * <code>flash.display.Graphics.drawPath()</code> method to determine the
 * direction to draw a path. A clockwise path is positively wound, and a
 * counter-clockwise path is negatively wound:
 *
 * <p> When paths intersect or overlap, the winding direction determines the
 * rules for filling the areas created by the intersection or overlap:</p>]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB><haxe_doc><![CDATA[* Specifies that the RGB interpolation method should be used. This means
	 * that the gradient is rendered with exponential sRGB(standard RGB) space.
	 * The sRGB space is a W3C-endorsed standard that defines a non-linear
	 * conversion between red, green, and blue component values and the actual
	 * intensity of the visible component color.
	 *
	 * <p>For example, consider a simple linear gradient between two colors(with
	 * the <code>spreadMethod</code> parameter set to
	 * <code>SpreadMethod.REFLECT</code>). The different interpolation methods
	 * affect the appearance as follows: </p>]]></haxe_doc></LINEAR_RGB>
		<RGB><haxe_doc><![CDATA[* Specifies that the RGB interpolation method should be used. This means
	 * that the gradient is rendered with exponential sRGB(standard RGB) space.
	 * The sRGB space is a W3C-endorsed standard that defines a non-linear
	 * conversion between red, green, and blue component values and the actual
	 * intensity of the visible component color.
	 *
	 * <p>For example, consider a simple linear gradient between two colors(with
	 * the <code>spreadMethod</code> parameter set to
	 * <code>SpreadMethod.REFLECT</code>). The different interpolation methods
	 * affect the appearance as follows: </p>]]></haxe_doc></RGB>
		<haxe_doc><![CDATA[* The InterpolationMethod class provides values for the
 * <code>interpolationMethod</code> parameter in the
 * <code>Graphics.beginGradientFill()</code> and
 * <code>Graphics.lineGradientStyle()</code> methods. This parameter
 * determines the RGB space to use when rendering the gradient.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/JointStyle.hx">
		<BEVEL><haxe_doc><![CDATA[* Specifies beveled joints in the <code>joints</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method.]]></haxe_doc></BEVEL>
		<MITER><haxe_doc><![CDATA[* Specifies mitered joints in the <code>joints</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method.]]></haxe_doc></MITER>
		<ROUND><haxe_doc><![CDATA[* Specifies round joints in the <code>joints</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method.]]></haxe_doc></ROUND>
		<haxe_doc><![CDATA[* The JointStyle class is an enumeration of constant values that specify the
 * joint style to use in drawing lines. These constants are provided for use
 * as values in the <code>joints</code> parameter of the
 * <code>flash.display.Graphics.lineStyle()</code> method. The method supports
 * three types of joints: miter, round, and bevel, as the following example
 * shows:]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/LineScaleMode.hx">
		<HORIZONTAL><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line scales
	 * <i>only</i> vertically. For example, consider the following circles, drawn
	 * with a one-pixel line, and each with the <code>scaleMode</code> parameter
	 * set to <code>LineScaleMode.VERTICAL</code>. The circle on the left is
	 * scaled only vertically, and the circle on the right is scaled both
	 * vertically and horizontally.]]></haxe_doc></HORIZONTAL>
		<NONE><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line never scales.]]></haxe_doc></NONE>
		<NORMAL><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line always scales
	 * when the object is scaled(the default).]]></haxe_doc></NORMAL>
		<VERTICAL><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line scales
	 * <i>only</i> horizontally. For example, consider the following circles,
	 * drawn with a one-pixel line, and each with the <code>scaleMode</code>
	 * parameter set to <code>LineScaleMode.HORIZONTAL</code>. The circle on the
	 * left is scaled only horizontally, and the circle on the right is scaled
	 * both vertically and horizontally.]]></haxe_doc></VERTICAL>
		<haxe_doc><![CDATA[* The LineScaleMode class provides values for the <code>scaleMode</code>
 * parameter in the <code>Graphics.lineStyle()</code> method.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Loader" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<haxe_doc><![CDATA[* Contains the root display object of the SWF file or image(JPG, PNG, or
	 * GIF) file that was loaded by using the <code>load()</code> or
	 * <code>loadBytes()</code> methods.
	 * 
	 * @throws SecurityError The loaded SWF file or image file belongs to a
	 *                       security sandbox to which you do not have access.
	 *                       For a loaded SWF file, you can avoid this situation
	 *                       by having the file call the
	 *                       <code>Security.allowDomain()</code> method or by
	 *                       having the loading file specify a
	 *                       <code>loaderContext</code> parameter with its
	 *                       <code>securityDomain</code> property set to
	 *                       <code>SecurityDomain.currentDomain</code> when you
	 *                       call the <code>load()</code> or
	 *                       <code>loadBytes()</code> method.]]></haxe_doc>
		</content>
		<contentLoaderInfo public="1" set="null">
			<c path="flash.display.LoaderInfo"/>
			<haxe_doc><![CDATA[* Returns a LoaderInfo object corresponding to the object being loaded.
	 * LoaderInfo objects are shared between the Loader object and the loaded
	 * content object. The LoaderInfo object supplies loading progress
	 * information and statistics about the loaded file.
	 *
	 * <p>Events related to the load are dispatched by the LoaderInfo object
	 * referenced by the <code>contentLoaderInfo</code> property of the Loader
	 * object. The <code>contentLoaderInfo</code> property is set to a valid
	 * LoaderInfo object, even before the content is loaded, so that you can add
	 * event listeners to the object prior to the load.</p>
	 *
	 * <p>To detect uncaught errors that happen in a loaded SWF, use the
	 * <code>Loader.uncaughtErrorEvents</code> property, not the
	 * <code>Loader.contentLoaderInfo.uncaughtErrorEvents</code> property.</p>]]></haxe_doc>
		</contentLoaderInfo>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Cancels a <code>load()</code> method operation that is currently in
	 * progress for the Loader instance.
	 *]]></haxe_doc>
		</close>
		<load public="1" set="method">
			<f a="request:?context">
				<c path="flash.net.URLRequest"/>
				<c path="flash.system.LoaderContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an
	 * object that is a child of this Loader object. If you load an animated GIF
	 * file, only the first frame is displayed. As the Loader object can contain
	 * only a single child, issuing a subsequent <code>load()</code> request
	 * terminates the previous request, if still pending, and commences a new
	 * load.
	 *
	 * <p><b>Note</b>: In AIR 1.5 and Flash Player 10, the maximum size for a
	 * loaded image is 8,191 pixels in width or height, and the total number of
	 * pixels cannot exceed 16,777,215 pixels.(So, if an loaded image is 8,191
	 * pixels wide, it can only be 2,048 pixels high.) In Flash Player 9 and
	 * earlier and AIR 1.1 and earlier, the limitation is 2,880 pixels in height
	 * and 2,880 pixels in width.</p>
	 *
	 * <p>A SWF file or image loaded into a Loader object inherits the position,
	 * rotation, and scale properties of the parent display objects of the Loader
	 * object. </p>
	 *
	 * <p>Use the <code>unload()</code> method to remove movies or images loaded
	 * with this method, or to cancel a load operation that is in progress.</p>
	 *
	 * <p>You can prevent a SWF file from using this method by setting the
	 * <code>allowNetworking</code> parameter of the the <code>object</code> and
	 * <code>embed</code> tags in the HTML page that contains the SWF
	 * content.</p>
	 *
	 * <p>When you use this method, consider the Flash Player security model,
	 * which is described in the Loader class description. </p>
	 *
	 * <p> In Flash Player 10 and later, if you use a multipart Content-Type(for
	 * example "multipart/form-data") that contains an upload(indicated by a
	 * "filename" parameter in a "content-disposition" header within the POST
	 * body), the POST operation is subject to the security rules applied to
	 * uploads:</p>
	 *
	 * <ul>
	 *   <li>The POST operation must be performed in response to a user-initiated
	 * action, such as a mouse click or key press.</li>
	 *   <li>If the POST operation is cross-domain(the POST target is not on the
	 * same server as the SWF file that is sending the POST request), the target
	 * server must provide a URL policy file that permits cross-domain
	 * access.</li>
	 * </ul>
	 *
	 * <p>Also, for any multipart Content-Type, the syntax must be valid
	 * (according to the RFC2046 standard). If the syntax appears to be invalid,
	 * the POST operation is subject to the security rules applied to
	 * uploads.</p>
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param request The absolute or relative URL of the SWF, JPEG, GIF, or PNG
	 *                file to be loaded. A relative path must be relative to the
	 *                main SWF file. Absolute URLs must include the protocol
	 *                reference, such as http:// or file:///. Filenames cannot
	 *                include disk drive specifications.
	 * @param context A LoaderContext object, which has properties that define
	 *                the following:
	 *                <ul>
	 *                  <li>Whether or not to check for the existence of a policy
	 *                file upon loading the object</li>
	 *                  <li>The ApplicationDomain for the loaded object</li>
	 *                  <li>The SecurityDomain for the loaded object</li>
	 *                  <li>The ImageDecodingPolicy for the loaded image
	 *                object</li>
	 *                </ul>
	 *
	 *                <p>If the <code>context</code> parameter is not specified
	 *                or refers to a null object, the loaded content remains in
	 *                its own security domain.</p>
	 *
	 *                <p>For complete details, see the description of the
	 *                properties in the <a
	 *                href="../system/LoaderContext.html">LoaderContext</a>
	 *                class.</p>
	 * @throws IOError               The <code>digest</code> property of the
	 *                               <code>request</code> object is not
	 *                               <code>null</code>. You should only set the
	 *                               <code>digest</code> property of a URLRequest
	 *                               object when calling the
	 *                               <code>URLLoader.load()</code> method when
	 *                               loading a SWZ file(an Adobe platform
	 *                               component).
	 * @throws IllegalOperationError If the <code>requestedContentParent</code>
	 *                               property of the <code>context</code>
	 *                               parameter is a <code>Loader</code>.
	 * @throws IllegalOperationError If the <code>LoaderContext.parameters</code>
	 *                               parameter is set to non-null and has some
	 *                               values which are not Strings.
	 * @throws SecurityError         The value of
	 *                               <code>LoaderContext.securityDomain</code>
	 *                               must be either <code>null</code> or
	 *                               <code>SecurityDomain.currentDomain</code>.
	 *                               This reflects the fact that you can only
	 *                               place the loaded media in its natural
	 *                               security sandbox or your own(the latter
	 *                               requires a policy file).
	 * @throws SecurityError         Local SWF files may not set
	 *                               LoaderContext.securityDomain to anything
	 *                               other than <code>null</code>. It is not
	 *                               permitted to import non-local media into a
	 *                               local sandbox, or to place other local media
	 *                               in anything other than its natural sandbox.
	 * @throws SecurityError         You cannot connect to commonly reserved
	 *                               ports. For a complete list of blocked ports,
	 *                               see "Restricting Networking APIs" in the
	 *                               <i>ActionScript 3.0 Developer's Guide</i>.
	 * @throws SecurityError         If the <code>applicationDomain</code> or
	 *                               <code>securityDomain</code> properties of
	 *                               the <code>context</code> parameter are from
	 *                               a disallowed domain.
	 * @throws SecurityError         If a local SWF file is attempting to use the
	 *                               <code>securityDomain</code> property of the
	 *                               <code>context</code> parameter.
	 * @event asyncError    Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and it is not possible to
	 *                      add the loaded content as a child to the specified
	 *                      DisplayObjectContainer. This could happen if the
	 *                      loaded content is a
	 *                      <code>flash.display.AVM1Movie</code> or if the
	 *                      <code>addChild()</code> call to the
	 *                      requestedContentParent throws an error.
	 * @event complete      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the file has completed loading. The
	 *                      <code>complete</code> event is always dispatched
	 *                      after the <code>init</code> event.
	 * @event httpStatus    Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when a network request is made over HTTP and
	 *                      Flash Player can detect the HTTP status code.
	 * @event init          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the properties and methods of the loaded
	 *                      SWF file are accessible. The <code>init</code> event
	 *                      always precedes the <code>complete</code> event.
	 * @event ioError       Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when an input or output error occurs that
	 *                      causes a load operation to fail.
	 * @event open          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the loading operation starts.
	 * @event progress      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object as data is received while load operation
	 *                      progresses.
	 * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if a SWF file in the local-with-filesystem
	 *                      sandbox attempts to load content in the
	 *                      local-with-networking sandbox, or vice versa.
	 * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and the security sandbox
	 *                      of the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      does not have access to the loaded SWF.
	 * @event unload        Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when a loaded object is removed.]]></haxe_doc>
		</load>
		<loadBytes public="1" set="method">
			<f a="bytes:?context">
				<c path="flash.utils.ByteArray"/>
				<c path="flash.system.LoaderContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Loads from binary data stored in a ByteArray object.
	 *
	 * <p>The <code>loadBytes()</code> method is asynchronous. You must wait for
	 * the "init" event before accessing the properties of a loaded object.</p>
	 *
	 * <p>When you use this method, consider the Flash Player security model,
	 * which is described in the Loader class description. </p>
	 * 
	 * @param bytes   A ByteArray object. The contents of the ByteArray can be
	 *                any of the file formats supported by the Loader class: SWF,
	 *                GIF, JPEG, or PNG.
	 * @param context A LoaderContext object. Only the
	 *                <code>applicationDomain</code> property of the
	 *                LoaderContext object applies; the
	 *                <code>checkPolicyFile</code> and
	 *                <code>securityDomain</code> properties of the LoaderContext
	 *                object do not apply.
	 *
	 *                <p>If the <code>context</code> parameter is not specified
	 *                or refers to a null object, the content is loaded into the
	 *                current security domain -  a process referred to as "import
	 *                loading" in Flash Player security documentation.
	 *                Specifically, if the loading SWF file trusts the remote SWF
	 *                by incorporating the remote SWF into its code, then the
	 *                loading SWF can import it directly into its own security
	 *                domain.</p>
	 *
	 *                <p>For more information related to security, see the Flash
	 *                Player Developer Center Topic: <a
	 *                href="http://www.adobe.com/go/devnet_security_en"
	 *                scope="external">Security</a>.</p>
	 * @throws ArgumentError         If the <code>length</code> property of the
	 *                               ByteArray object is not greater than 0.
	 * @throws IllegalOperationError If the <code>checkPolicyFile</code> or
	 *                               <code>securityDomain</code> property of the
	 *                               <code>context</code> parameter are non-null.
	 * @throws IllegalOperationError If the <code>requestedContentParent</code>
	 *                               property of the <code>context</code>
	 *                               parameter is a <code>Loader</code>.
	 * @throws IllegalOperationError If the <code>LoaderContext.parameters</code>
	 *                               parameter is set to non-null and has some
	 *                               values which are not Strings.
	 * @throws SecurityError         If the provided
	 *                               <code>applicationDomain</code> property of
	 *                               the <code>context</code> property is from a
	 *                               disallowed domain.
	 * @throws SecurityError         You cannot connect to commonly reserved
	 *                               ports. For a complete list of blocked ports,
	 *                               see "Restricting Networking APIs" in the
	 *                               <i>ActionScript 3.0 Developer's Guide</i>.
	 * @event asyncError    Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and it is not possible to
	 *                      add the loaded content as a child to the specified
	 *                      DisplayObjectContainer. This could happen if the
	 *                      loaded content is a
	 *                      <code>flash.display.AVM1Movie</code> or if the
	 *                      <code>addChild()</code> call to the
	 *                      requestedContentParent throws an error.
	 * @event complete      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the operation is complete. The
	 *                      <code>complete</code> event is always dispatched
	 *                      after the <code>init</code> event.
	 * @event init          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the properties and methods of the loaded
	 *                      data are accessible. The <code>init</code> event
	 *                      always precedes the <code>complete</code> event.
	 * @event ioError       Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the runtime cannot parse the data in the
	 *                      byte array.
	 * @event open          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the operation starts.
	 * @event progress      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object as data is transfered in memory.
	 * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and the security sandbox
	 *                      of the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      does not have access to the loaded SWF.
	 * @event unload        Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when a loaded object is removed.]]></haxe_doc>
		</loadBytes>
		<unload public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Removes a child of this Loader object that was loaded by using the
	 * <code>load()</code> method. The <code>property</code> of the associated
	 * LoaderInfo object is reset to <code>null</code>. The child is not
	 * necessarily destroyed because other objects might have references to it;
	 * however, it is no longer a child of the Loader object.
	 *
	 * <p>As a best practice, before you unload a child SWF file, you should
	 * explicitly close any streams in the child SWF file's objects, such as
	 * LocalConnection, NetConnection, NetStream, and Sound objects. Otherwise,
	 * audio in the child SWF file might continue to play, even though the child
	 * SWF file was unloaded. To close streams in the child SWF file, add an
	 * event listener to the child that listens for the <code>unload</code>
	 * event. When the parent calls <code>Loader.unload()</code>, the
	 * <code>unload</code> event is dispatched to the child. The following code
	 * shows how you might do this:</p>
	 * <pre xml:space="preserve"> function closeAllStreams(evt:Event) {
	 * myNetStream.close(); mySound.close(); myNetConnection.close();
	 * myLocalConnection.close(); }
	 * myMovieClip.loaderInfo.addEventListener(Event.UNLOAD,
	 * closeAllStreams);</pre>
	 *]]></haxe_doc>
		</unload>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* An object that dispatches an <code>uncaughtError</code> event when an
	 * unhandled error occurs in the SWF that's loaded by this Loader object. An
	 * uncaught error happens when an error is thrown outside of any
	 * <code>try..catch</code> blocks or when an ErrorEvent object is dispatched
	 * with no registered listeners.
	 *
	 * <p>Note that a Loader object's <code>uncaughtErrorEvents</code> property
	 * dispatches events that bubble through it, not events that it dispatches
	 * directly. It never dispatches an <code>uncaughtErrorEvent</code> in the
	 * target phase. It only dispatches the event in the capture and bubbling
	 * phases. To detect an uncaught error in the current SWF(the SWF in which
	 * the Loader object is defined) use the
	 * <code>LoaderInfo.uncaughtErrorEvents</code> property instead.</p>
	 *
	 * <p>If the content loaded by the Loader object is an AVM1(ActionScript 2)
	 * SWF file, uncaught errors in the AVM1 SWF file do not result in an
	 * <code>uncaughtError</code> event.</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Loader class is used to load SWF files or image(JPG, PNG, or GIF)
 * files. Use the <code>load()</code> method to initiate loading. The loaded
 * display object is added as a child of the Loader object.
 *
 * <p>Use the URLLoader class to load text or binary data.</p>
 *
 * <p>The Loader class overrides the following methods that it inherits,
 * because a Loader object can only have one child display object - the
 * display object that it loads. Calling the following methods throws an
 * exception: <code>addChild()</code>, <code>addChildAt()</code>,
 * <code>removeChild()</code>, <code>removeChildAt()</code>, and
 * <code>setChildIndex()</code>. To remove a loaded display object, you must
 * remove the <i>Loader</i> object from its parent DisplayObjectContainer
 * child array. </p>
 *
 * <p><b>Note:</b> The ActionScript 2.0 MovieClipLoader and LoadVars classes
 * are not used in ActionScript 3.0. The Loader and URLLoader classes replace
 * them.</p>
 *
 * <p>When you use the Loader class, consider the Flash Player and Adobe AIR
 * security model: </p>
 *
 * <ul>
 *   <li>You can load content from any accessible source. </li>
 *   <li>Loading is not allowed if the calling SWF file is in a network
 * sandbox and the file to be loaded is local. </li>
 *   <li>If the loaded content is a SWF file written with ActionScript 3.0, it
 * cannot be cross-scripted by a SWF file in another security sandbox unless
 * that cross-scripting arrangement was approved through a call to the
 * <code>System.allowDomain()</code> or the
 * <code>System.allowInsecureDomain()</code> method in the loaded content
 * file.</li>
 *   <li>If the loaded content is an AVM1 SWF file(written using ActionScript
 * 1.0 or 2.0), it cannot be cross-scripted by an AVM2 SWF file(written using
 * ActionScript 3.0). However, you can communicate between the two SWF files
 * by using the LocalConnection class.</li>
 *   <li>If the loaded content is an image, its data cannot be accessed by a
 * SWF file outside of the security sandbox, unless the domain of that SWF
 * file was included in a URL policy file at the origin domain of the
 * image.</li>
 *   <li>Movie clips in the local-with-file-system sandbox cannot script movie
 * clips in the local-with-networking sandbox, and the reverse is also
 * prevented. </li>
 *   <li>You cannot connect to commonly reserved ports. For a complete list of
 * blocked ports, see "Restricting Networking APIs" in the <i>ActionScript 3.0
 * Developer's Guide</i>. </li>
 * </ul>
 *
 * <p>However, in AIR, content in the <code>application</code> security
 * sandbox(content installed with the AIR application) are not restricted by
 * these security limitations.</p>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>
 *
 * <p>When loading a SWF file from an untrusted source(such as a domain other
 * than that of the Loader object's root SWF file), you may want to define a
 * mask for the Loader object, to prevent the loaded content(which is a child
 * of the Loader object) from drawing to portions of the Stage outside of that
 * mask, as shown in the following code:</p>]]></haxe_doc>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<applicationDomain public="1" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<haxe_doc><![CDATA[* The ActionScript version of the loaded SWF file. The language version is
	 * specified by using the enumerations in the ActionScriptVersion class, such
	 * as <code>ActionScriptVersion.ACTIONSCRIPT2</code> and
	 * <code>ActionScriptVersion.ACTIONSCRIPT3</code>.
	 *
	 * <p><b>Note:</b> This property always has a value of either
	 * <code>ActionScriptVersion.ACTIONSCRIPT2</code> or
	 * <code>ActionScriptVersion.ACTIONSCRIPT3</code>. ActionScript 1.0 and 2.0
	 * are both reported as <code>ActionScriptVersion.ACTIONSCRIPT2</code>
	 * (version 2.0). This property only distinguishes ActionScript 1.0 and 2.0
	 * from ActionScript 3.0.</p>
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.
	 * @throws Error If the file is not a SWF file.]]></haxe_doc>
		</applicationDomain>
		<bytes public="1" set="null">
			<c path="flash.utils.ByteArray"/>
			<haxe_doc><![CDATA[* The bytes associated with a LoaderInfo object.
	 * 
	 * @throws SecurityError If the object accessing this API is prevented from
	 *                       accessing the loaded object due to security
	 *                       restrictions. This situation can occur, for
	 *                       instance, when a Loader object attempts to access
	 *                       the <code>contentLoaderInfo.content</code> property
	 *                       and it is not granted security permission to access
	 *                       the loaded content.
	 *
	 *                       <p>For more information related to security, see the
	 *                       Flash Player Developer Center Topic: <a
	 *                       href="http://www.adobe.com/go/devnet_security_en"
	 *                       scope="external">Security</a>.</p>]]></haxe_doc>
		</bytes>
		<bytesLoaded public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The number of bytes that are loaded for the media. When this number equals
	 * the value of <code>bytesTotal</code>, all of the bytes are loaded.]]></haxe_doc>
		</bytesLoaded>
		<bytesTotal public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The number of compressed bytes in the entire media file.
	 *
	 * <p>Before the first <code>progress</code> event is dispatched by this
	 * LoaderInfo object's corresponding Loader object, <code>bytesTotal</code>
	 * is 0. After the first <code>progress</code> event from the Loader object,
	 * <code>bytesTotal</code> reflects the actual number of bytes to be
	 * downloaded.</p>]]></haxe_doc>
		</bytesTotal>
		<content public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<haxe_doc><![CDATA[* Expresses the trust relationship from content(child) to the Loader
	 * (parent). If the child has allowed the parent access, <code>true</code>;
	 * otherwise, <code>false</code>. This property is set to <code>true</code>
	 * if the child object has called the <code>allowDomain()</code> method to
	 * grant permission to the parent domain or if a URL policy is loaded at the
	 * child domain that grants permission to the parent domain. If child and
	 * parent are in the same domain, this property is set to <code>true</code>.
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @throws Error Thrown if the file is not downloaded sufficiently to
	 *               retrieve the requested information.]]></haxe_doc>
		</content>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The MIME type of the loaded file. The value is <code>null</code> if not
	 * enough of the file has loaded in order to determine the type. The
	 * following list gives the possible values:
	 * <ul>
	 *   <li><code>"application/x-shockwave-flash"</code></li>
	 *   <li><code>"image/jpeg"</code></li>
	 *   <li><code>"image/gif"</code></li>
	 *   <li><code>"image/png"</code></li>
	 * </ul>]]></haxe_doc>
		</contentType>
		<frameRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The nominal frame rate, in frames per second, of the loaded SWF file. This
	 * number is often an integer, but need not be.
	 *
	 * <p>This value may differ from the actual frame rate in use. Flash Player
	 * or Adobe AIR only uses a single frame rate for all loaded SWF files at any
	 * one time, and this frame rate is determined by the nominal frame rate of
	 * the main SWF file. Also, the main frame rate may not be able to be
	 * achieved, depending on hardware, sound synchronization, and other
	 * factors.</p>
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.
	 * @throws Error If the file is not a SWF file.]]></haxe_doc>
		</frameRate>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The nominal height of the loaded file. This value might differ from the
	 * actual height at which the content is displayed, since the loaded content
	 * or its parent display objects might be scaled.
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.</haxe_doc>
		</height>
		<loader public="1" set="null">
			<c path="flash.display.Loader"/>
			<haxe_doc><![CDATA[* Indicates if the <code>LoaderInfo.url</code> property has been truncated.
	 * When the <code>isURLInaccessible</code> value is <code>true</code> the
	 * <code>LoaderInfo.url</code> value is only the domain of the final URL from
	 * which the content loaded. For example, the property is truncated if the
	 * content is loaded from <code>http://www.adobe.com/assets/hello.swf</code>,
	 * and the <code>LoaderInfo.url</code> property has the value
	 * <code>http://www.adobe.com</code>. The <code>isURLInaccessible</code>
	 * value is <code>true</code> only when all of the following are also true:
	 * <ul>
	 *   <li>An HTTP redirect occurred while loading the content.</li>
	 *   <li>The SWF file calling <code>Loader.load()</code> is from a different
	 * domain than the content's final URL.</li>
	 *   <li>The SWF file calling <code>Loader.load()</code> does not have
	 * permission to access the content. Permission is granted to access the
	 * content the same way permission is granted for
	 * <code>BitmapData.draw()</code>: call <code>Security.allowDomain()</code>
	 * to access a SWF file(or for non-SWF file content, establish a policy file
	 * and use the <code>LoaderContext.checkPolicyFile</code> property).</li>
	 * </ul>
	 *
	 * <p><b>Note:</b> The <code>isURLInaccessible</code> property was added for
	 * Flash Player 10.1 and AIR 2.0. However, this property is made available to
	 * SWF files of all versions when the Flash runtime supports it. So, using
	 * some authoring tools in "strict mode" causes a compilation error. To work
	 * around the error use the indirect syntax
	 * <code>myLoaderInfo["isURLInaccessible"]</code>, or disable strict mode. If
	 * you are using Flash Professional CS5 or Flex SDK 4.1, you can use and
	 * compile this API for runtimes released before Flash Player 10.1 and AIR
	 * 2.</p>
	 *
	 * <p>For application content in AIR, the value of this property is always
	 * <code>false</code>.</p>]]></haxe_doc>
		</loader>
		<loaderURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The URL of the SWF file that initiated the loading of the media described
	 * by this LoaderInfo object. For the instance of the main class of the SWF
	 * file, this URL is the same as the SWF file's own URL.</haxe_doc>
		</loaderURL>
		<parameters public="1" set="null">
			<d><c path="String"/></d>
			<haxe_doc><![CDATA[* An object that contains name-value pairs that represent the parameters
	 * provided to the loaded SWF file.
	 *
	 * <p>You can use a <code>for-in</code> loop to extract all the names and
	 * values from the <code>parameters</code> object.</p>
	 *
	 * <p>The two sources of parameters are: the query string in the URL of the
	 * main SWF file, and the value of the <code>FlashVars</code> HTML parameter
	 * (this affects only the main SWF file).</p>
	 *
	 * <p>The <code>parameters</code> property replaces the ActionScript 1.0 and
	 * 2.0 technique of providing SWF file parameters as properties of the main
	 * timeline.</p>
	 *
	 * <p>The value of the <code>parameters</code> property is null for Loader
	 * objects that contain SWF files that use ActionScript 1.0 or 2.0. It is
	 * only non-null for Loader objects that contain SWF files that use
	 * ActionScript 3.0.</p>]]></haxe_doc>
		</parameters>
		<parentAllowsChild public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Expresses the trust relationship from Loader(parent) to the content
	 * (child). If the parent has allowed the child access, <code>true</code>;
	 * otherwise, <code>false</code>. This property is set to <code>true</code>
	 * if the parent object called the <code>allowDomain()</code> method to grant
	 * permission to the child domain or if a URL policy file is loaded at the
	 * parent domain granting permission to the child domain. If child and parent
	 * are in the same domain, this property is set to <code>true</code>.
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @throws Error Thrown if the file is not downloaded sufficiently to
	 *               retrieve the requested information.]]></haxe_doc>
		</parentAllowsChild>
		<sameDomain public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Expresses the domain relationship between the loader and the content:
	 * <code>true</code> if they have the same origin domain; <code>false</code>
	 * otherwise.
	 * 
	 * @throws Error Thrown if the file is not downloaded sufficiently to
	 *               retrieve the requested information.]]></haxe_doc>
		</sameDomain>
		<sharedEvents public="1" set="null">
			<c path="flash.events.EventDispatcher"/>
			<haxe_doc><![CDATA[* An EventDispatcher instance that can be used to exchange events across
	 * security boundaries. Even when the Loader object and the loaded content
	 * originate from security domains that do not trust one another, both can
	 * access <code>sharedEvents</code> and send and receive events via this
	 * object.]]></haxe_doc>
		</sharedEvents>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The file format version of the loaded SWF file. The file format is
	 * specified using the enumerations in the SWFVersion class, such as
	 * <code>SWFVersion.FLASH7</code> and <code>SWFVersion.FLASH9</code>.
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.
	 * @throws Error If the file is not a SWF file.]]></haxe_doc>
		</url>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The nominal width of the loaded content. This value might differ from the
	 * actual width at which the content is displayed, since the loaded content
	 * or its parent display objects might be scaled.
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[* The LoaderInfo class provides information about a loaded SWF file or a
 * loaded image file(JPEG, GIF, or PNG). LoaderInfo objects are available for
 * any display object. The information provided includes load progress, the
 * URLs of the loader and loaded content, the number of bytes total for the
 * media, and the nominal height and width of the media.
 *
 * <p>You can access LoaderInfo objects in two ways: </p>
 *
 * <ul>
 *   <li>The <code>contentLoaderInfo</code> property of a flash.display.Loader
 * object -  The <code>contentLoaderInfo</code> property is always available
 * for any Loader object. For a Loader object that has not called the
 * <code>load()</code> or <code>loadBytes()</code> method, or that has not
 * sufficiently loaded, attempting to access many of the properties of the
 * <code>contentLoaderInfo</code> property throws an error.</li>
 *   <li>The <code>loaderInfo</code> property of a display object. </li>
 * </ul>
 *
 * <p>The <code>contentLoaderInfo</code> property of a Loader object provides
 * information about the content that the Loader object is loading, whereas
 * the <code>loaderInfo</code> property of a DisplayObject provides
 * information about the root SWF file for that display object. </p>
 *
 * <p>When you use a Loader object to load a display object(such as a SWF
 * file or a bitmap), the <code>loaderInfo</code> property of the display
 * object is the same as the <code>contentLoaderInfo</code> property of the
 * Loader object(<code>DisplayObject.loaderInfo =
 * Loader.contentLoaderInfo</code>). Because the instance of the main class of
 * the SWF file has no Loader object, the <code>loaderInfo</code> property is
 * the only way to access the LoaderInfo for the instance of the main class of
 * the SWF file.</p>
 *
 * <p>The following diagram shows the different uses of the LoaderInfo
 * object - for the instance of the main class of the SWF file, for the
 * <code>contentLoaderInfo</code> property of a Loader object, and for the
 * <code>loaderInfo</code> property of a loaded object:</p>
 *
 * <p>When a loading operation is not complete, some properties of the
 * <code>contentLoaderInfo</code> property of a Loader object are not
 * available. You can obtain some properties, such as
 * <code>bytesLoaded</code>, <code>bytesTotal</code>, <code>url</code>,
 * <code>loaderURL</code>, and <code>applicationDomain</code>. When the
 * <code>loaderInfo</code> object dispatches the <code>init</code> event, you
 * can access all properties of the <code>loaderInfo</code> object and the
 * loaded image or SWF file.</p>
 *
 * <p><b>Note:</b> All properties of LoaderInfo objects are read-only.</p>
 *
 * <p>The <code>EventDispatcher.dispatchEvent()</code> method is not
 * applicable to LoaderInfo objects. If you call <code>dispatchEvent()</code>
 * on a LoaderInfo object, an IllegalOperationError exception is thrown.</p>
 * 
 * @event complete   Dispatched when data has loaded successfully. In other
 *                   words, it is dispatched when all the content has been
 *                   downloaded and the loading has finished. The
 *                   <code>complete</code> event is always dispatched after
 *                   the <code>init</code> event. The <code>init</code> event
 *                   is dispatched when the object is ready to access, though
 *                   the content may still be downloading.
 * @event httpStatus Dispatched when a network request is made over HTTP and
 *                   an HTTP status code can be detected.
 * @event init       Dispatched when the properties and methods of a loaded
 *                   SWF file are accessible and ready for use. The content,
 *                   however, can still be downloading. A LoaderInfo object
 *                   dispatches the <code>init</code> event when the following
 *                   conditions exist:
 *                   <ul>
 *                     <li>All properties and methods associated with the
 *                   loaded object and those associated with the LoaderInfo
 *                   object are accessible.</li>
 *                     <li>The constructors for all child objects have
 *                   completed.</li>
 *                     <li>All ActionScript code in the first frame of the
 *                   loaded SWF's main timeline has been executed.</li>
 *                   </ul>
 *
 *                   <p>For example, an <code>Event.INIT</code> is dispatched
 *                   when the first frame of a movie or animation is loaded.
 *                   The movie is then accessible and can be added to the
 *                   display list. The complete movie, however, can take
 *                   longer to download. The <code>Event.COMPLETE</code> is
 *                   only dispatched once the full movie is loaded.</p>
 *
 *                   <p>The <code>init</code> event always precedes the
 *                   <code>complete</code> event.</p>
 * @event ioError    Dispatched when an input or output error occurs that
 *                   causes a load operation to fail.
 * @event open       Dispatched when a load operation starts.
 * @event progress   Dispatched when data is received as the download
 *                   operation progresses.
 * @event unload     Dispatched by a LoaderInfo object whenever a loaded
 *                   object is removed by using the <code>unload()</code>
 *                   method of the Loader object, or when a second load is
 *                   performed by the same Loader object and the original
 *                   content is removed prior to the load beginning.]]></haxe_doc>
	</class>
	<enum path="flash.display.SpreadMethod" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/SpreadMethod.hx">
		<PAD><haxe_doc><![CDATA[* Specifies that the gradient use the <i>pad</i> spread method.]]></haxe_doc></PAD>
		<REFLECT><haxe_doc><![CDATA[* Specifies that the gradient use the <i>reflect</i> spread method.]]></haxe_doc></REFLECT>
		<REPEAT><haxe_doc><![CDATA[* Specifies that the gradient use the <i>repeat</i> spread method.]]></haxe_doc></REPEAT>
		<haxe_doc><![CDATA[* The SpreadMethod class provides values for the <code>spreadMethod</code>
 * parameter in the <code>beginGradientFill()</code> and
 * <code>lineGradientStyle()</code> methods of the Graphics class.
 *
 * <p>The following example shows the same gradient fill using various spread
 * methods:</p>]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Stage" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1">
			<e path="flash.display.StageAlign"/>
			<haxe_doc><![CDATA[* A value from the StageAlign class that specifies the alignment of the
	 * stage in Flash Player or the browser. The following are valid values:
	 *
	 * <p>The <code>align</code> property is only available to an object that is
	 * in the same security sandbox as the Stage owner(the main SWF file). To
	 * avoid this, the Stage owner can grant permission to the domain of the
	 * calling object by calling the <code>Security.allowDomain()</code> method
	 * or the <code>Security.alowInsecureDomain()</code> method. For more
	 * information, see the "Security" chapter in the <i>ActionScript 3.0
	 * Developer's Guide</i>.</p>]]></haxe_doc>
		</align>
		<displayState public="1">
			<e path="flash.display.StageDisplayState"/>
			<haxe_doc><![CDATA[* Controls Flash runtime color correction for displays. Color correction
	 * works only if the main monitor is assigned a valid ICC color profile,
	 * which specifies the device's particular color attributes. By default, the
	 * Flash runtime tries to match the color correction of its host(usually a
	 * browser).
	 *
	 * <p>Use the <code>Stage.colorCorrectionSupport</code> property to determine
	 * if color correction is available on the current system and the default
	 * state. . If color correction is available, all colors on the stage are
	 * assumed to be in the sRGB color space, which is the most standard color
	 * space. Source profiles of input devices are not considered during color
	 * correction. No input color correction is applied; only the stage output is
	 * mapped to the main monitor's ICC color profile.</p>
	 *
	 * <p>In general, the benefits of activating color management include
	 * predictable and consistent color, better conversion, accurate proofing and
	 * more efficient cross-media output. Be aware, though, that color management
	 * does not provide perfect conversions due to devices having a different
	 * gamut from each other or original images. Nor does color management
	 * eliminate the need for custom or edited profiles. Color profiles are
	 * dependent on browsers, operating systems(OS), OS extensions, output
	 * devices, and application support.</p>
	 *
	 * <p>Applying color correction degrades the Flash runtime performance. A
	 * Flash runtime's color correction is document style color correction
	 * because all SWF movies are considered documents with implicit sRGB
	 * profiles. Use the <code>Stage.colorCorrectionSupport</code> property to
	 * tell the Flash runtime to correct colors when displaying the SWF file
	 * (document) to the display color space. Flash runtimes only compensates for
	 * differences between monitors, not for differences between input devices
	 * (camera/scanner/etc.). </p>
	 *
	 * <p>The three possible values are strings with corresponding constants in
	 * the flash.display.ColorCorrection class:</p>
	 *
	 * <ul>
	 *   <li><code>"default"</code>: Use the same color correction as the host
	 * system.</li>
	 *   <li><code>"on"</code>: Always perform color correction.</li>
	 *   <li><code>"off"</code>: Never perform color correction.</li>
	 * </ul>]]></haxe_doc>
		</displayState>
		<focus public="1">
			<c path="flash.display.InteractiveObject"/>
			<haxe_doc><![CDATA[* The interactive object with keyboard focus; or <code>null</code> if focus
	 * is not set or if the focused object belongs to a security sandbox to which
	 * the calling object does not have access.
	 * 
	 * @throws Error Throws an error if focus cannot be set to the target.]]></haxe_doc>
		</focus>
		<frameRate public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* Gets and sets the frame rate of the stage. The frame rate is defined as
	 * frames per second. By default the rate is set to the frame rate of the
	 * first SWF file loaded. Valid range for the frame rate is from 0.01 to 1000
	 * frames per second.
	 *
	 * <p><b>Note:</b> An application might not be able to follow high frame rate
	 * settings, either because the target platform is not fast enough or the
	 * player is synchronized to the vertical blank timing of the display device
	 * (usually 60 Hz on LCD devices). In some cases, a target platform might
	 * also choose to lower the maximum frame rate if it anticipates high CPU
	 * usage.</p>
	 *
	 * <p>For content running in Adobe AIR, setting the <code>frameRate</code>
	 * property of one Stage object changes the frame rate for all Stage objects
	 * (used by different NativeWindow objects). </p>
	 * 
	 * @throws SecurityError Calling the <code>frameRate</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner(the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</frameRate>
		<fullScreenHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* Returns the height of the monitor that will be used when going to full
	 * screen size, if that state is entered immediately. If the user has
	 * multiple monitors, the monitor that's used is the monitor that most of the
	 * stage is on at the time.
	 *
	 * <p><b>Note</b>: If the user has the opportunity to move the browser from
	 * one monitor to another between retrieving the value and going to full
	 * screen size, the value could be incorrect. If you retrieve the value in an
	 * event handler that sets <code>Stage.displayState</code> to
	 * <code>StageDisplayState.FULL_SCREEN</code>, the value will be correct.</p>
	 *
	 * <p>This is the pixel height of the monitor and is the same as the stage
	 * height would be if <code>Stage.align</code> is set to
	 * <code>StageAlign.TOP_LEFT</code> and <code>Stage.scaleMode</code> is set
	 * to <code>StageScaleMode.NO_SCALE</code>.</p>]]></haxe_doc>
		</fullScreenHeight>
		<fullScreenSourceRect public="1">
			<c path="flash.geom.Rectangle"/>
			<haxe_doc><![CDATA[* Sets the Flash runtime to scale a specific region of the stage to
	 * full-screen mode. If available, the Flash runtime scales in hardware,
	 * which uses the graphics and video card on a user's computer, and generally
	 * displays content more quickly than software scaling.
	 *
	 * <p>When this property is set to a valid rectangle and the
	 * <code>displayState</code> property is set to full-screen mode, the Flash
	 * runtime scales the specified area. The actual Stage size in pixels within
	 * ActionScript does not change. The Flash runtime enforces a minimum limit
	 * for the size of the rectangle to accommodate the standard "Press Esc to
	 * exit full-screen mode" message. This limit is usually around 260 by 30
	 * pixels but can vary on platform and Flash runtime version.</p>
	 *
	 * <p>This property can only be set when the Flash runtime is not in
	 * full-screen mode. To use this property correctly, set this property first,
	 * then set the <code>displayState</code> property to full-screen mode, as
	 * shown in the code examples.</p>
	 *
	 * <p>To enable scaling, set the <code>fullScreenSourceRect</code> property
	 * to a rectangle object:</p>
	 *
	 * <p>The end user also can select within Flash Player Display Settings to
	 * turn off hardware scaling, which is enabled by default. For more
	 * information, see <a href="http://www.adobe.com/go/display_settings"
	 * scope="external">www.adobe.com/go/display_settings</a>.</p>]]></haxe_doc>
		</fullScreenSourceRect>
		<fullScreenWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* Returns the width of the monitor that will be used when going to full
	 * screen size, if that state is entered immediately. If the user has
	 * multiple monitors, the monitor that's used is the monitor that most of the
	 * stage is on at the time.
	 *
	 * <p><b>Note</b>: If the user has the opportunity to move the browser from
	 * one monitor to another between retrieving the value and going to full
	 * screen size, the value could be incorrect. If you retrieve the value in an
	 * event handler that sets <code>Stage.displayState</code> to
	 * <code>StageDisplayState.FULL_SCREEN</code>, the value will be correct.</p>
	 *
	 * <p>This is the pixel width of the monitor and is the same as the stage
	 * width would be if <code>Stage.align</code> is set to
	 * <code>StageAlign.TOP_LEFT</code> and <code>Stage.scaleMode</code> is set
	 * to <code>StageScaleMode.NO_SCALE</code>.</p>]]></haxe_doc>
		</fullScreenWidth>
		<quality public="1">
			<e path="flash.display.StageQuality"/>
			<haxe_doc><![CDATA[* A value from the StageQuality class that specifies which rendering quality
	 * is used. The following are valid values:
	 * <ul>
	 *   <li><code>StageQuality.LOW</code> - Low rendering quality. Graphics are
	 * not anti-aliased, and bitmaps are not smoothed, but runtimes still use
	 * mip-mapping.</li>
	 *   <li><code>StageQuality.MEDIUM</code> - Medium rendering quality.
	 * Graphics are anti-aliased using a 2 x 2 pixel grid, bitmap smoothing is
	 * dependent on the <code>Bitmap.smoothing</code> setting. Runtimes use
	 * mip-mapping. This setting is suitable for movies that do not contain
	 * text.</li>
	 *   <li><code>StageQuality.HIGH</code> - High rendering quality. Graphics
	 * are anti-aliased using a 4 x 4 pixel grid, and bitmap smoothing is
	 * dependent on the <code>Bitmap.smoothing</code> setting. Runtimes use
	 * mip-mapping. This is the default rendering quality setting that Flash
	 * Player uses.</li>
	 *   <li><code>StageQuality.BEST</code> - Very high rendering quality.
	 * Graphics are anti-aliased using a 4 x 4 pixel grid. If
	 * <code>Bitmap.smoothing</code> is <code>true</code> the runtime uses a high
	 * quality downscale algorithm that produces fewer artifacts(however, using
	 * <code>StageQuality.BEST</code> with <code>Bitmap.smoothing</code> set to
	 * <code>true</code> slows performance significantly and is not a recommended
	 * setting).</li>
	 * </ul>
	 *
	 * <p>Higher quality settings produce better rendering of scaled bitmaps.
	 * However, higher quality settings are computationally more expensive. In
	 * particular, when rendering scaled video, using higher quality settings can
	 * reduce the frame rate. </p>
	 *
	 * <p>In the desktop profile of Adobe AIR, <code>quality</code> can be set to
	 * <code>StageQuality.BEST</code> or <code>StageQuality.HIGH</code>(and the
	 * default value is <code>StageQuality.HIGH</code>). Attempting to set it to
	 * another value has no effect(and the property remains unchanged). In the
	 * moble profile of AIR, all four quality settings are available. The default
	 * value on mobile devices is <code>StageQuality.MEDIUM</code>.</p>
	 *
	 * <p>For content running in Adobe AIR, setting the <code>quality</code>
	 * property of one Stage object changes the rendering quality for all Stage
	 * objects(used by different NativeWindow objects). </p>
	 * <b><i>Note:</i></b> The operating system draws the device fonts, which are
	 * therefore unaffected by the <code>quality</code> property.
	 * 
	 * @throws SecurityError Calling the <code>quality</code> property of a Stage
	 *                       object throws an exception for any caller that is
	 *                       not in the same security sandbox as the Stage owner
	 *                      (the main SWF file). To avoid this, the Stage owner
	 *                       can grant permission to the domain of the caller by
	 *                       calling the <code>Security.allowDomain()</code>
	 *                       method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</quality>
		<scaleMode public="1">
			<e path="flash.display.StageScaleMode"/>
			<haxe_doc><![CDATA[* A value from the StageScaleMode class that specifies which scale mode to
	 * use. The following are valid values:
	 * <ul>
	 *   <li><code>StageScaleMode.EXACT_FIT</code> - The entire application is
	 * visible in the specified area without trying to preserve the original
	 * aspect ratio. Distortion can occur, and the application may appear
	 * stretched or compressed. </li>
	 *   <li><code>StageScaleMode.SHOW_ALL</code> - The entire application is
	 * visible in the specified area without distortion while maintaining the
	 * original aspect ratio of the application. Borders can appear on two sides
	 * of the application. </li>
	 *   <li><code>StageScaleMode.NO_BORDER</code> - The entire application fills
	 * the specified area, without distortion but possibly with some cropping,
	 * while maintaining the original aspect ratio of the application. </li>
	 *   <li><code>StageScaleMode.NO_SCALE</code> - The entire application is
	 * fixed, so that it remains unchanged even as the size of the player window
	 * changes. Cropping might occur if the player window is smaller than the
	 * content. </li>
	 * </ul>
	 * 
	 * @throws SecurityError Calling the <code>scaleMode</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner(the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</scaleMode>
		<showDefaultContextMenu public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to show or hide the default items in the Flash runtime
	 * context menu.
	 *
	 * <p>If the <code>showDefaultContextMenu</code> property is set to
	 * <code>true</code>(the default), all context menu items appear. If the
	 * <code>showDefaultContextMenu</code> property is set to <code>false</code>,
	 * only the Settings and About... menu items appear.</p>
	 * 
	 * @throws SecurityError Calling the <code>showDefaultContextMenu</code>
	 *                       property of a Stage object throws an exception for
	 *                       any caller that is not in the same security sandbox
	 *                       as the Stage owner(the main SWF file). To avoid
	 *                       this, the Stage owner can grant permission to the
	 *                       domain of the caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</showDefaultContextMenu>
		<stageFocusRect public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether or not objects display a glowing border when they have
	 * focus.
	 * 
	 * @throws SecurityError Calling the <code>stageFocusRect</code> property of
	 *                       a Stage object throws an exception for any caller
	 *                       that is not in the same security sandbox as the
	 *                       Stage owner(the main SWF file). To avoid this, the
	 *                       Stage owner can grant permission to the domain of
	 *                       the caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</stageFocusRect>
		<stageHeight public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The current height, in pixels, of the Stage.
	 *
	 * <p>If the value of the <code>Stage.scaleMode</code> property is set to
	 * <code>StageScaleMode.NO_SCALE</code> when the user resizes the window, the
	 * Stage content maintains its size while the <code>stageHeight</code>
	 * property changes to reflect the new height size of the screen area
	 * occupied by the SWF file.(In the other scale modes, the
	 * <code>stageHeight</code> property always reflects the original height of
	 * the SWF file.) You can add an event listener for the <code>resize</code>
	 * event and then use the <code>stageHeight</code> property of the Stage
	 * class to determine the actual pixel dimension of the resized Flash runtime
	 * window. The event listener allows you to control how the screen content
	 * adjusts when the user resizes the window.</p>
	 *
	 * <p>Air for TV devices have slightly different behavior than desktop
	 * devices when you set the <code>stageHeight</code> property. If the
	 * <code>Stage.scaleMode</code> property is set to
	 * <code>StageScaleMode.NO_SCALE</code> and you set the
	 * <code>stageHeight</code> property, the stage height does not change until
	 * the next frame of the SWF.</p>
	 *
	 * <p><b>Note:</b> In an HTML page hosting the SWF file, both the
	 * <code>object</code> and <code>embed</code> tags' <code>height</code>
	 * attributes must be set to a percentage(such as <code>100%</code>), not
	 * pixels. If the settings are generated by JavaScript code, the
	 * <code>height</code> parameter of the <code>AC_FL_RunContent() </code>
	 * method must be set to a percentage, too. This percentage is applied to the
	 * <code>stageHeight</code> value.</p>
	 * 
	 * @throws SecurityError Calling the <code>stageHeight</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner(the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</stageHeight>
		<stageWidth public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* A list of StageVideo objects available for playing external videos.
	 *
	 * <p>You can use only a limited number of StageVideo objects at a time. When
	 * a SWF begins to run, the number of available StageVideo objects depends on
	 * the platform and on available hardware. </p>
	 *
	 * <p>To use a StageVideo object, assign a member of the
	 * <code>stageVideos</code> Vector object to a StageVideo variable. </p>
	 *
	 * <p>All StageVideo objects are displayed on the stage behind any display
	 * objects. The StageVideo objects are displayed on the stage in the order
	 * they appear in the <code>stageVideos</code> Vector object. For example, if
	 * the <code>stageVideos</code> Vector object contains three entries:</p>
	 *
	 * <ol>
	 *   <li>The StageVideo object in the 0 index of the <code>stageVideos</code>
	 * Vector object is displayed behind all StageVideo objects.</li>
	 *   <li>The StageVideo object at index 1 is displayed in front of the
	 * StageVideo object at index 0.</li>
	 *   <li>The StageVideo object at index 2 is displayed in front of the
	 * StageVideo object at index 1.</li>
	 * </ol>
	 *
	 * <p>Use the <code>StageVideo.depth</code> property to change this
	 * ordering.</p>
	 *
	 * <p><b>Note:</b> AIR for TV devices support only one StageVideo object.</p>]]></haxe_doc>
		</stageWidth>
		<invalidate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Calling the <code>invalidate()</code> method signals Flash runtimes to
	 * alert display objects on the next opportunity it has to render the display
	 * list(for example, when the playhead advances to a new frame). After you
	 * call the <code>invalidate()</code> method, when the display list is next
	 * rendered, the Flash runtime sends a <code>render</code> event to each
	 * display object that has registered to listen for the <code>render</code>
	 * event. You must call the <code>invalidate()</code> method each time you
	 * want the Flash runtime to send <code>render</code> events.
	 *
	 * <p>The <code>render</code> event gives you an opportunity to make changes
	 * to the display list immediately before it is actually rendered. This lets
	 * you defer updates to the display list until the latest opportunity. This
	 * can increase performance by eliminating unnecessary screen updates.</p>
	 *
	 * <p>The <code>render</code> event is dispatched only to display objects
	 * that are in the same security domain as the code that calls the
	 * <code>stage.invalidate()</code> method, or to display objects from a
	 * security domain that has been granted permission via the
	 * <code>Security.allowDomain()</code> method.</p>
	 *]]></haxe_doc>
		</invalidate>
		<isFocusInaccessible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[* Determines whether the <code>Stage.focus</code> property returns
	 * <code>null</code> for security reasons. In other words,
	 * <code>isFocusInaccessible</code> returns <code>true</code> if the object
	 * that has focus belongs to a security sandbox to which the SWF file does
	 * not have access.
	 * 
	 * @return <code>true</code> if the object that has focus belongs to a
	 *         security sandbox to which the SWF file does not have access.]]></haxe_doc>
		</isFocusInaccessible>
		<haxe_doc><![CDATA[* The Stage class represents the main drawing area.
 *
 * <p>For SWF content running in the browser(in Flash<sup>®</sup> Player),
 * the Stage represents the entire area where Flash content is shown. For
 * content running in AIR on desktop operating systems, each NativeWindow
 * object has a corresponding Stage object.</p>
 *
 * <p>The Stage object is not globally accessible. You need to access it
 * through the <code>stage</code> property of a DisplayObject instance.</p>
 *
 * <p>The Stage class has several ancestor classes  -  DisplayObjectContainer,
 * InteractiveObject, DisplayObject, and EventDispatcher  -  from which it
 * inherits properties and methods. Many of these properties and methods are
 * either inapplicable to Stage objects, or require security checks when
 * called on a Stage object. The properties and methods that require security
 * checks are documented as part of the Stage class.</p>
 *
 * <p>In addition, the following inherited properties are inapplicable to
 * Stage objects. If you try to set them, an IllegalOperationError is thrown.
 * These properties may always be read, but since they cannot be set, they
 * will always contain default values.</p>
 *
 * <ul>
 *   <li><code>accessibilityProperties</code></li>
 *   <li><code>alpha</code></li>
 *   <li><code>blendMode</code></li>
 *   <li><code>cacheAsBitmap</code></li>
 *   <li><code>contextMenu</code></li>
 *   <li><code>filters</code></li>
 *   <li><code>focusRect</code></li>
 *   <li><code>loaderInfo</code></li>
 *   <li><code>mask</code></li>
 *   <li><code>mouseEnabled</code></li>
 *   <li><code>name</code></li>
 *   <li><code>opaqueBackground</code></li>
 *   <li><code>rotation</code></li>
 *   <li><code>scale9Grid</code></li>
 *   <li><code>scaleX</code></li>
 *   <li><code>scaleY</code></li>
 *   <li><code>scrollRect</code></li>
 *   <li><code>tabEnabled</code></li>
 *   <li><code>tabIndex</code></li>
 *   <li><code>transform</code></li>
 *   <li><code>visible</code></li>
 *   <li><code>x</code></li>
 *   <li><code>y</code></li>
 * </ul>
 *
 * <p>Some events that you might expect to be a part of the Stage class, such
 * as <code>enterFrame</code>, <code>exitFrame</code>,
 * <code>frameConstructed</code>, and <code>render</code>, cannot be Stage
 * events because a reference to the Stage object cannot be guaranteed to
 * exist in every situation where these events are used. Because these events
 * cannot be dispatched by the Stage object, they are instead dispatched by
 * every DisplayObject instance, which means that you can add an event
 * listener to any DisplayObject instance to listen for these events. These
 * events, which are part of the DisplayObject class, are called broadcast
 * events to differentiate them from events that target a specific
 * DisplayObject instance. Two other broadcast events, <code>activate</code>
 * and <code>deactivate</code>, belong to DisplayObject's superclass,
 * EventDispatcher. The <code>activate</code> and <code>deactivate</code>
 * events behave similarly to the DisplayObject broadcast events, except that
 * these two events are dispatched not only by all DisplayObject instances,
 * but also by all EventDispatcher instances and instances of other
 * EventDispatcher subclasses. For more information on broadcast events, see
 * the DisplayObject class.</p>
 * 
 * @event fullScreen             Dispatched when the Stage object enters, or
 *                               leaves, full-screen mode. A change in
 *                               full-screen mode can be initiated through
 *                               ActionScript, or the user invoking a keyboard
 *                               shortcut, or if the current focus leaves the
 *                               full-screen window.
 * @event mouseLeave             Dispatched by the Stage object when the
 *                               pointer moves out of the stage area. If the
 *                               mouse button is pressed, the event is not
 *                               dispatched.
 * @event orientationChange      Dispatched by the Stage object when the stage
 *                               orientation changes.
 *
 *                               <p>Orientation changes can occur when the
 *                               user rotates the device, opens a slide-out
 *                               keyboard, or when the
 *                               <code>setAspectRatio()</code> is called.</p>
 *
 *                               <p><b>Note:</b> If the
 *                               <code>autoOrients</code> property is
 *                               <code>false</code>, then the stage
 *                               orientation does not change when a device is
 *                               rotated. Thus, StageOrientationEvents are
 *                               only dispatched for device rotation when
 *                               <code>autoOrients</code> is
 *                               <code>true</code>.</p>
 * @event orientationChanging    Dispatched by the Stage object when the stage
 *                               orientation begins changing.
 *
 *                               <p><b>Important:</b> orientationChanging
 *                               events are not dispatched on Android
 *                               devices.</p>
 *
 *                               <p><b>Note:</b> If the
 *                               <code>autoOrients</code> property is
 *                               <code>false</code>, then the stage
 *                               orientation does not change when a device is
 *                               rotated. Thus, StageOrientationEvents are
 *                               only dispatched for device rotation when
 *                               <code>autoOrients</code> is
 *                               <code>true</code>.</p>
 * @event resize                 Dispatched when the <code>scaleMode</code>
 *                               property of the Stage object is set to
 *                               <code>StageScaleMode.NO_SCALE</code> and the
 *                               SWF file is resized.
 * @event stageVideoAvailability Dispatched by the Stage object when the state
 *                               of the stageVideos property changes.]]></haxe_doc>
	</class>
	<enum path="flash.display.StageAlign" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/StageAlign.hx">
		<BOTTOM><haxe_doc>* Specifies that the Stage is aligned at the bottom.</haxe_doc></BOTTOM>
		<BOTTOM_LEFT><haxe_doc>* Specifies that the Stage is aligned on the left.</haxe_doc></BOTTOM_LEFT>
		<BOTTOM_RIGHT><haxe_doc>* Specifies that the Stage is aligned to the right.</haxe_doc></BOTTOM_RIGHT>
		<LEFT><haxe_doc>* Specifies that the Stage is aligned on the left.</haxe_doc></LEFT>
		<RIGHT><haxe_doc>* Specifies that the Stage is aligned to the right.</haxe_doc></RIGHT>
		<TOP><haxe_doc>* Specifies that the Stage is aligned at the top.</haxe_doc></TOP>
		<TOP_LEFT><haxe_doc>* Specifies that the Stage is aligned on the left.</haxe_doc></TOP_LEFT>
		<TOP_RIGHT><haxe_doc>* Specifies that the Stage is aligned to the right.</haxe_doc></TOP_RIGHT>
		<haxe_doc><![CDATA[* The StageAlign class provides constant values to use for the
 * <code>Stage.align</code> property.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL><haxe_doc>* Specifies that the Stage is in normal mode.</haxe_doc></NORMAL>
		<haxe_doc><![CDATA[* The StageDisplayState class provides values for the
 * <code>Stage.displayState</code> property.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/StageQuality.hx">
		<BEST><haxe_doc>* Specifies very high rendering quality: graphics are anti-aliased using a 4
	 * x 4 pixel grid and bitmaps are always smoothed.</haxe_doc></BEST>
		<HIGH><haxe_doc>* Specifies high rendering quality: graphics are anti-aliased using a 4 x 4
	 * pixel grid, and bitmaps are smoothed if the movie is static.</haxe_doc></HIGH>
		<LOW><haxe_doc>* Specifies low rendering quality: graphics are not anti-aliased, and
	 * bitmaps are not smoothed.</haxe_doc></LOW>
		<MEDIUM><haxe_doc>* Specifies medium rendering quality: graphics are anti-aliased using a 2 x
	 * 2 pixel grid, but bitmaps are not smoothed. This setting is suitable for
	 * movies that do not contain text.</haxe_doc></MEDIUM>
		<haxe_doc><![CDATA[* The StageQuality class provides values for the <code>Stage.quality</code>
 * property.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<haxe_doc><![CDATA[* The StageScaleMode class provides values for the
 * <code>Stage.scaleMode</code> property.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/display/TriangleCulling.hx">
		<NEGATIVE><haxe_doc>* Specifies culling of all triangles facing toward the current view point.</haxe_doc></NEGATIVE>
		<NONE><haxe_doc>* Specifies no culling. All triangles in the path are rendered.</haxe_doc></NONE>
		<POSITIVE><haxe_doc>* Specifies culling of all triangles facing away from the current view
	 * point. This is also known as backface culling.</haxe_doc></POSITIVE>
		<haxe_doc><![CDATA[* Defines codes for culling algorithms that determine which triangles not to
 * render when drawing triangle paths.
 *
 * <p> The terms <code>POSITIVE</code> and <code>NEGATIVE</code> refer to the
 * sign of a triangle's normal along the z-axis. The normal is a 3D vector
 * that is perpendicular to the surface of the triangle. </p>
 *
 * <p> A triangle whose vertices 0, 1, and 2 are arranged in a clockwise order
 * has a positive normal value. That is, its normal points in a positive
 * z-axis direction, away from the current view point. When the
 * <code>TriangleCulling.POSITIVE</code> algorithm is used, triangles with
 * positive normals are not rendered. Another term for this is backface
 * culling. </p>
 *
 * <p> A triangle whose vertices are arranged in a counter-clockwise order has
 * a negative normal value. That is, its normal points in a negative z-axis
 * direction, toward the current view point. When the
 * <code>TriangleCulling.NEGATIVE</code> algorithm is used, triangles with
 * negative normals will not be rendered. </p>]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.errors.Error" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/errors/Error.hx" extern="1">
		<length public="1" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="Int"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.Event" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>ACTIVATE</code> constant defines the value of the
	 * <code>type</code> property of an <code>activate</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>AIR for TV devices never automatically dispatch this event. You can,
	 * however, dispatch it manually.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ACTIVATE>
		<ADDED public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ADDED</code> constant defines the value of the
	 * <code>type</code> property of an <code>added</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ADDED>
		<ADDED_TO_STAGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ADDED_TO_STAGE</code> constant defines the value of the
	 * <code>type</code> property of an <code>addedToStage</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ADDED_TO_STAGE>
		<CANCEL public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CANCEL</code> constant defines the value of the
	 * <code>type</code> property of a <code>cancel</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CANCEL>
		<CHANNEL_MESSAGE public="1" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" static="1"><c path="String"/></CHANNEL_STATE>
		<CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CHANGE</code> constant defines the value of the
	 * <code>type</code> property of a <code>change</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CHANGE>
		<CLOSE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CLOSE</code> constant defines the value of the
	 * <code>type</code> property of a <code>close</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CLOSE>
		<COMPLETE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.COMPLETE</code> constant defines the value of the
	 * <code>type</code> property of a <code>complete</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</COMPLETE>
		<CONNECT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CONNECT</code> constant defines the value of the
	 * <code>type</code> property of a <code>connect</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CONNECT>
		<DEACTIVATE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.DEACTIVATE</code> constant defines the value of the
	 * <code>type</code> property of a <code>deactivate</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>AIR for TV devices never automatically dispatch this event. You can,
	 * however, dispatch it manually.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</DEACTIVATE>
		<ENTER_FRAME public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ENTER_FRAME</code> constant defines the value of the
	 * <code>type</code> property of an <code>enterFrame</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ENTER_FRAME>
		<FULLSCREEN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.FULL_SCREEN</code> constant defines the value of the
	 * <code>type</code> property of a <code>fullScreen</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</FULLSCREEN>
		<ID3 public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ID3</code> constant defines the value of the
	 * <code>type</code> property of an <code>id3</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ID3>
		<INIT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.INIT</code> constant defines the value of the
	 * <code>type</code> property of an <code>init</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</INIT>
		<MOUSE_LEAVE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.MOUSE_LEAVE</code> constant defines the value of the
	 * <code>type</code> property of a <code>mouseLeave</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_LEAVE>
		<OPEN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.OPEN</code> constant defines the value of the
	 * <code>type</code> property of an <code>open</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</OPEN>
		<REMOVED public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.REMOVED</code> constant defines the value of the
	 * <code>type</code> property of a <code>removed</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.REMOVED_FROM_STAGE</code> constant defines the value of
	 * the <code>type</code> property of a <code>removedFromStage</code> event
	 * object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</REMOVED_FROM_STAGE>
		<RENDER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.RENDER</code> constant defines the value of the
	 * <code>type</code> property of a <code>render</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</RENDER>
		<RESIZE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.RESIZE</code> constant defines the value of the
	 * <code>type</code> property of a <code>resize</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</RESIZE>
		<SCROLL public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.SCROLL</code> constant defines the value of the
	 * <code>type</code> property of a <code>scroll</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SCROLL>
		<SELECT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.SELECT</code> constant defines the value of the
	 * <code>type</code> property of a <code>select</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SELECT>
		<SOUND_COMPLETE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.SOUND_COMPLETE</code> constant defines the value of the
	 * <code>type</code> property of a <code>soundComplete</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.TAB_CHILDREN_CHANGE</code> constant defines the value of
	 * the <code>type</code> property of a <code>tabChildrenChange</code> event
	 * object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.TAB_ENABLED_CHANGE</code> constant defines the value of
	 * the <code>type</code> property of a <code>tabEnabledChange</code> event
	 * object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.TAB_INDEX_CHANGE</code> constant defines the value of the
	 * <code>type</code> property of a <code>tabIndexChange</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TAB_INDEX_CHANGE>
		<UNLOAD public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.UNLOAD</code> constant defines the value of the
	 * <code>type</code> property of an <code>unload</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</UNLOAD>
		<VIDEO_FRAME public="1" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether an event is a bubbling event. If the event can bubble,
	 * this value is <code>true</code>; otherwise it is <code>false</code>.
	 *
	 * <p>When an event occurs, it moves through the three phases of the event
	 * flow: the capture phase, which flows from the top of the display list
	 * hierarchy to the node just before the target node; the target phase, which
	 * comprises the target node; and the bubbling phase, which flows from the
	 * node subsequent to the target node back up the display list hierarchy.</p>
	 *
	 * <p>Some events, such as the <code>activate</code> and <code>unload</code>
	 * events, do not have a bubbling phase. The <code>bubbles</code> property
	 * has a value of <code>false</code> for events that do not have a bubbling
	 * phase.</p>]]></haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the behavior associated with the event can be prevented.
	 * If the behavior can be canceled, this value is <code>true</code>;
	 * otherwise it is <code>false</code>.]]></haxe_doc>
		</cancelable>
		<currentTarget public="1" set="null">
			<d/>
			<haxe_doc>* The object that is actively processing the Event object with an event
	 * listener. For example, if a user clicks an OK button, the current target
	 * could be the node containing that button or one of its ancestors that has
	 * registered an event listener for that event.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<e path="flash.events.EventPhase"/>
			<haxe_doc><![CDATA[* The current phase in the event flow. This property can contain the
	 * following numeric values:
	 * <ul>
	 *   <li> The capture phase(<code>EventPhase.CAPTURING_PHASE</code>).</li>
	 *   <li> The target phase(<code>EventPhase.AT_TARGET</code>).</li>
	 *   <li> The bubbling phase(<code>EventPhase.BUBBLING_PHASE</code>).</li>
	 * </ul>]]></haxe_doc>
		</eventPhase>
		<target public="1" set="null">
			<d/>
			<haxe_doc>* The event target. This property contains the target node. For example, if
	 * a user clicks an OK button, the target node is the display list node
	 * containing that button.</haxe_doc>
		</target>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The type of event. The type is case-sensitive.</haxe_doc>
		</type>
		<clone public="1" set="method">
			<f a=""><c path="flash.events.Event"/></f>
			<haxe_doc><![CDATA[* Duplicates an instance of an Event subclass.
	 *
	 * <p>Returns a new Event object that is a copy of the original instance of
	 * the Event object. You do not normally call <code>clone()</code>; the
	 * EventDispatcher class calls it automatically when you redispatch an
	 * event - that is, when you call <code>dispatchEvent(event)</code> from a
	 * handler that is handling <code>event</code>.</p>
	 *
	 * <p>The new Event object includes all the properties of the original.</p>
	 *
	 * <p>When creating your own custom Event class, you must override the
	 * inherited <code>Event.clone()</code> method in order for it to duplicate
	 * the properties of your custom class. If you do not set all the properties
	 * that you add in your event subclass, those properties will not have the
	 * correct values when listeners handle the redispatched event.</p>
	 *
	 * <p>In this example, <code>PingEvent</code> is a subclass of
	 * <code>Event</code> and therefore implements its own version of
	 * <code>clone()</code>.</p>
	 * 
	 * @return A new Event object that is identical to the original.]]></haxe_doc>
		</clone>
		<formatToString public="1" set="method">
			<f a="className:?p1:?p2:?p3:?p4:?p5">
				<c path="String"/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* A utility function for implementing the <code>toString()</code> method in
	 * custom ActionScript 3.0 Event classes. Overriding the
	 * <code>toString()</code> method is recommended, but not required. <pre
	 * xml:space="preserve"> class PingEvent extends Event { var URL:String;
	 * public override function toString():String { return
	 * formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase",
	 * "URL"); } } </pre>
	 * 
	 * @param className The name of your custom Event class. In the previous
	 *                  example, the <code>className</code> parameter is
	 *                  <code>PingEvent</code>.
	 * @return The name of your custom Event class and the String value of your
	 *         <code>...arguments</code> parameter.]]></haxe_doc>
		</formatToString>
		<isDefaultPrevented public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[* Checks whether the <code>preventDefault()</code> method has been called on
	 * the event. If the <code>preventDefault()</code> method has been called,
	 * returns <code>true</code>; otherwise, returns <code>false</code>.
	 * 
	 * @return If <code>preventDefault()</code> has been called, returns
	 *         <code>true</code>; otherwise, returns <code>false</code>.]]></haxe_doc>
		</isDefaultPrevented>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Cancels an event's default behavior if that behavior can be canceled.
	 *
	 * <p>Many events have associated behaviors that are carried out by default.
	 * For example, if a user types a character into a text field, the default
	 * behavior is that the character is displayed in the text field. Because the
	 * <code>TextEvent.TEXT_INPUT</code> event's default behavior can be
	 * canceled, you can use the <code>preventDefault()</code> method to prevent
	 * the character from appearing. </p>
	 *
	 * <p>An example of a behavior that is not cancelable is the default behavior
	 * associated with the <code>Event.REMOVED</code> event, which is generated
	 * whenever Flash Player is about to remove a display object from the display
	 * list. The default behavior(removing the element) cannot be canceled, so
	 * the <code>preventDefault()</code> method has no effect on this default
	 * behavior. </p>
	 *
	 * <p>You can use the <code>Event.cancelable</code> property to check whether
	 * you can prevent the default behavior associated with a particular event.
	 * If the value of <code>Event.cancelable</code> is <code>true</code>, then
	 * <code>preventDefault()</code> can be used to cancel the event; otherwise,
	 * <code>preventDefault()</code> has no effect.</p>
	 *]]></haxe_doc>
		</preventDefault>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Prevents processing of any event listeners in the current node and any
	 * subsequent nodes in the event flow. This method takes effect immediately,
	 * and it affects event listeners in the current node. In contrast, the
	 * <code>stopPropagation()</code> method doesn't take effect until all the
	 * event listeners in the current node finish processing.
	 *
	 * <p><b>Note: </b> This method does not cancel the behavior associated with
	 * this event; see <code>preventDefault()</code> for that functionality.</p>
	 *]]></haxe_doc>
		</stopImmediatePropagation>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Prevents processing of any event listeners in nodes subsequent to the
	 * current node in the event flow. This method does not affect any event
	 * listeners in the current node(<code>currentTarget</code>). In contrast,
	 * the <code>stopImmediatePropagation()</code> method prevents processing of
	 * event listeners in both the current node and subsequent nodes. Additional
	 * calls to this method have no effect. This method can be called in any
	 * phase of the event flow.
	 *
	 * <p><b>Note: </b> This method does not cancel the behavior associated with
	 * this event; see <code>preventDefault()</code> for that functionality.</p>
	 *]]></haxe_doc>
		</stopPropagation>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a string containing all the properties of the Event object. The
	 * string is in the following format:
	 *
	 * <p><code>[Event type=<i>value</i> bubbles=<i>value</i>
	 * cancelable=<i>value</i>]</code></p>
	 * 
	 * @return A string containing all the properties of the Event object.]]></haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object to pass as a parameter to event listeners.
	 * 
	 * @param type       The type of the event, accessible as
	 *                   <code>Event.type</code>.
	 * @param bubbles    Determines whether the Event object participates in the
	 *                   bubbling stage of the event flow. The default value is
	 *                   <code>false</code>.
	 * @param cancelable Determines whether the Event object can be canceled. The
	 *                   default values is <code>false</code>.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Event class is used as the base class for the creation of Event
 * objects, which are passed as parameters to event listeners when an event
 * occurs.
 *
 * <p>The properties of the Event class carry basic information about an
 * event, such as the event's type or whether the event's default behavior can
 * be canceled. For many events, such as the events represented by the Event
 * class constants, this basic information is sufficient. Other events,
 * however, may require more detailed information. Events associated with a
 * mouse click, for example, need to include additional information about the
 * location of the click event and whether any keys were pressed during the
 * click event. You can pass such additional information to event listeners by
 * extending the Event class, which is what the MouseEvent class does.
 * ActionScript 3.0 API defines several Event subclasses for common events
 * that require additional information. Events associated with each of the
 * Event subclasses are described in the documentation for each class.</p>
 *
 * <p>The methods of the Event class can be used in event listener functions
 * to affect the behavior of the event object. Some events have an associated
 * default behavior. For example, the <code>doubleClick</code> event has an
 * associated default behavior that highlights the word under the mouse
 * pointer at the time of the event. Your event listener can cancel this
 * behavior by calling the <code>preventDefault()</code> method. You can also
 * make the current event listener the last one to process an event by calling
 * the <code>stopPropagation()</code> or
 * <code>stopImmediatePropagation()</code> method.</p>
 *
 * <p>Other sources of information include:</p>
 *
 * <ul>
 *   <li>A useful description about the timing of events, code execution, and
 * rendering at runtime in Ted Patrick's blog entry: <a
 * href="http://www.onflex.org/ted/2005/07/flash-player-mental-model-elastic.php"
 * scope="external">Flash Player Mental Model - The Elastic
 * Racetrack</a>.</li>
 *   <li>A blog entry by Johannes Tacskovics about the timing of frame events,
 * such as ENTER_FRAME, EXIT_FRAME: <a
 * href="http://blog.johannest.com/2009/06/15/the-movieclip-life-cycle-revisited-from-event-added-to-event-removed_from_stage/"
 * scope="external">The MovieClip Lifecycle</a>.</li>
 *   <li>An article by Trevor McCauley about the order of ActionScript
 * operations: <a
 * href="http://www.senocular.com/flash/tutorials/orderofoperations/"
 * scope="external">Order of Operations in ActionScript</a>.</li>
 *   <li>A blog entry by Matt Przybylski on creating custom events: <a
 * href="http://evolve.reintroducing.com/2007/10/23/as3/as3-custom-events/"
 * scope="external">AS3: Custom Events</a>.</li>
 * </ul>
 *]]></haxe_doc>
	</class>
	<enum path="flash.events.EventPhase" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<haxe_doc><![CDATA[* The EventPhase class provides values for the <code>eventPhase</code>
 * property of the Event class.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>Int</e></m>
		</meta>
	</enum>
	<class path="flash.external.ExternalInterface" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether this player is in a container that offers an external
	 * interface. If the external interface is available, this property is
	 * <code>true</code>; otherwise, it is <code>false</code>.
	 *
	 * <p><b>Note:</b> When using the External API with HTML, always check that
	 * the HTML has finished loading before you attempt to call any JavaScript
	 * methods.</p>]]></haxe_doc>
		</available>
		<marshallExceptions public="1" static="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the external interface should attempt to pass
	 * ActionScript exceptions to the current browser and JavaScript exceptions
	 * to the player. You must explicitly set this property to <code>true</code>
	 * to catch JavaScript exceptions in ActionScript and to catch ActionScript
	 * exceptions in JavaScript.]]></haxe_doc>
		</marshallExceptions>
		<objectID public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Returns the <code>id</code> attribute of the <code>object</code> tag in
	 * Internet Explorer, or the <code>name</code> attribute of the
	 * <code>embed</code> tag in Netscape.]]></haxe_doc>
		</objectID>
		<addCallback public="1" set="method" static="1">
			<f a="functionName:closure">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Registers an ActionScript method as callable from the container. After a
	 * successful invocation of <code>addCallBack()</code>, the registered
	 * function in the player can be called by JavaScript or ActiveX code in the
	 * container.
	 *
	 * <p><b>Note:</b> For <i>local</i> content running in a browser, calls to
	 * the <code>ExternalInterface.addCallback()</code> method work only if the
	 * SWF file and the containing web page are in the local-trusted security
	 * sandbox. For more information, see the Flash Player Developer Center
	 * Topic: <a href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param functionName The name by which the container can invoke the
	 *                     function.
	 * @param closure      The function closure to invoke. This could be a
	 *                     free-standing function, or it could be a method
	 *                     closure referencing a method of an object instance. By
	 *                     passing a method closure, you can direct the callback
	 *                     at a method of a particular object instance.
	 *
	 *                     <p><b>Note:</b> Repeating <code>addCallback()</code>
	 *                     on an existing callback function with a
	 *                     <code>null</code> closure value removes the
	 *                     callback.</p>
	 * @throws Error         The container does not support incoming calls.
	 *                       Incoming calls are supported only in Internet
	 *                       Explorer for Windows and browsers that use the
	 *                       NPRuntime API such as Mozilla 1.7.5 and later or
	 *                       Firefox 1.0 and later.
	 * @throws SecurityError A callback with the specified name has already been
	 *                       added by ActionScript in a sandbox to which you do
	 *                       not have access; you cannot overwrite that callback.
	 *                       To work around this problem, rewrite the
	 *                       ActionScript that originally called the
	 *                       <code>addCallback()</code> method so that it also
	 *                       calls the <code>Security.allowDomain()</code>
	 *                       method.
	 * @throws SecurityError The containing environment belongs to a security
	 *                       sandbox to which the calling code does not have
	 *                       access. To fix this problem, follow these steps:
	 *                       <ol>
	 *                         <li>In the <code>object</code> tag for the SWF
	 *                       file in the containing HTML page, set the following
	 *                       parameter:
	 *
	 *                       <p><code><param name="allowScriptAccess"
	 *                       value="always" /></code></p>
	 *                       </li>
	 *                         <li>In the SWF file, add the following
	 *                       ActionScript:
	 *
	 *
	 *                       <p><code>flash.system.Security.allowDomain(<i>sourceDomain</i>)</code></p>
	 *                       </li>
	 *                       </ol>]]></haxe_doc>
		</addCallback>
		<call public="1" set="method" static="1">
			<f a="functionName:?p1:?p2:?p3:?p4:?p5">
				<c path="String"/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc><![CDATA[* Calls a function exposed by the SWF container, passing zero or more
	 * arguments. If the function is not available, the call returns
	 * <code>null</code>; otherwise it returns the value provided by the
	 * function. Recursion is <i>not</i> permitted on Opera or Netscape browsers;
	 * on these browsers a recursive call produces a <code>null</code> response.
	 * (Recursion is supported on Internet Explorer and Firefox browsers.)
	 *
	 * <p>If the container is an HTML page, this method invokes a JavaScript
	 * function in a <code>script</code> element.</p>
	 *
	 * <p>If the container is another ActiveX container, this method dispatches
	 * the FlashCall ActiveX event with the specified name, and the container
	 * processes the event.</p>
	 *
	 * <p>If the container is hosting the Netscape plug-in, you can either write
	 * custom support for the new NPRuntime interface or embed an HTML control
	 * and embed the player within the HTML control. If you embed an HTML
	 * control, you can communicate with the player through a JavaScript
	 * interface to the native container application.</p>
	 *
	 * <p><b>Note:</b> For <i>local</i> content running in a browser, calls to
	 * the <code>ExternalInterface.call()</code> method are permitted only if the
	 * SWF file and the containing web page(if there is one) are in the
	 * local-trusted security sandbox. Also, you can prevent a SWF file from
	 * using this method by setting the <code>allowNetworking</code> parameter of
	 * the <code>object</code> and <code>embed</code> tags in the HTML page that
	 * contains the SWF content. For more information, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 *
	 * <p><b>Note for Flash Player applications:</b> In Flash Player 10 and Flash
	 * Player 9 Update 5, some web browsers restrict this method if a pop-up
	 * blocker is enabled. In this scenario, you can only call this method
	 * successfully in response to a user event(for example, in an event handler
	 * for a mouse click or keypress event).</p>
	 * 
	 * @param functionName The alphanumeric name of the function to call in the
	 *                     container. Using a non-alphanumeric function name
	 *                     causes a runtime error(error 2155). You can use a
	 *                     <code>try..catch</code> block to handle the error.
	 * @return The response received from the container. If the call failed–
	 *         for example, if there is no such function in the container, the
	 *         interface is not available, a recursion occurred(with a Netscape
	 *         or Opera browser), or there is a security issue–
	 *         <code>null</code> is returned and an error is thrown.
	 * @throws Error         The container does not support outgoing calls.
	 *                       Outgoing calls are supported only in Internet
	 *                       Explorer for Windows and browsers that use the
	 *                       NPRuntime API such as Mozilla 1.7.5 and later or
	 *                       Firefox 1.0 and later.
	 * @throws SecurityError The containing environment belongs to a security
	 *                       sandbox to which the calling code does not have
	 *                       access. To fix this problem, follow these steps:
	 *                       <ol>
	 *                         <li>In the <code>object</code> tag for the SWF
	 *                       file in the containing HTML page, set the following
	 *                       parameter:
	 *
	 *                       <p><code><param name="allowScriptAccess"
	 *                       value="always" /></code></p>
	 *                       </li>
	 *                         <li>In the SWF file, add the following
	 *                       ActionScript:
	 *
	 *
	 *                       <p><code>flash.system.Security.allowDomain(<i>sourceDomain</i>)</code></p>
	 *                       </li>
	 *                       </ol>]]></haxe_doc>
		</call>
		<haxe_doc><![CDATA[* The ExternalInterface class is an application programming interface that
 * enables straightforward communication between ActionScript and the SWF
 * container– for example, an HTML page with JavaScript or a desktop
 * application that uses Flash Player to display a SWF file.
 *
 * <p>Using the ExternalInterface class, you can call an ActionScript function
 * in the Flash runtime, using JavaScript in the HTML page. The ActionScript
 * function can return a value, and JavaScript receives it immediately as the
 * return value of the call.</p>
 *
 * <p>This functionality replaces the <code>fscommand()</code> method.</p>
 *
 * <p>Use the ExternalInterface class in the following combinations of browser
 * and operating system:</p>
 *
 * <p>The ExternalInterface class requires the user's web browser to support
 * either ActiveX<sup>®</sup> or the NPRuntime API that is exposed by some
 * browsers for plug-in scripting. Even if a browser and operating system
 * combination are not listed above, they should support the ExternalInterface
 * class if they support the NPRuntime API. See <a
 * href="http://www.mozilla.org/projects/plugins/npruntime.html"
 * scope="external">http://www.mozilla.org/projects/plugins/npruntime.html</a>.</p>
 *
 * <p><b>Note:</b> When embedding SWF files within an HTML page, make sure
 * that the <code>id</code> attribute is set and the <code>id</code> and
 * <code>name</code> attributes of the <code>object</code> and
 * <code>embed</code> tags do not include the following characters:</p>
 * <pre xml:space="preserve"> . - + ~~ / \ </pre>
 *
 * <p><b>Note for Flash Player applications:</b> Flash Player version
 * 9.0.115.0 and later allows the <code>.</code>(period) character within the
 * <code>id</code> and <code>name</code> attributes.</p>
 *
 * <p><b>Note for Flash Player applications:</b> In Flash Player 10 and later
 * running in a browser, using this class programmatically to open a pop-up
 * window may not be successful. Various browsers(and browser configurations)
 * may block pop-up windows at any time; it is not possible to guarantee any
 * pop-up window will appear. However, for the best chance of success, use
 * this class to open a pop-up window only in code that executes as a direct
 * result of a user action(for example, in an event handler for a mouse click
 * or key-press event.)</p>
 *
 * <p>From ActionScript, you can do the following on the HTML page:
 * <ul>
 *   <li>Call any JavaScript function.</li>
 *   <li>Pass any number of arguments, with any names.</li>
 *   <li>Pass various data types(Boolean, Number, String, and so on).</li>
 *   <li>Receive a return value from the JavaScript function.</li>
 * </ul>
 * </p>
 *
 * <p>From JavaScript on the HTML page, you can:
 * <ul>
 *   <li>Call an ActionScript function.</li>
 *   <li>Pass arguments using standard function call notation.</li>
 *   <li>Return a value to the JavaScript function.</li>
 * </ul>
 * </p>
 *
 * <p><b>Note for Flash Player applications:</b> Flash Player does not
 * currently support SWF files embedded within HTML forms.</p>
 *
 * <p><b>Note for AIR applications:</b> In Adobe AIR, the ExternalInterface
 * class can be used to communicate between JavaScript in an HTML page loaded
 * in the HTMLLoader control and ActionScript in SWF content embedded in that
 * HTML page.</p>]]></haxe_doc>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method">
			<f a=""><c path="flash.filters.BitmapFilter"/></f>
			<haxe_doc>* Returns a BitmapFilter object that is an exact copy of the original
	 * BitmapFilter object.
	 * 
	 * @return A BitmapFilter object.</haxe_doc>
		</clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[* The BitmapFilter class is the base class for all image filter effects.
 *
 * <p>The BevelFilter, BlurFilter, ColorMatrixFilter, ConvolutionFilter,
 * DisplacementMapFilter, DropShadowFilter, GlowFilter, GradientBevelFilter,
 * and GradientGlowFilter classes all extend the BitmapFilter class. You can
 * apply these filter effects to any display object.</p>
 *
 * <p>You can neither directly instantiate nor extend BitmapFilter.</p>]]></haxe_doc>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* A decimal value that is multiplied with the alpha transparency channel
	 * value.
	 *
	 * <p>If you set the alpha transparency value of a display object directly by
	 * using the <code>alpha</code> property of the DisplayObject instance, it
	 * affects the value of the <code>alphaMultiplier</code> property of that
	 * display object's <code>transform.colorTransform</code> property.</p>]]></haxe_doc>
		</alphaMultiplier>
		<alphaOffset public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the alpha transparency channel
	 * value after it has been multiplied by the <code>alphaMultiplier</code>
	 * value.]]></haxe_doc>
		</alphaOffset>
		<blueMultiplier public="1">
			<x path="Float"/>
			<haxe_doc>* A decimal value that is multiplied with the blue channel value.</haxe_doc>
		</blueMultiplier>
		<blueOffset public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the blue channel value after it
	 * has been multiplied by the <code>blueMultiplier</code> value.]]></haxe_doc>
		</blueOffset>
		<color public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The RGB color value for a ColorTransform object.
	 *
	 * <p>When you set this property, it changes the three color offset values
	 * (<code>redOffset</code>, <code>greenOffset</code>, and
	 * <code>blueOffset</code>) accordingly, and it sets the three color
	 * multiplier values(<code>redMultiplier</code>,
	 * <code>greenMultiplier</code>, and <code>blueMultiplier</code>) to 0. The
	 * alpha transparency multiplier and offset values do not change.</p>
	 *
	 * <p>When you pass a value for this property, use the format
	 * 0x<i>RRGGBB</i>. <i>RR</i>, <i>GG</i>, and <i>BB</i> each consist of two
	 * hexadecimal digits that specify the offset of each color component. The 0x
	 * tells the ActionScript compiler that the number is a hexadecimal
	 * value.</p>]]></haxe_doc>
		</color>
		<greenMultiplier public="1">
			<x path="Float"/>
			<haxe_doc>* A decimal value that is multiplied with the green channel value.</haxe_doc>
		</greenMultiplier>
		<greenOffset public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the green channel value after
	 * it has been multiplied by the <code>greenMultiplier</code> value.]]></haxe_doc>
		</greenOffset>
		<redMultiplier public="1">
			<x path="Float"/>
			<haxe_doc>* A decimal value that is multiplied with the red channel value.</haxe_doc>
		</redMultiplier>
		<redOffset public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the red channel value after it
	 * has been multiplied by the <code>redMultiplier</code> value.]]></haxe_doc>
		</redOffset>
		<concat public="1" set="method">
			<f a="second">
				<c path="flash.geom.ColorTransform"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Concatenates the ColorTranform object specified by the <code>second</code>
	 * parameter with the current ColorTransform object and sets the current
	 * object as the result, which is an additive combination of the two color
	 * transformations. When you apply the concatenated ColorTransform object,
	 * the effect is the same as applying the <code>second</code> color
	 * transformation after the <i>original</i> color transformation.
	 * 
	 * @param second The ColorTransform object to be combined with the current
	 *               ColorTransform object.]]></haxe_doc>
		</concat>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Formats and returns a string that describes all of the properties of the
	 * ColorTransform object.
	 * 
	 * @return A string that lists all of the properties of the ColorTransform
	 *         object.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a ColorTransform object for a display object with the specified
	 * color channel values and alpha values.
	 * 
	 * @param redMultiplier   The value for the red multiplier, in the range from
	 *                        0 to 1.
	 * @param greenMultiplier The value for the green multiplier, in the range
	 *                        from 0 to 1.
	 * @param blueMultiplier  The value for the blue multiplier, in the range
	 *                        from 0 to 1.
	 * @param alphaMultiplier The value for the alpha transparency multiplier, in
	 *                        the range from 0 to 1.
	 * @param redOffset       The offset value for the red color channel, in the
	 *                        range from -255 to 255.
	 * @param greenOffset     The offset value for the green color channel, in
	 *                        the range from -255 to 255.
	 * @param blueOffset      The offset for the blue color channel value, in the
	 *                        range from -255 to 255.
	 * @param alphaOffset     The offset for alpha transparency channel value, in
	 *                        the range from -255 to 255.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The ColorTransform class lets you adjust the color values in a display
 * object. The color adjustment or <i>color transformation</i> can be applied
 * to all four channels: red, green, blue, and alpha transparency.
 *
 * <p>When a ColorTransform object is applied to a display object, a new value
 * for each color channel is calculated like this:</p>
 *
 * <ul>
 *   <li>New red value = (old red value * <code>redMultiplier</code>) +
 * <code>redOffset</code></li>
 *   <li>New green value = (old green value * <code>greenMultiplier</code>) +
 * <code>greenOffset</code></li>
 *   <li>New blue value = (old blue value * <code>blueMultiplier</code>) +
 * <code>blueOffset</code></li>
 *   <li>New alpha value = (old alpha value * <code>alphaMultiplier</code>) +
 * <code>alphaOffset</code></li>
 * </ul>
 *
 * <p>If any of the color channel values is greater than 255 after the
 * calculation, it is set to 255. If it is less than 0, it is set to 0.</p>
 *
 * <p>You can use ColorTransform objects in the following ways:</p>
 *
 * <ul>
 *   <li>In the <code>colorTransform</code> parameter of the
 * <code>colorTransform()</code> method of the BitmapData class</li>
 *   <li>As the <code>colorTransform</code> property of a Transform object
 * (which can be used as the <code>transform</code> property of a display
 * object)</li>
 * </ul>
 *
 * <p>You must use the <code>new ColorTransform()</code> constructor to create
 * a ColorTransform object before you can call the methods of the
 * ColorTransform object.</p>
 *
 * <p>Color transformations do not apply to the background color of a movie
 * clip(such as a loaded SWF object). They apply only to graphics and symbols
 * that are attached to the movie clip.</p>]]></haxe_doc>
	</class>
	<class path="flash.geom.Matrix" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>x</i> axis
	 * when scaling or rotating an image.]]></haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>y</i> axis
	 * when rotating or skewing an image.]]></haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>x</i> axis
	 * when rotating or skewing an image.]]></haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>y</i> axis
	 * when scaling or rotating an image.]]></haxe_doc>
		</d>
		<tx public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The distance by which to translate each point along the <i>x</i> axis.]]></haxe_doc>
		</tx>
		<ty public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The distance by which to translate each point along the <i>y</i> axis.]]></haxe_doc>
		</ty>
		<clone public="1" set="method">
			<f a=""><c path="flash.geom.Matrix"/></f>
			<haxe_doc>* Returns a new Matrix object that is a clone of this matrix, with an exact
	 * copy of the contained object.
	 * 
	 * @return A Matrix object.</haxe_doc>
		</clone>
		<concat public="1" set="method">
			<f a="m">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Concatenates a matrix with the current matrix, effectively combining the
	 * geometric effects of the two. In mathematical terms, concatenating two
	 * matrixes is the same as combining them using matrix multiplication.
	 *
	 * <p>For example, if matrix <code>m1</code> scales an object by a factor of
	 * four, and matrix <code>m2</code> rotates an object by 1.5707963267949
	 * radians(<code>Math.PI/2</code>), then <code>m1.concat(m2)</code>
	 * transforms <code>m1</code> into a matrix that scales an object by a factor
	 * of four and rotates the object by <code>Math.PI/2</code> radians. </p>
	 *
	 * <p>This method replaces the source matrix with the concatenated matrix. If
	 * you want to concatenate two matrixes without altering either of the two
	 * source matrixes, first copy the source matrix by using the
	 * <code>clone()</code> method, as shown in the Class Examples section.</p>
	 * 
	 * @param m The matrix to be concatenated to the source matrix.]]></haxe_doc>
		</concat>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Includes parameters for scaling, rotation, and translation. When applied
	 * to a matrix it sets the matrix's values based on those parameters.
	 *
	 * <p>Using the <code>createBox()</code> method lets you obtain the same
	 * matrix as you would if you applied the <code>identity()</code>,
	 * <code>rotate()</code>, <code>scale()</code>, and <code>translate()</code>
	 * methods in succession. For example, <code>mat1.createBox(2,2,Math.PI/4,
	 * 100, 100)</code> has the same effect as the following:</p>
	 * 
	 * @param scaleX   The factor by which to scale horizontally.
	 * @param scaleY   The factor by which scale vertically.
	 * @param rotation The amount to rotate, in radians.
	 * @param tx       The number of pixels to translate(move) to the right
	 *                 along the <i>x</i> axis.
	 * @param ty       The number of pixels to translate(move) down along the
	 *                 <i>y</i> axis.]]></haxe_doc>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates the specific style of matrix expected by the
	 * <code>beginGradientFill()</code> and <code>lineGradientStyle()</code>
	 * methods of the Graphics class. Width and height are scaled to a
	 * <code>scaleX</code>/<code>scaleY</code> pair and the
	 * <code>tx</code>/<code>ty</code> values are offset by half the width and
	 * height.
	 *
	 * <p>For example, consider a gradient with the following
	 * characteristics:</p>
	 *
	 * <ul>
	 *   <li><code>GradientType.LINEAR</code></li>
	 *   <li>Two colors, green and blue, with the ratios array set to <code>[0,
	 * 255]</code></li>
	 *   <li><code>SpreadMethod.PAD</code></li>
	 *   <li><code>InterpolationMethod.LINEAR_RGB</code></li>
	 * </ul>
	 *
	 * <p>The following illustrations show gradients in which the matrix was
	 * defined using the <code>createGradientBox()</code> method with different
	 * parameter settings:</p>
	 * 
	 * @param width    The width of the gradient box.
	 * @param height   The height of the gradient box.
	 * @param rotation The amount to rotate, in radians.
	 * @param tx       The distance, in pixels, to translate to the right along
	 *                 the <i>x</i> axis. This value is offset by half of the
	 *                 <code>width</code> parameter.
	 * @param ty       The distance, in pixels, to translate down along the
	 *                 <i>y</i> axis. This value is offset by half of the
	 *                 <code>height</code> parameter.]]></haxe_doc>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Given a point in the pretransform coordinate space, returns the
	 * coordinates of that point after the transformation occurs. Unlike the
	 * standard transformation applied using the <code>transformPoint()</code>
	 * method, the <code>deltaTransformPoint()</code> method's transformation
	 * does not consider the translation parameters <code>tx</code> and
	 * <code>ty</code>.
	 * 
	 * @param point The point for which you want to get the result of the matrix
	 *              transformation.
	 * @return The point resulting from applying the matrix transformation.]]></haxe_doc>
		</deltaTransformPoint>
		<identity public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Sets each matrix property to a value that causes a null transformation. An
	 * object transformed by applying an identity matrix will be identical to the
	 * original.
	 *
	 * <p>After calling the <code>identity()</code> method, the resulting matrix
	 * has the following properties: <code>a</code>=1, <code>b</code>=0,
	 * <code>c</code>=0, <code>d</code>=1, <code>tx</code>=0,
	 * <code>ty</code>=0.</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>
	 *]]></haxe_doc>
		</identity>
		<invert public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Performs the opposite transformation of the original matrix. You can apply
	 * an inverted matrix to an object to undo the transformation performed when
	 * applying the original matrix.
	 *</haxe_doc>
		</invert>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Applies a rotation transformation to the Matrix object.
	 *
	 * <p>The <code>rotate()</code> method alters the <code>a</code>,
	 * <code>b</code>, <code>c</code>, and <code>d</code> properties of the
	 * Matrix object. In matrix notation, this is the same as concatenating the
	 * current matrix with the following:</p>
	 * 
	 * @param angle The rotation angle in radians.]]></haxe_doc>
		</rotate>
		<scale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Applies a scaling transformation to the matrix. The <i>x</i> axis is
	 * multiplied by <code>sx</code>, and the <i>y</i> axis it is multiplied by
	 * <code>sy</code>.
	 *
	 * <p>The <code>scale()</code> method alters the <code>a</code> and
	 * <code>d</code> properties of the Matrix object. In matrix notation, this
	 * is the same as concatenating the current matrix with the following
	 * matrix:</p>
	 * 
	 * @param sx A multiplier used to scale the object along the <i>x</i> axis.
	 * @param sy A multiplier used to scale the object along the <i>y</i> axis.]]></haxe_doc>
		</scale>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a text value listing the properties of the Matrix object.
	 * 
	 * @return A string containing the values of the properties of the Matrix
	 *         object: <code>a</code>, <code>b</code>, <code>c</code>,
	 *         <code>d</code>, <code>tx</code>, and <code>ty</code>.]]></haxe_doc>
		</toString>
		<transformPoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc>* Returns the result of applying the geometric transformation represented by
	 * the Matrix object to the specified point.
	 * 
	 * @param point The point for which you want to get the result of the Matrix
	 *              transformation.
	 * @return The point resulting from applying the Matrix transformation.</haxe_doc>
		</transformPoint>
		<translate public="1" set="method">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Translates the matrix along the <i>x</i> and <i>y</i> axes, as specified
	 * by the <code>dx</code> and <code>dy</code> parameters.
	 * 
	 * @param dx The amount of movement along the <i>x</i> axis to the right, in
	 *           pixels.
	 * @param dy The amount of movement down along the <i>y</i> axis, in pixels.]]></haxe_doc>
		</translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Matrix object with the specified parameters. In matrix
	 * notation, the properties are organized like this:
	 *
	 * <p>If you do not provide any parameters to the <code>new Matrix()</code>
	 * constructor, it creates an <i>identity matrix</i> with the following
	 * values:</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>
	 * 
	 * @param a  The value that affects the positioning of pixels along the
	 *           <i>x</i> axis when scaling or rotating an image.
	 * @param b  The value that affects the positioning of pixels along the
	 *           <i>y</i> axis when rotating or skewing an image.
	 * @param c  The value that affects the positioning of pixels along the
	 *           <i>x</i> axis when rotating or skewing an image.
	 * @param d  The value that affects the positioning of pixels along the
	 *           <i>y</i> axis when scaling or rotating an image..
	 * @param tx The distance by which to translate each point along the <i>x</i>
	 *           axis.
	 * @param ty The distance by which to translate each point along the <i>y</i>
	 *           axis.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Matrix class represents a transformation matrix that determines how to
 * map points from one coordinate space to another. You can perform various
 * graphical transformations on a display object by setting the properties of
 * a Matrix object, applying that Matrix object to the <code>matrix</code>
 * property of a Transform object, and then applying that Transform object as
 * the <code>transform</code> property of the display object. These
 * transformation functions include translation(<i>x</i> and <i>y</i>
 * repositioning), rotation, scaling, and skewing.
 *
 * <p>Together these types of transformations are known as <i>affine
 * transformations</i>. Affine transformations preserve the straightness of
 * lines while transforming, so that parallel lines stay parallel.</p>
 *
 * <p>To apply a transformation matrix to a display object, you create a
 * Transform object, set its <code>matrix</code> property to the
 * transformation matrix, and then set the <code>transform</code> property of
 * the display object to the Transform object. Matrix objects are also used as
 * parameters of some methods, such as the following:</p>
 *
 * <ul>
 *   <li>The <code>draw()</code> method of a BitmapData object</li>
 *   <li>The <code>beginBitmapFill()</code> method,
 * <code>beginGradientFill()</code> method, or
 * <code>lineGradientStyle()</code> method of a Graphics object</li>
 * </ul>
 *
 * <p>A transformation matrix object is a 3 x 3 matrix with the following
 * contents:</p>
 *
 * <p>In traditional transformation matrixes, the <code>u</code>,
 * <code>v</code>, and <code>w</code> properties provide extra capabilities.
 * The Matrix class can only operate in two-dimensional space, so it always
 * assumes that the property values <code>u</code> and <code>v</code> are 0.0,
 * and that the property value <code>w</code> is 1.0. The effective values of
 * the matrix are as follows:</p>
 *
 * <p>You can get and set the values of all six of the other properties in a
 * Matrix object: <code>a</code>, <code>b</code>, <code>c</code>,
 * <code>d</code>, <code>tx</code>, and <code>ty</code>.</p>
 *
 * <p>The Matrix class supports the four major types of transformations:
 * translation, scaling, rotation, and skewing. You can set three of these
 * transformations by using specialized methods, as described in the following
 * table: </p>
 *
 * <p>Each transformation function alters the current matrix properties so
 * that you can effectively combine multiple transformations. To do this, you
 * call more than one transformation function before applying the matrix to
 * its display object target(by using the <code>transform</code> property of
 * that display object).</p>
 *
 * <p>Use the <code>new Matrix()</code> constructor to create a Matrix object
 * before you can call the methods of the Matrix object.</p>]]></haxe_doc>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/Matrix3D.hx" extern="1">
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method">
			<f a=""><c path="flash.geom.Matrix3D"/></f>
			<haxe_doc>* Returns a new Matrix object that is a clone of this matrix, with an exact
	 * copy of the contained object.
	 * 
	 * @return A Matrix object.</haxe_doc>
		</clone>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Sets each matrix property to a value that causes a null transformation. An
	 * object transformed by applying an identity matrix will be identical to the
	 * original.
	 *
	 * <p>After calling the <code>identity()</code> method, the resulting matrix
	 * has the following properties: <code>a</code>=1, <code>b</code>=0,
	 * <code>c</code>=0, <code>d</code>=1, <code>tx</code>=0,
	 * <code>ty</code>=0.</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>
	 *]]></haxe_doc>
		</identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Performs the opposite transformation of the original matrix. You can apply
	 * an inverted matrix to an object to undo the transformation performed when
	 * applying the original matrix.
	 *</haxe_doc>
		</invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1">
			<f a="?v">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Matrix object with the specified parameters. In matrix
	 * notation, the properties are organized like this:
	 *
	 * <p>If you do not provide any parameters to the <code>new Matrix()</code>
	 * constructor, it creates an <i>identity matrix</i> with the following
	 * values:</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Matrix class represents a transformation matrix that determines how to
 * map points from one coordinate space to another. You can perform various
 * graphical transformations on a display object by setting the properties of
 * a Matrix object, applying that Matrix object to the <code>matrix</code>
 * property of a Transform object, and then applying that Transform object as
 * the <code>transform</code> property of the display object. These
 * transformation functions include translation(<i>x</i> and <i>y</i>
 * repositioning), rotation, scaling, and skewing.
 *
 * <p>Together these types of transformations are known as <i>affine
 * transformations</i>. Affine transformations preserve the straightness of
 * lines while transforming, so that parallel lines stay parallel.</p>
 *
 * <p>To apply a transformation matrix to a display object, you create a
 * Transform object, set its <code>matrix</code> property to the
 * transformation matrix, and then set the <code>transform</code> property of
 * the display object to the Transform object. Matrix objects are also used as
 * parameters of some methods, such as the following:</p>
 *
 * <ul>
 *   <li>The <code>draw()</code> method of a BitmapData object</li>
 *   <li>The <code>beginBitmapFill()</code> method,
 * <code>beginGradientFill()</code> method, or
 * <code>lineGradientStyle()</code> method of a Graphics object</li>
 * </ul>
 *
 * <p>A transformation matrix object is a 3 x 3 matrix with the following
 * contents:</p>
 *
 * <p>In traditional transformation matrixes, the <code>u</code>,
 * <code>v</code>, and <code>w</code> properties provide extra capabilities.
 * The Matrix class can only operate in two-dimensional space, so it always
 * assumes that the property values <code>u</code> and <code>v</code> are 0.0,
 * and that the property value <code>w</code> is 1.0. The effective values of
 * the matrix are as follows:</p>
 *
 * <p>You can get and set the values of all six of the other properties in a
 * Matrix object: <code>a</code>, <code>b</code>, <code>c</code>,
 * <code>d</code>, <code>tx</code>, and <code>ty</code>.</p>
 *
 * <p>The Matrix class supports the four major types of transformations:
 * translation, scaling, rotation, and skewing. You can set three of these
 * transformations by using specialized methods, as described in the following
 * table: </p>
 *
 * <p>Each transformation function alters the current matrix properties so
 * that you can effectively combine multiple transformations. To do this, you
 * call more than one transformation function before applying the matrix to
 * its display object target(by using the <code>transform</code> property of
 * that display object).</p>
 *
 * <p>Use the <code>new Matrix()</code> constructor to create a Matrix object
 * before you can call the methods of the Matrix object.</p>]]></haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1">
			<f a="pt1:pt2">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* Returns the distance between <code>pt1</code> and <code>pt2</code>.
	 * 
	 * @param pt1 The first point.
	 * @param pt2 The second point.
	 * @return The distance between the first and second points.]]></haxe_doc>
		</distance>
		<interpolate public="1" set="method" static="1">
			<f a="pt1:pt2:f">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
				<x path="Float"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Determines a point between two specified points. The parameter
	 * <code>f</code> determines where the new interpolated point is located
	 * relative to the two end points specified by parameters <code>pt1</code>
	 * and <code>pt2</code>. The closer the value of the parameter <code>f</code>
	 * is to <code>1.0</code>, the closer the interpolated point is to the first
	 * point(parameter <code>pt1</code>). The closer the value of the parameter
	 * <code>f</code> is to 0, the closer the interpolated point is to the second
	 * point(parameter <code>pt2</code>).
	 * 
	 * @param pt1 The first point.
	 * @param pt2 The second point.
	 * @param f   The level of interpolation between the two points. Indicates
	 *            where the new point will be, along the line between
	 *            <code>pt1</code> and <code>pt2</code>. If <code>f</code>=1,
	 *            <code>pt1</code> is returned; if <code>f</code>=0,
	 *            <code>pt2</code> is returned.
	 * @return The new, interpolated point.]]></haxe_doc>
		</interpolate>
		<polar public="1" set="method" static="1">
			<f a="len:angle">
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc>* Converts a pair of polar coordinates to a Cartesian point coordinate.
	 * 
	 * @param len   The length coordinate of the polar pair.
	 * @param angle The angle, in radians, of the polar pair.
	 * @return The Cartesian point.</haxe_doc>
		</polar>
		<length public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The length of the line segment from(0,0) to this point.</haxe_doc>
		</length>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* The horizontal coordinate of the point. The default value is 0.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* The vertical coordinate of the point. The default value is 0.</haxe_doc>
		</y>
		<add public="1" set="method">
			<f a="v">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc>* Adds the coordinates of another point to the coordinates of this point to
	 * create a new point.
	 * 
	 * @param v The point to be added.
	 * @return The new point.</haxe_doc>
		</add>
		<clone public="1" set="method">
			<f a=""><c path="flash.geom.Point"/></f>
			<haxe_doc>* Creates a copy of this Point object.
	 * 
	 * @return The new Point object.</haxe_doc>
		</clone>
		<equals public="1" set="method">
			<f a="toCompare">
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether two points are equal. Two points are equal if they have
	 * the same <i>x</i> and <i>y</i> values.
	 * 
	 * @param toCompare The point to be compared.
	 * @return A value of <code>true</code> if the object is equal to this Point
	 *         object; <code>false</code> if it is not equal.]]></haxe_doc>
		</equals>
		<normalize public="1" set="method">
			<f a="thickness">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Scales the line segment between(0,0) and the current point to a set
	 * length.
	 * 
	 * @param thickness The scaling value. For example, if the current point is
	 *                 (0,5), and you normalize it to 1, the point returned is
	 *                  at(0,1).
	 * @return The normalized point.</haxe_doc>
		</normalize>
		<offset public="1" set="method">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Offsets the Point object by the specified amount. The value of
	 * <code>dx</code> is added to the original value of <i>x</i> to create the
	 * new <i>x</i> value. The value of <code>dy</code> is added to the original
	 * value of <i>y</i> to create the new <i>y</i> value.
	 * 
	 * @param dx The amount by which to offset the horizontal coordinate,
	 *           <i>x</i>.
	 * @param dy The amount by which to offset the vertical coordinate, <i>y</i>.]]></haxe_doc>
		</offset>
		<subtract public="1" set="method">
			<f a="v">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc>* Subtracts the coordinates of another point from the coordinates of this
	 * point to create a new point.
	 * 
	 * @param v The point to be subtracted.
	 * @return The new point.</haxe_doc>
		</subtract>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a string that contains the values of the <i>x</i> and <i>y</i>
	 * coordinates. The string has the form <code>"(x=<i>x</i>,
	 * y=<i>y</i>)"</code>, so calling the <code>toString()</code> method for a
	 * point at 23,17 would return <code>"(x=23, y=17)"</code>.
	 * 
	 * @return The string representation of the coordinates.]]></haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="?x:?y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new point. If you pass no parameters to this method, a point is
	 * created at(0,0).
	 * 
	 * @param x The horizontal coordinate.
	 * @param y The vertical coordinate.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Point object represents a location in a two-dimensional coordinate
 * system, where <i>x</i> represents the horizontal axis and <i>y</i>
 * represents the vertical axis.
 *
 * <p>The following code creates a point at(0,0):</p>
 *
 * <p>Methods and properties of the following classes use Point objects:</p>
 *
 * <ul>
 *   <li>BitmapData</li>
 *   <li>DisplayObject</li>
 *   <li>DisplayObjectContainer</li>
 *   <li>DisplacementMapFilter</li>
 *   <li>NativeWindow</li>
 *   <li>Matrix</li>
 *   <li>Rectangle</li>
 * </ul>
 *
 * <p>You can use the <code>new Point()</code> constructor to create a Point
 * object.</p>]]></haxe_doc>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The sum of the <code>y</code> and <code>height</code> properties.]]></haxe_doc>
		</bottom>
		<bottomRight public="1">
			<c path="flash.geom.Point"/>
			<haxe_doc><![CDATA[* The location of the Rectangle object's bottom-right corner, determined by
	 * the values of the <code>right</code> and <code>bottom</code> properties.]]></haxe_doc>
		</bottomRight>
		<height public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The height of the rectangle, in pixels. Changing the <code>height</code>
	 * value of a Rectangle object has no effect on the <code>x</code>,
	 * <code>y</code>, and <code>width</code> properties.]]></haxe_doc>
		</height>
		<left public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The <i>x</i> coordinate of the top-left corner of the rectangle. Changing
	 * the <code>left</code> property of a Rectangle object has no effect on the
	 * <code>y</code> and <code>height</code> properties. However it does affect
	 * the <code>width</code> property, whereas changing the <code>x</code> value
	 * does <i>not</i> affect the <code>width</code> property.
	 *
	 * <p>The value of the <code>left</code> property is equal to the value of
	 * the <code>x</code> property.</p>]]></haxe_doc>
		</left>
		<right public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The sum of the <code>x</code> and <code>width</code> properties.]]></haxe_doc>
		</right>
		<size public="1">
			<c path="flash.geom.Point"/>
			<haxe_doc><![CDATA[* The size of the Rectangle object, expressed as a Point object with the
	 * values of the <code>width</code> and <code>height</code> properties.]]></haxe_doc>
		</size>
		<top public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The <i>y</i> coordinate of the top-left corner of the rectangle. Changing
	 * the <code>top</code> property of a Rectangle object has no effect on the
	 * <code>x</code> and <code>width</code> properties. However it does affect
	 * the <code>height</code> property, whereas changing the <code>y</code>
	 * value does <i>not</i> affect the <code>height</code> property.
	 *
	 * <p>The value of the <code>top</code> property is equal to the value of the
	 * <code>y</code> property.</p>]]></haxe_doc>
		</top>
		<topLeft public="1">
			<c path="flash.geom.Point"/>
			<haxe_doc><![CDATA[* The location of the Rectangle object's top-left corner, determined by the
	 * <i>x</i> and <i>y</i> coordinates of the point.]]></haxe_doc>
		</topLeft>
		<width public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The width of the rectangle, in pixels. Changing the <code>width</code>
	 * value of a Rectangle object has no effect on the <code>x</code>,
	 * <code>y</code>, and <code>height</code> properties.]]></haxe_doc>
		</width>
		<x public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The <i>x</i> coordinate of the top-left corner of the rectangle. Changing
	 * the value of the <code>x</code> property of a Rectangle object has no
	 * effect on the <code>y</code>, <code>width</code>, and <code>height</code>
	 * properties.
	 *
	 * <p>The value of the <code>x</code> property is equal to the value of the
	 * <code>left</code> property.</p>]]></haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The <i>y</i> coordinate of the top-left corner of the rectangle. Changing
	 * the value of the <code>y</code> property of a Rectangle object has no
	 * effect on the <code>x</code>, <code>width</code>, and <code>height</code>
	 * properties.
	 *
	 * <p>The value of the <code>y</code> property is equal to the value of the
	 * <code>top</code> property.</p>]]></haxe_doc>
		</y>
		<clone public="1" set="method">
			<f a=""><c path="flash.geom.Rectangle"/></f>
			<haxe_doc><![CDATA[* Returns a new Rectangle object with the same values for the
	 * <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties as the original Rectangle object.
	 * 
	 * @return A new Rectangle object with the same values for the
	 *         <code>x</code>, <code>y</code>, <code>width</code>, and
	 *         <code>height</code> properties as the original Rectangle object.]]></haxe_doc>
		</clone>
		<contains public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the specified point is contained within the rectangular
	 * region defined by this Rectangle object.
	 * 
	 * @param x The <i>x</i> coordinate(horizontal position) of the point.
	 * @param y The <i>y</i> coordinate(vertical position) of the point.
	 * @return A value of <code>true</code> if the Rectangle object contains the
	 *         specified point; otherwise <code>false</code>.]]></haxe_doc>
		</contains>
		<containsPoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the specified point is contained within the rectangular
	 * region defined by this Rectangle object. This method is similar to the
	 * <code>Rectangle.contains()</code> method, except that it takes a Point
	 * object as a parameter.
	 * 
	 * @param point The point, as represented by its <i>x</i> and <i>y</i>
	 *              coordinates.
	 * @return A value of <code>true</code> if the Rectangle object contains the
	 *         specified point; otherwise <code>false</code>.]]></haxe_doc>
		</containsPoint>
		<containsRect public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the Rectangle object specified by the <code>rect</code>
	 * parameter is contained within this Rectangle object. A Rectangle object is
	 * said to contain another if the second Rectangle object falls entirely
	 * within the boundaries of the first.
	 * 
	 * @param rect The Rectangle object being checked.
	 * @return A value of <code>true</code> if the Rectangle object that you
	 *         specify is contained by this Rectangle object; otherwise
	 *         <code>false</code>.]]></haxe_doc>
		</containsRect>
		<equals public="1" set="method">
			<f a="toCompare">
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the object specified in the <code>toCompare</code>
	 * parameter is equal to this Rectangle object. This method compares the
	 * <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties of an object against the same properties of
	 * this Rectangle object.
	 * 
	 * @param toCompare The rectangle to compare to this Rectangle object.
	 * @return A value of <code>true</code> if the object has exactly the same
	 *         values for the <code>x</code>, <code>y</code>, <code>width</code>,
	 *         and <code>height</code> properties as this Rectangle object;
	 *         otherwise <code>false</code>.]]></haxe_doc>
		</equals>
		<inflate public="1" set="method">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Increases the size of the Rectangle object by the specified amounts, in
	 * pixels. The center point of the Rectangle object stays the same, and its
	 * size increases to the left and right by the <code>dx</code> value, and to
	 * the top and the bottom by the <code>dy</code> value.
	 * 
	 * @param dx The value to be added to the left and the right of the Rectangle
	 *           object. The following equation is used to calculate the new
	 *           width and position of the rectangle:
	 * @param dy The value to be added to the top and the bottom of the
	 *           Rectangle. The following equation is used to calculate the new
	 *           height and position of the rectangle:]]></haxe_doc>
		</inflate>
		<inflatePoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Increases the size of the Rectangle object. This method is similar to the
	 * <code>Rectangle.inflate()</code> method except it takes a Point object as
	 * a parameter.
	 *
	 * <p>The following two code examples give the same result:</p>
	 * 
	 * @param point The <code>x</code> property of this Point object is used to
	 *              increase the horizontal dimension of the Rectangle object.
	 *              The <code>y</code> property is used to increase the vertical
	 *              dimension of the Rectangle object.]]></haxe_doc>
		</inflatePoint>
		<intersection public="1" set="method">
			<f a="toIntersect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* If the Rectangle object specified in the <code>toIntersect</code>
	 * parameter intersects with this Rectangle object, returns the area of
	 * intersection as a Rectangle object. If the rectangles do not intersect,
	 * this method returns an empty Rectangle object with its properties set to
	 * 0.
	 * 
	 * @param toIntersect The Rectangle object to compare against to see if it
	 *                    intersects with this Rectangle object.
	 * @return A Rectangle object that equals the area of intersection. If the
	 *         rectangles do not intersect, this method returns an empty
	 *         Rectangle object; that is, a rectangle with its <code>x</code>,
	 *         <code>y</code>, <code>width</code>, and <code>height</code>
	 *         properties set to 0.]]></haxe_doc>
		</intersection>
		<intersects public="1" set="method">
			<f a="toIntersect">
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the object specified in the <code>toIntersect</code>
	 * parameter intersects with this Rectangle object. This method checks the
	 * <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties of the specified Rectangle object to see if
	 * it intersects with this Rectangle object.
	 * 
	 * @param toIntersect The Rectangle object to compare against this Rectangle
	 *                    object.
	 * @return A value of <code>true</code> if the specified object intersects
	 *         with this Rectangle object; otherwise <code>false</code>.]]></haxe_doc>
		</intersects>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[* Determines whether or not this Rectangle object is empty.
	 * 
	 * @return A value of <code>true</code> if the Rectangle object's width or
	 *         height is less than or equal to 0; otherwise <code>false</code>.]]></haxe_doc>
		</isEmpty>
		<offset public="1" set="method">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adjusts the location of the Rectangle object, as determined by its
	 * top-left corner, by the specified amounts.
	 * 
	 * @param dx Moves the <i>x</i> value of the Rectangle object by this amount.
	 * @param dy Moves the <i>y</i> value of the Rectangle object by this amount.]]></haxe_doc>
		</offset>
		<offsetPoint public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adjusts the location of the Rectangle object using a Point object as a
	 * parameter. This method is similar to the <code>Rectangle.offset()</code>
	 * method, except that it takes a Point object as a parameter.
	 * 
	 * @param point A Point object to use to offset this Rectangle object.]]></haxe_doc>
		</offsetPoint>
		<setEmpty public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Sets all of the Rectangle object's properties to 0. A Rectangle object is
	 * empty if its width or height is less than or equal to 0.
	 *
	 * <p> This method sets the values of the <code>x</code>, <code>y</code>,
	 * <code>width</code>, and <code>height</code> properties to 0.</p>
	 *]]></haxe_doc>
		</setEmpty>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Builds and returns a string that lists the horizontal and vertical
	 * positions and the width and height of the Rectangle object.
	 * 
	 * @return A string listing the value of each of the following properties of
	 *         the Rectangle object: <code>x</code>, <code>y</code>,
	 *         <code>width</code>, and <code>height</code>.]]></haxe_doc>
		</toString>
		<union public="1" set="method">
			<f a="toUnion">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Adds two rectangles together to create a new Rectangle object, by filling
	 * in the horizontal and vertical space between the two rectangles.
	 *
	 * <p><b>Note:</b> The <code>union()</code> method ignores rectangles with
	 * <code>0</code> as the height or width value, such as: <code>var
	 * rect2:Rectangle = new Rectangle(300,300,50,0);</code></p>
	 * 
	 * @param toUnion A Rectangle object to add to this Rectangle object.
	 * @return A new Rectangle object that is the union of the two rectangles.]]></haxe_doc>
		</union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Rectangle object with the top-left corner specified by the
	 * <code>x</code> and <code>y</code> parameters and with the specified
	 * <code>width</code> and <code>height</code> parameters. If you call this
	 * function without parameters, a rectangle with <code>x</code>,
	 * <code>y</code>, <code>width</code>, and <code>height</code> properties set
	 * to 0 is created.
	 * 
	 * @param x      The <i>x</i> coordinate of the top-left corner of the
	 *               rectangle.
	 * @param y      The <i>y</i> coordinate of the top-left corner of the
	 *               rectangle.
	 * @param width  The width of the rectangle, in pixels.
	 * @param height The height of the rectangle, in pixels.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A Rectangle object is an area defined by its position, as indicated by its
 * top-left corner point(<i>x</i>, <i>y</i>) and by its width and its height.
 *
 *
 * <p>The <code>x</code>, <code>y</code>, <code>width</code>, and
 * <code>height</code> properties of the Rectangle class are independent of
 * each other; changing the value of one property has no effect on the others.
 * However, the <code>right</code> and <code>bottom</code> properties are
 * integrally related to those four properties. For example, if you change the
 * value of the <code>right</code> property, the value of the
 * <code>width</code> property changes; if you change the <code>bottom</code>
 * property, the value of the <code>height</code> property changes. </p>
 *
 * <p>The following methods and properties use Rectangle objects:</p>
 *
 * <ul>
 *   <li>The <code>applyFilter()</code>, <code>colorTransform()</code>,
 * <code>copyChannel()</code>, <code>copyPixels()</code>, <code>draw()</code>,
 * <code>fillRect()</code>, <code>generateFilterRect()</code>,
 * <code>getColorBoundsRect()</code>, <code>getPixels()</code>,
 * <code>merge()</code>, <code>paletteMap()</code>,
 * <code>pixelDisolve()</code>, <code>setPixels()</code>, and
 * <code>threshold()</code> methods, and the <code>rect</code> property of the
 * BitmapData class</li>
 *   <li>The <code>getBounds()</code> and <code>getRect()</code> methods, and
 * the <code>scrollRect</code> and <code>scale9Grid</code> properties of the
 * DisplayObject class</li>
 *   <li>The <code>getCharBoundaries()</code> method of the TextField
 * class</li>
 *   <li>The <code>pixelBounds</code> property of the Transform class</li>
 *   <li>The <code>bounds</code> parameter for the <code>startDrag()</code>
 * method of the Sprite class</li>
 *   <li>The <code>printArea</code> parameter of the <code>addPage()</code>
 * method of the PrintJob class</li>
 * </ul>
 *
 * <p>You can use the <code>new Rectangle()</code> constructor to create a
 * Rectangle object.</p>
 *
 * <p><b>Note:</b> The Rectangle class does not define a rectangular Shape
 * display object. To draw a rectangular Shape object onscreen, use the
 * <code>drawRect()</code> method of the Graphics class.</p>]]></haxe_doc>
	</class>
	<class path="flash.geom.Transform" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1">
			<c path="flash.geom.ColorTransform"/>
			<haxe_doc>* A ColorTransform object containing values that universally adjust the
	 * colors in the display object.
	 * 
	 * @throws TypeError The colorTransform is null when being set</haxe_doc>
		</colorTransform>
		<concatenatedColorTransform public="1" set="null">
			<c path="flash.geom.ColorTransform"/>
			<haxe_doc>* A ColorTransform object representing the combined color transformations
	 * applied to the display object and all of its parent objects, back to the
	 * root level. If different color transformations have been applied at
	 * different levels, all of those transformations are concatenated into one
	 * ColorTransform object for this property.</haxe_doc>
		</concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null">
			<c path="flash.geom.Matrix"/>
			<haxe_doc>* A Matrix object representing the combined transformation matrixes of the
	 * display object and all of its parent objects, back to the root level. If
	 * different transformation matrixes have been applied at different levels,
	 * all of those matrixes are concatenated into one matrix for this property.
	 * Also, for resizeable SWF content running in the browser, this property
	 * factors in the difference between stage coordinates and window coordinates
	 * due to window resizing. Thus, the property converts local coordinates to
	 * window coordinates, which may not be the same coordinate space as that of
	 * the Stage.</haxe_doc>
		</concatenatedMatrix>
		<matrix public="1">
			<c path="flash.geom.Matrix"/>
			<haxe_doc><![CDATA[* A Matrix object containing values that alter the scaling, rotation, and
	 * translation of the display object.
	 *
	 * <p>If the <code>matrix</code> property is set to a value(not
	 * <code>null</code>), the <code>matrix3D</code> property is
	 * <code>null</code>. And if the <code>matrix3D</code> property is set to a
	 * value(not <code>null</code>), the <code>matrix</code> property is
	 * <code>null</code>.</p>
	 * 
	 * @throws TypeError The matrix is null when being set]]></haxe_doc>
		</matrix>
		<pixelBounds public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<haxe_doc><![CDATA[* Provides access to the PerspectiveProjection object of a three-dimensional
	 * display object. The PerspectiveProjection object can be used to modify the
	 * perspective transformation of the stage or to assign a perspective
	 * transformation to all the three-dimensional children of a display object.
	 *
	 * <p>Based on the field of view and aspect ratio(dimensions) of the stage,
	 * a default PerspectiveProjection object is assigned to the root object.</p>]]></haxe_doc>
		</pixelBounds>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[* The Transform class provides access to color adjustment properties and two-
 * or three-dimensional transformation objects that can be applied to a
 * display object. During the transformation, the color or the orientation and
 * position of a display object is adjusted(offset) from the current values
 * or coordinates to new values or coordinates. The Transform class also
 * collects data about color and two-dimensional matrix transformations that
 * are applied to a display object and all of its parent objects. You can
 * access these combined transformations through the
 * <code>concatenatedColorTransform</code> and <code>concatenatedMatrix</code>
 * properties.
 *
 * <p>To apply color transformations: create a ColorTransform object, set the
 * color adjustments using the object's methods and properties, and then
 * assign the <code>colorTransformation</code> property of the
 * <code>transform</code> property of the display object to the new
 * ColorTransformation object.</p>
 *
 * <p>To apply two-dimensional transformations: create a Matrix object, set
 * the matrix's two-dimensional transformation, and then assign the
 * <code>transform.matrix</code> property of the display object to the new
 * Matrix object.</p>
 *
 * <p>To apply three-dimensional transformations: start with a
 * three-dimensional display object. A three-dimensional display object has a
 * <code>z</code> property value other than zero. You do not need to create
 * the Matrix3D object. For all three-dimensional objects, a Matrix3D object
 * is created automatically when you assign a <code>z</code> value to a
 * display object. You can access the display object's Matrix3D object through
 * the display object's <code>transform</code> property. Using the methods of
 * the Matrix3D class, you can add to or modify the existing transformation
 * settings. Also, you can create a custom Matrix3D object, set the custom
 * Matrix3D object's transformation elements, and then assign the new Matrix3D
 * object to the display object using the <code>transform.matrix</code>
 * property.</p>
 *
 * <p>To modify a perspective projection of the stage or root object: use the
 * <code>transform.matrix</code> property of the root display object to gain
 * access to the PerspectiveProjection object. Or, apply different perspective
 * projection properties to a display object by setting the perspective
 * projection properties of the display object's parent. The child display
 * object inherits the new properties. Specifically, create a
 * PerspectiveProjection object and set its properties, then assign the
 * PerspectiveProjection object to the <code>perspectiveProjection</code>
 * property of the parent display object's <code>transform</code> property.
 * The specified projection transformation then applies to all the display
 * object's three-dimensional children.</p>
 *
 * <p>Since both PerspectiveProjection and Matrix3D objects perform
 * perspective transformations, do not assign both to a display object at the
 * same time. Use the PerspectiveProjection object for focal length and
 * projection center changes. For more control over the perspective
 * transformation, create a perspective projection Matrix3D object.</p>]]></haxe_doc>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/geom/Vector3D.hx" extern="1">
		<length public="1" set="null"><x path="Float"/></length>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1"><f a="?x:?y:?z:?w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.SoundTransform" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1">
			<x path="Float"/>
			<haxe_doc>* A value, from 0(none) to 1(all), specifying how much of the left input
	 * is played in the left speaker.</haxe_doc>
		</leftToLeft>
		<leftToRight public="1">
			<x path="Float"/>
			<haxe_doc>* A value, from 0(none) to 1(all), specifying how much of the left input
	 * is played in the right speaker.</haxe_doc>
		</leftToRight>
		<pan public="1">
			<x path="Float"/>
			<haxe_doc>* The left-to-right panning of the sound, ranging from -1(full pan left) to
	 * 1(full pan right). A value of 0 represents no panning(balanced center
	 * between right and left).</haxe_doc>
		</pan>
		<rightToLeft public="1">
			<x path="Float"/>
			<haxe_doc>* A value, from 0(none) to 1(all), specifying how much of the right input
	 * is played in the left speaker.</haxe_doc>
		</rightToLeft>
		<rightToRight public="1">
			<x path="Float"/>
			<haxe_doc>* A value, from 0(none) to 1(all), specifying how much of the right input
	 * is played in the right speaker.</haxe_doc>
		</rightToRight>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>* The volume, ranging from 0(silent) to 1(full volume).</haxe_doc>
		</volume>
		<new public="1" set="method">
			<f a="?vol:?panning">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a SoundTransform object.
	 * 
	 * @param vol     The volume, ranging from 0(silent) to 1(full volume).
	 * @param panning The left-to-right panning of the sound, ranging from -1
	 *               (full pan left) to 1(full pan right). A value of 0
	 *                represents no panning(center).</haxe_doc>
		</new>
		<haxe_doc>* The SoundTransform class contains properties for volume and panning.</haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequest" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/net/URLRequest.hx" extern="1">
		<contentType public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The MIME content type of the content in the the <code>data</code>
	 * property.
	 *
	 * <p>The default value is
	 * <code>application/x-www-form-urlencoded</code>.</p>
	 *
	 * <p><b>Note</b>:The <code>FileReference.upload()</code>,
	 * <code>FileReference.download()</code>, and <code>HTMLLoader.load()</code>
	 * methods do not support the <code>URLRequest.contentType</code>
	 * property.</p>
	 *
	 * <p>When sending a POST request, the values of the <code>contentType</code>
	 * and <code>data</code> properties must correspond properly. The value of
	 * the <code>contentType</code> property instructs servers on how to
	 * interpret the value of the <code>data</code> property. </p>
	 *
	 * <ul>
	 *   <li>If the value of the <code>data</code> property is a URLVariables
	 * object, the value of <code>contentType</code> must be
	 * <code>application/x-www-form-urlencoded</code>. </li>
	 *   <li> If the value of the <code>data</code> property is any other type,
	 * the value of <code>contentType</code> should indicate the type of the POST
	 * data that will be sent(which is the binary or string data contained in
	 * the value of the <code>data</code> property). </li>
	 *   <li>For <code>FileReference.upload()</code>, the Content-Type of the
	 * request is set automatically to <code>multipart/form-data</code>, and the
	 * value of the <code>contentType</code> property is ignored.</li>
	 * </ul>
	 *
	 * <p> In Flash Player 10 and later, if you use a multipart Content-Type(for
	 * example "multipart/form-data") that contains an upload(indicated by a
	 * "filename" parameter in a "content-disposition" header within the POST
	 * body), the POST operation is subject to the security rules applied to
	 * uploads:</p>
	 *
	 * <ul>
	 *   <li>The POST operation must be performed in response to a user-initiated
	 * action, such as a mouse click or key press.</li>
	 *   <li>If the POST operation is cross-domain(the POST target is not on the
	 * same server as the SWF file that is sending the POST request), the target
	 * server must provide a URL policy file that permits cross-domain
	 * access.</li>
	 * </ul>
	 *
	 * <p>Also, for any multipart Content-Type, the syntax must be valid
	 * (according to the RFC2046 standards). If the syntax appears to be invalid,
	 * the POST operation is subject to the security rules applied to
	 * uploads.</p>]]></haxe_doc>
		</contentType>
		<data public="1">
			<d/>
			<haxe_doc><![CDATA[* An object containing data to be transmitted with the URL request.
	 *
	 * <p>This property is used in conjunction with the <code>method</code>
	 * property. When the value of <code>method</code> is <code>GET</code>, the
	 * value of <code>data</code> is appended to the value of
	 * <code>URLRequest.url</code>, using HTTP query-string syntax. When the
	 * <code>method</code> value is <code>POST</code>(or any value other than
	 * <code>GET</code>), the value of <code>data</code> is transmitted in the
	 * body of the HTTP request.</p>
	 *
	 * <p>The URLRequest API offers binary <code>POST</code> support and support
	 * for URL-encoded variables, as well as support for strings. The data object
	 * can be a ByteArray, URLVariables, or String object.</p>
	 *
	 * <p>The way in which the data is used depends on the type of object
	 * used:</p>
	 *
	 * <ul>
	 *   <li>If the object is a ByteArray object, the binary data of the
	 * ByteArray object is used as <code>POST</code> data. For <code>GET</code>,
	 * data of ByteArray type is not supported. Also, data of ByteArray type is
	 * not supported for <code>FileReference.upload()</code> and
	 * <code>FileReference.download()</code>.</li>
	 *   <li>If the object is a URLVariables object and the method is
	 * <code>POST</code>, the variables are encoded using
	 * <i>x-www-form-urlencoded</i> format and the resulting string is used as
	 * <code>POST</code> data. An exception is a call to
	 * <code>FileReference.upload()</code>, in which the variables are sent as
	 * separate fields in a <code>multipart/form-data</code> post.</li>
	 *   <li>If the object is a URLVariables object and the method is
	 * <code>GET</code>, the URLVariables object defines variables to be sent
	 * with the URLRequest object.</li>
	 *   <li>Otherwise, the object is converted to a string, and the string is
	 * used as the <code>POST</code> or <code>GET</code> data.</li>
	 * </ul>
	 *
	 * <p>This data is not sent until a method, such as
	 * <code>navigateToURL()</code> or <code>FileReference.upload()</code>, uses
	 * the URLRequest object.</p>
	 *
	 * <p><b>Note</b>: The value of <code>contentType</code> must correspond to
	 * the type of data in the <code>data</code> property. See the note in the
	 * description of the <code>contentType</code> property.</p>]]></haxe_doc>
		</data>
		<digest public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* A string that uniquely identifies the signed Adobe platform component to
	 * be stored to(or retrieved from) the Flash Player cache. An Adobe platform
	 * component is a signed file(a SWZ file) that contains SWF content that is
	 * cached persistently on a user's machine. All SWZ files are signed by
	 * Adobe. A digest corresponds to a single cached file; if you change the
	 * file in any way, its digest will change in an unpredictable way. By using
	 * a digest, you can verify the cached file across multiple domains. Two
	 * files with the same digest are the same file, and two files with different
	 * digests are not the same file. A file cannot(practically) be created to
	 * "spoof" a digest and pretend to be another digest.
	 *
	 * <p>The digest is based on an SHA-256 message digest algorithm(64
	 * characters long in hexadecimal format).</p>
	 *
	 * <p>For example, the Flex SDK includes a SWZ for the Flex framework(and it
	 * provides the digest string for that SWZ file). You can post this SWZ on
	 * your web server and load it in your SWF file(using the
	 * <code>load()</code> method of a URLLoader object). If the end user's
	 * machine already has the matching SWZ file cached, the application uses the
	 * cached SWZ file.(A SWZ file matches if its <code>digest</code> matches
	 * the one you provide.) Otherwise, the application downloads the SWZ file
	 * from the URL you specify. </p>
	 *
	 * <p>Only set the <code>digest</code> parameter in a URLRequest object used
	 * in a call to the <code>URLLoader.load()</code> method to load a SWZ file.
	 * If the <code>digest</code> property of a a URLRequest object is set when
	 * it is used in other methods, the application throws an IOError
	 * exception.</p>
	 * 
	 * @throws ArgumentError The digest provided does not match the digest of the
	 *                       file that is extracted from the downloaded signed
	 *                       file or the signed file loaded out of the cache. The
	 *                       application also throws this error if the provided
	 *                       digest is the wrong length or contains invalid
	 *                      (nonhexadecimal) characters.]]></haxe_doc>
		</digest>
		<method public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Controls the HTTP form submission method.
	 *
	 * <p>For SWF content running in Flash Player(in the browser), this property
	 * is limited to GET or POST operations, and valid values are
	 * <code>URLRequestMethod.GET</code> or
	 * <code>URLRequestMethod.POST</code>.</p>
	 *
	 * <p>For content running in Adobe AIR, you can use any string value if the
	 * content is in the application security sandbox. Otherwise, as with content
	 * running in Flash Player, you are restricted to using GET or POST
	 * operations.</p>
	 *
	 * <p>For content running in Adobe AIR, when using the
	 * <code>navigateToURL()</code> function, the runtime treats a URLRequest
	 * that uses the POST method(one that has its <code>method</code> property
	 * set to <code>URLRequestMethod.POST</code>) as using the GET method.</p>
	 *
	 * <p><b>Note:</b> If running in Flash Player and the referenced form has no
	 * body, Flash Player automatically uses a GET operation, even if the method
	 * is set to <code>URLRequestMethod.POST</code>. For this reason, it is
	 * recommended to always include a "dummy" body to ensure that the correct
	 * method is used.</p>
	 * 
	 * @default URLRequestMethod.GET
	 * @throws ArgumentError If the <code>value</code> parameter is not
	 *                       <code>URLRequestMethod.GET</code> or
	 *                       <code>URLRequestMethod.POST</code>.]]></haxe_doc>
		</method>
		<requestHeaders public="1">
			<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
			<haxe_doc><![CDATA[* The array of HTTP request headers to be appended to the HTTP request. The
	 * array is composed of URLRequestHeader objects. Each object in the array
	 * must be a URLRequestHeader object that contains a name string and a value
	 * string, as follows:
	 *
	 * <p>Flash Player and the AIR runtime impose certain restrictions on request
	 * headers; for more information, see the URLRequestHeader class
	 * description.</p>
	 *
	 * <p>Not all methods that accept URLRequest parameters support the
	 * <code>requestHeaders</code> property, consult the documentation for the
	 * method you are calling. For example, the
	 * <code>FileReference.upload()</code> and
	 * <code>FileReference.download()</code> methods do not support the
	 * <code>URLRequest.requestHeaders</code> property.</p>
	 *
	 * <p>Due to browser limitations, custom HTTP request headers are only
	 * supported for <code>POST</code> requests, not for <code>GET</code>
	 * requests.</p>]]></haxe_doc>
		</requestHeaders>
		<url public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The URL to be requested.
	 *
	 * <p>Be sure to encode any characters that are either described as unsafe in
	 * the Uniform Resource Locator specification(see
	 * http://www.faqs.org/rfcs/rfc1738.html) or that are reserved in the URL
	 * scheme of the URLRequest object(when not used for their reserved
	 * purpose). For example, use <code>"%25"</code> for the percent(%) symbol
	 * and <code>"%23"</code> for the number sign(#), as in
	 * <code>"http://www.example.com/orderForm.cfm?item=%23B-3&discount=50%25"</code>.</p>
	 *
	 * <p>By default, the URL must be in the same domain as the calling file,
	 * unless the content is running in the Adobe AIR application security
	 * sandbox. If you need to load data from a different domain, put a URL
	 * policy file on the server that is hosting the data. For more information,
	 * see the description of the URLRequest class.</p>
	 *
	 * <p>For content running in Adobe AIR, files in the application security
	 * sandobx  -  files installed with the AIR application  -  can access URLs
	 * using any of the following URL schemes:</p>
	 *
	 * <ul>
	 *   <li><code>http</code> and <code>https</code> </li>
	 *   <li><code>file</code> </li>
	 *   <li><code>app-storage</code> </li>
	 *   <li><code>app</code> </li>
	 * </ul>
	 *
	 * <p><b>Note:</b> IPv6(Internet Protocol version 6) is supported in AIR and
	 * in Flash Player 9.0.115.0 and later. IPv6 is a version of Internet
	 * Protocol that supports 128-bit addresses(an improvement on the earlier
	 * IPv4 protocol that supports 32-bit addresses). You might need to activate
	 * IPv6 on your networking interfaces. For more information, see the Help for
	 * the operating system hosting the data. If IPv6 is supported on the hosting
	 * system, you can specify numeric IPv6 literal addresses in URLs enclosed in
	 * brackets([]), as in the following. </p>
	 * <pre xml:space="preserve">
	 * rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f]:1935/test </pre>]]></haxe_doc>
		</url>
		<new public="1" set="method">
			<f a="?url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a URLRequest object. If <code>System.useCodePage</code> is
	 * <code>true</code>, the request is encoded using the system code page,
	 * rather than Unicode. If <code>System.useCodePage</code> is
	 * <code>false</code>, the request is encoded using Unicode, rather than the
	 * system code page.
	 * 
	 * @param url The URL to be requested. You can set the URL later by using the
	 *            <code>url</code> property.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The URLRequest class captures all of the information in a single HTTP
 * request. URLRequest objects are passed to the <code>load()</code> methods
 * of the Loader, URLStream, and URLLoader classes, and to other loading
 * operations, to initiate URL downloads. They are also passed to the
 * <code>upload()</code> and <code>download()</code> methods of the
 * FileReference class.
 *
 * <p>A SWF file in the local-with-filesystem sandbox may not load data from,
 * or provide data to, a resource that is in the network sandbox. </p>
 *
 * <p>By default, the calling SWF file and the URL you load must be in the
 * same domain. For example, a SWF file at www.adobe.com can load data only
 * from sources that are also at www.adobe.com. To load data from a different
 * domain, place a URL policy file on the server hosting the data.</p>
 *
 * <p> However, in Adobe AIR, content in the application security sandbox
 * (content installed with the AIR application) is not restricted by these
 * security limitations. For content running in Adobe AIR, files in the
 * application security sandbox can access URLs using any of the following URL
 * schemes:</p>
 *
 * <ul>
 *   <li><code>http</code> and <code>https</code> </li>
 *   <li><code>file</code> </li>
 *   <li><code>app-storage</code> </li>
 *   <li><code>app</code> </li>
 * </ul>
 *
 * <p>Content running in Adobe AIR that is not in the application security
 * sandbox observes the same restrictions as content running in the browser
 * (in Flash Player), and loading is governed by the content's domain and any
 * permissions granted in URL policy files.</p>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/net/URLRequestHeader.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* An HTTP request header name(such as <code>Content-Type</code> or
	 * <code>SOAPAction</code>).]]></haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The value associated with the <code>name</code> property(such as
	 * <code>text/plain</code>).]]></haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="?name:?value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new URLRequestHeader object that encapsulates a single HTTP
	 * request header. URLRequestHeader objects are used in the
	 * <code>requestHeaders</code> property of the URLRequest class.
	 * 
	 * @param name  An HTTP request header name(such as
	 *              <code>Content-Type</code> or <code>SOAPAction</code>).
	 * @param value The value associated with the <code>name</code> property
	 *             (such as <code>text/plain</code>).]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A URLRequestHeader object encapsulates a single HTTP request header and
 * consists of a name/value pair. URLRequestHeader objects are used in the
 * <code>requestHeaders</code> property of the URLRequest class.
 *
 * <p>In Adobe<sup>®</sup> AIR<sup>®</sup>, content in the application
 * security sandbox(such as content installed with the AIR application) can
 * use any request headers, without error. However, for content running in
 * Adobe AIR that is in a different security sandbox, or for content running
 * in Flash<sup>®</sup> Player, using following request headers cause a
 * runtime error to be thrown, and the restricted terms are not case-sensitive
 * (for example, <code>Get</code>, <code>get</code>, and <code>GET</code> are
 * each not allowed): </p>
 *
 * <p>In Flash Player and in Adobe AIR content outside of the application
 * security sandbox, the following request headers cannot be used, and the
 * restricted terms are not case-sensitive(for example, <code>Get</code>,
 * <code>get</code>, and <code>GET</code> are all not allowed). Also,
 * hyphenated terms apply if an underscore character is used(for example,
 * both <code>Content-Length</code> and <code>Content_Length</code> are not
 * allowed): </p>
 *
 * <p><code>Accept-Charset</code>, <code>Accept-Encoding</code>,
 * <code>Accept-Ranges</code>, <code>Age</code>, <code>Allow</code>,
 * <code>Allowed</code>, <code>Authorization</code>, <code>Charge-To</code>,
 * <code>Connect</code>, <code>Connection</code>, <code>Content-Length</code>,
 * <code>Content-Location</code>, <code>Content-Range</code>,
 * <code>Cookie</code>, <code>Date</code>, <code>Delete</code>,
 * <code>ETag</code>, <code>Expect</code>, <code>Get</code>,
 * <code>Head</code>, <code>Host</code>, <code>If-Modified-Since</code>,
 * <code>Keep-Alive</code>, <code>Last-Modified</code>, <code>Location</code>,
 * <code>Max-Forwards</code>, <code>Options</code>, <code>Origin</code>,
 * <code>Post</code>, <code>Proxy-Authenticate</code>,
 * <code>Proxy-Authorization</code>, <code>Proxy-Connection</code>,
 * <code>Public</code>, <code>Put</code>, <code>Range</code>,
 * <code>Referer</code>, <code>Request-Range</code>, <code>Retry-After</code>,
 * <code>Server</code>, <code>TE</code>, <code>Trace</code>,
 * <code>Trailer</code>, <code>Transfer-Encoding</code>, <code>Upgrade</code>,
 * <code>URI</code>, <code>User-Agent</code>, <code>Vary</code>,
 * <code>Via</code>, <code>Warning</code>, <code>WWW-Authenticate</code>,
 * <code>x-flash-version</code>.</p>
 *
 * <p>URLRequestHeader objects are restricted in length. If the cumulative
 * length of a URLRequestHeader object(the length of the <code>name</code>
 * property plus the <code>value</code> property) or an array of
 * URLRequestHeader objects used in the <code>URLRequest.requestHeaders</code>
 * property exceeds the acceptable length, an exception is thrown.</p>
 *
 * <p>Content running in Adobe AIR sets the <code>ACCEPT</code> header to the
 * following, unless you specify a setting for the <code>ACCEPT</code> header
 * in the <code>requestHeaders</code> property of the URLRequest class:</p>
 * <code>text/xml, application/xml, application/xhtml+xml, text/html;q=0.9,
 * text/plain;q=0.8, image/png, application/x-shockwave-flash,
 * video/mp4;q=0.9, flv-application/octet-stream;q=0.8, video/x-flv;q=0.7,
 * audio/mp4, ~~/~~;q=0.5</code>
 *
 * <p>Not all methods that accept URLRequest parameters support the
 * <code>requestHeaders</code> property, consult the documentation for the
 * method you are calling. For example, the
 * <code>FileReference.upload()</code> and
 * <code>FileReference.download()</code> methods do not support the
 * <code>URLRequest.requestHeaders</code> property.</p>
 *
 * <p>Due to browser limitations, custom HTTP request headers are only
 * supported for <code>POST</code> requests, not for <code>GET</code>
 * requests.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/system/ApplicationDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="/usr/lib/haxe/std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/system/LoaderContext.hx" extern="1">
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<x path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/system/SecurityDomain.hx" extern="1"><currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain></class>
	<enum path="flash.text.AntiAliasType" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/AntiAliasType.hx">
		<ADVANCED><haxe_doc><![CDATA[* Sets anti-aliasing to advanced anti-aliasing. Advanced anti-aliasing
	 * allows font faces to be rendered at very high quality at small sizes. It
	 * is best used with applications that have a lot of small text. Advanced
	 * anti-aliasing is not recommended for very large fonts(larger than 48
	 * points). This constant is used for the <code>antiAliasType</code> property
	 * in the TextField class. Use the syntax
	 * <code>AntiAliasType.ADVANCED</code>.]]></haxe_doc></ADVANCED>
		<NORMAL><haxe_doc><![CDATA[* Sets anti-aliasing to the anti-aliasing that is used in Flash Player 7 and
	 * earlier. This setting is recommended for applications that do not have a
	 * lot of text. This constant is used for the <code>antiAliasType</code>
	 * property in the TextField class. Use the syntax
	 * <code>AntiAliasType.NORMAL</code>.]]></haxe_doc></NORMAL>
		<haxe_doc>* The AntiAliasType class provides values for anti-aliasing in the
 * flash.text.TextField class.</haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextField" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<alwaysShowSelection public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* When set to <code>true</code> and the text field is not in focus, Flash
	 * Player highlights the selection in the text field in gray. When set to
	 * <code>false</code> and the text field is not in focus, Flash Player does
	 * not highlight the selection in the text field.
	 * 
	 * @default false]]></haxe_doc>
		</alwaysShowSelection>
		<antiAliasType public="1">
			<e path="flash.text.AntiAliasType"/>
			<haxe_doc><![CDATA[* The type of anti-aliasing used for this text field. Use
	 * <code>flash.text.AntiAliasType</code> constants for this property. You can
	 * control this setting only if the font is embedded(with the
	 * <code>embedFonts</code> property set to <code>true</code>). The default
	 * setting is <code>flash.text.AntiAliasType.NORMAL</code>.
	 *
	 * <p>To set values for this property, use the following string values:</p>]]></haxe_doc>
		</antiAliasType>
		<autoSize public="1">
			<e path="flash.text.TextFieldAutoSize"/>
			<haxe_doc><![CDATA[* Controls automatic sizing and alignment of text fields. Acceptable values
	 * for the <code>TextFieldAutoSize</code> constants:
	 * <code>TextFieldAutoSize.NONE</code>(the default),
	 * <code>TextFieldAutoSize.LEFT</code>, <code>TextFieldAutoSize.RIGHT</code>,
	 * and <code>TextFieldAutoSize.CENTER</code>.
	 *
	 * <p>If <code>autoSize</code> is set to <code>TextFieldAutoSize.NONE</code>
	 * (the default) no resizing occurs.</p>
	 *
	 * <p>If <code>autoSize</code> is set to <code>TextFieldAutoSize.LEFT</code>,
	 * the text is treated as left-justified text, meaning that the left margin
	 * of the text field remains fixed and any resizing of a single line of the
	 * text field is on the right margin. If the text includes a line break(for
	 * example, <code>"\n"</code> or <code>"\r"</code>), the bottom is also
	 * resized to fit the next line of text. If <code>wordWrap</code> is also set
	 * to <code>true</code>, only the bottom of the text field is resized and the
	 * right side remains fixed.</p>
	 *
	 * <p>If <code>autoSize</code> is set to
	 * <code>TextFieldAutoSize.RIGHT</code>, the text is treated as
	 * right-justified text, meaning that the right margin of the text field
	 * remains fixed and any resizing of a single line of the text field is on
	 * the left margin. If the text includes a line break(for example,
	 * <code>"\n" or "\r")</code>, the bottom is also resized to fit the next
	 * line of text. If <code>wordWrap</code> is also set to <code>true</code>,
	 * only the bottom of the text field is resized and the left side remains
	 * fixed.</p>
	 *
	 * <p>If <code>autoSize</code> is set to
	 * <code>TextFieldAutoSize.CENTER</code>, the text is treated as
	 * center-justified text, meaning that any resizing of a single line of the
	 * text field is equally distributed to both the right and left margins. If
	 * the text includes a line break(for example, <code>"\n"</code> or
	 * <code>"\r"</code>), the bottom is also resized to fit the next line of
	 * text. If <code>wordWrap</code> is also set to <code>true</code>, only the
	 * bottom of the text field is resized and the left and right sides remain
	 * fixed.</p>
	 * 
	 * @throws ArgumentError The <code>autoSize</code> specified is not a member
	 *                       of flash.text.TextFieldAutoSize.]]></haxe_doc>
		</autoSize>
		<background public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the text field has a background fill. If
	 * <code>true</code>, the text field has a background fill. If
	 * <code>false</code>, the text field has no background fill. Use the
	 * <code>backgroundColor</code> property to set the background color of a
	 * text field.
	 * 
	 * @default false]]></haxe_doc>
		</background>
		<backgroundColor public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The color of the text field background. The default value is
	 * <code>0xFFFFFF</code>(white). This property can be retrieved or set, even
	 * if there currently is no background, but the color is visible only if the
	 * text field has the <code>background</code> property set to
	 * <code>true</code>.]]></haxe_doc>
		</backgroundColor>
		<border public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the text field has a border. If <code>true</code>, the
	 * text field has a border. If <code>false</code>, the text field has no
	 * border. Use the <code>borderColor</code> property to set the border color.
	 * 
	 * @default false]]></haxe_doc>
		</border>
		<borderColor public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The color of the text field border. The default value is
	 * <code>0x000000</code>(black). This property can be retrieved or set, even
	 * if there currently is no border, but the color is visible only if the text
	 * field has the <code>border</code> property set to <code>true</code>.]]></haxe_doc>
		</borderColor>
		<bottomScrollV public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* An integer(1-based index) that indicates the bottommost line that is
	 * currently visible in the specified text field. Think of the text field as
	 * a window onto a block of text. The <code>scrollV</code> property is the
	 * 1-based index of the topmost visible line in the window.
	 *
	 * <p>All the text between the lines indicated by <code>scrollV</code> and
	 * <code>bottomScrollV</code> is currently visible in the text field.</p>]]></haxe_doc>
		</bottomScrollV>
		<caretIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The index of the insertion point(caret) position. If no insertion point
	 * is displayed, the value is the position the insertion point would be if
	 * you restored focus to the field(typically where the insertion point last
	 * was, or 0 if the field has not had focus).
	 *
	 * <p>Selection span indexes are zero-based(for example, the first position
	 * is 0, the second position is 1, and so on).</p>]]></haxe_doc>
		</caretIndex>
		<condenseWhite public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that specifies whether extra white space(spaces, line
	 * breaks, and so on) in a text field with HTML text is removed. The default
	 * value is <code>false</code>. The <code>condenseWhite</code> property only
	 * affects text set with the <code>htmlText</code> property, not the
	 * <code>text</code> property. If you set text with the <code>text</code>
	 * property, <code>condenseWhite</code> is ignored.
	 *
	 * <p>If <code>condenseWhite</code> is set to <code>true</code>, use standard
	 * HTML commands such as <code><BR></code> and <code><P></code> to place line
	 * breaks in the text field.</p>
	 *
	 * <p>Set the <code>condenseWhite</code> property before setting the
	 * <code>htmlText</code> property.</p>]]></haxe_doc>
		</condenseWhite>
		<defaultTextFormat public="1">
			<c path="flash.text.TextFormat"/>
			<haxe_doc><![CDATA[* Specifies the format applied to newly inserted text, such as text entered
	 * by a user or text inserted with the <code>replaceSelectedText()</code>
	 * method.
	 *
	 * <p><b>Note:</b> When selecting characters to be replaced with
	 * <code>setSelection()</code> and <code>replaceSelectedText()</code>, the
	 * <code>defaultTextFormat</code> will be applied only if the text has been
	 * selected up to and including the last character. Here is an example:</p>
	 * <pre xml:space="preserve"> var my_txt:TextField new TextField();
	 * my_txt.text = "Flash Macintosh version"; var my_fmt:TextFormat = new
	 * TextFormat(); my_fmt.color = 0xFF0000; my_txt.defaultTextFormat = my_fmt;
	 * my_txt.setSelection(6,15); // partial text selected - defaultTextFormat
	 * not applied my_txt.setSelection(6,23); // text selected to end -
	 * defaultTextFormat applied my_txt.replaceSelectedText("Windows version");
	 * </pre>
	 *
	 * <p>When you access the <code>defaultTextFormat</code> property, the
	 * returned TextFormat object has all of its properties defined. No property
	 * is <code>null</code>.</p>
	 *
	 * <p><b>Note:</b> You can't set this property if a style sheet is applied to
	 * the text field.</p>
	 * 
	 * @throws Error This method cannot be used on a text field with a style
	 *               sheet.]]></haxe_doc>
		</defaultTextFormat>
		<displayAsPassword public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the text field is a password text field. If the value of
	 * this property is <code>true</code>, the text field is treated as a
	 * password text field and hides the input characters using asterisks instead
	 * of the actual characters. If <code>false</code>, the text field is not
	 * treated as a password text field. When password mode is enabled, the Cut
	 * and Copy commands and their corresponding keyboard shortcuts will not
	 * function. This security mechanism prevents an unscrupulous user from using
	 * the shortcuts to discover a password on an unattended computer.
	 * 
	 * @default false]]></haxe_doc>
		</displayAsPassword>
		<embedFonts public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to render by using embedded font outlines. If
	 * <code>false</code>, Flash Player renders the text field by using device
	 * fonts.
	 *
	 * <p>If you set the <code>embedFonts</code> property to <code>true</code>
	 * for a text field, you must specify a font for that text by using the
	 * <code>font</code> property of a TextFormat object applied to the text
	 * field. If the specified font is not embedded in the SWF file, the text is
	 * not displayed.</p>
	 * 
	 * @default false]]></haxe_doc>
		</embedFonts>
		<gridFitType public="1">
			<e path="flash.text.GridFitType"/>
			<haxe_doc><![CDATA[* The type of grid fitting used for this text field. This property applies
	 * only if the <code>flash.text.AntiAliasType</code> property of the text
	 * field is set to <code>flash.text.AntiAliasType.ADVANCED</code>.
	 *
	 * <p>The type of grid fitting used determines whether Flash Player forces
	 * strong horizontal and vertical lines to fit to a pixel or subpixel grid,
	 * or not at all.</p>
	 *
	 * <p>For the <code>flash.text.GridFitType</code> property, you can use the
	 * following string values:</p>
	 * 
	 * @default pixel]]></haxe_doc>
		</gridFitType>
		<htmlText public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Contains the HTML representation of the text field contents.
	 *
	 * <p>Flash Player supports the following HTML tags:</p>
	 *
	 * <p>Flash Player and AIR also support explicit character codes, such as
	 * &#38;(ASCII ampersand) and &#x20AC;(Unicode € symbol). </p>]]></haxe_doc>
		</htmlText>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The number of characters in a text field. A character such as tab
	 * (<code>\t</code>) counts as one character.]]></haxe_doc>
		</length>
		<maxChars public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The maximum number of characters that the text field can contain, as
	 * entered by a user. A script can insert more text than
	 * <code>maxChars</code> allows; the <code>maxChars</code> property indicates
	 * only how much text a user can enter. If the value of this property is
	 * <code>0</code>, a user can enter an unlimited amount of text.
	 * 
	 * @default 0]]></haxe_doc>
		</maxChars>
		<maxScrollH public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The maximum value of <code>scrollH</code>.]]></haxe_doc>
		</maxScrollH>
		<maxScrollV public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The maximum value of <code>scrollV</code>.]]></haxe_doc>
		</maxScrollV>
		<mouseWheelEnabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether Flash Player automatically scrolls
	 * multiline text fields when the user clicks a text field and rolls the
	 * mouse wheel. By default, this value is <code>true</code>. This property is
	 * useful if you want to prevent mouse wheel scrolling of text fields, or
	 * implement your own text field scrolling.]]></haxe_doc>
		</mouseWheelEnabled>
		<multiline public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether field is a multiline text field. If the value is
	 * <code>true</code>, the text field is multiline; if the value is
	 * <code>false</code>, the text field is a single-line text field. In a field
	 * of type <code>TextFieldType.INPUT</code>, the <code>multiline</code> value
	 * determines whether the <code>Enter</code> key creates a new line(a value
	 * of <code>false</code>, and the <code>Enter</code> key is ignored). If you
	 * paste text into a <code>TextField</code> with a <code>multiline</code>
	 * value of <code>false</code>, newlines are stripped out of the text.
	 * 
	 * @default false]]></haxe_doc>
		</multiline>
		<numLines public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* Defines the number of text lines in a multiline text field. If
	 * <code>wordWrap</code> property is set to <code>true</code>, the number of
	 * lines increases when text wraps.]]></haxe_doc>
		</numLines>
		<restrict public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the set of characters that a user can enter into the text field.
	 * If the value of the <code>restrict</code> property is <code>null</code>,
	 * you can enter any character. If the value of the <code>restrict</code>
	 * property is an empty string, you cannot enter any character. If the value
	 * of the <code>restrict</code> property is a string of characters, you can
	 * enter only characters in the string into the text field. The string is
	 * scanned from left to right. You can specify a range by using the hyphen
	 * (-) character. Only user interaction is restricted; a script can put any
	 * text into the text field. <ph outputclass="flashonly">This property does
	 * not synchronize with the Embed font options in the Property inspector.
	 *
	 * <p>If the string begins with a caret(^) character, all characters are
	 * initially accepted and succeeding characters in the string are excluded
	 * from the set of accepted characters. If the string does not begin with a
	 * caret(^) character, no characters are initially accepted and succeeding
	 * characters in the string are included in the set of accepted
	 * characters.</p>
	 *
	 * <p>The following example allows only uppercase characters, spaces, and
	 * numbers to be entered into a text field:</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "A-Z 0-9"; </pre>
	 *
	 * <p>The following example includes all characters, but excludes lowercase
	 * letters:</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "^a-z"; </pre>
	 *
	 * <p>You can use a backslash to enter a ^ or - verbatim. The accepted
	 * backslash sequences are \-, \^ or \\. The backslash must be an actual
	 * character in the string, so when specified in ActionScript, a double
	 * backslash must be used. For example, the following code includes only the
	 * dash(-) and caret(^):</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "\\-\\^"; </pre>
	 *
	 * <p>The ^ can be used anywhere in the string to toggle between including
	 * characters and excluding characters. The following code includes only
	 * uppercase letters, but excludes the uppercase letter Q:</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "A-Z^Q"; </pre>
	 *
	 * <p>You can use the <code>\u</code> escape sequence to construct
	 * <code>restrict</code> strings. The following code includes only the
	 * characters from ASCII 32(space) to ASCII 126(tilde).</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "\u0020-\u007E"; </pre>
	 * 
	 * @default null]]></haxe_doc>
		</restrict>
		<scrollH public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The current horizontal scrolling position. If the <code>scrollH</code>
	 * property is 0, the text is not horizontally scrolled. This property value
	 * is an integer that represents the horizontal position in pixels.
	 *
	 * <p>The units of horizontal scrolling are pixels, whereas the units of
	 * vertical scrolling are lines. Horizontal scrolling is measured in pixels
	 * because most fonts you typically use are proportionally spaced; that is,
	 * the characters can have different widths. Flash Player performs vertical
	 * scrolling by line because users usually want to see a complete line of
	 * text rather than a partial line. Even if a line uses multiple fonts, the
	 * height of the line adjusts to fit the largest font in use.</p>
	 *
	 * <p><b>Note: </b>The <code>scrollH</code> property is zero-based, not
	 * 1-based like the <code>scrollV</code> vertical scrolling property.</p>]]></haxe_doc>
		</scrollH>
		<scrollV public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The vertical position of text in a text field. The <code>scrollV</code>
	 * property is useful for directing users to a specific paragraph in a long
	 * passage, or creating scrolling text fields.
	 *
	 * <p>The units of vertical scrolling are lines, whereas the units of
	 * horizontal scrolling are pixels. If the first line displayed is the first
	 * line in the text field, scrollV is set to 1(not 0). Horizontal scrolling
	 * is measured in pixels because most fonts are proportionally spaced; that
	 * is, the characters can have different widths. Flash performs vertical
	 * scrolling by line because users usually want to see a complete line of
	 * text rather than a partial line. Even if there are multiple fonts on a
	 * line, the height of the line adjusts to fit the largest font in use.</p>]]></haxe_doc>
		</scrollV>
		<selectable public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether the text field is selectable. The
	 * value <code>true</code> indicates that the text is selectable. The
	 * <code>selectable</code> property controls whether a text field is
	 * selectable, not whether a text field is editable. A dynamic text field can
	 * be selectable even if it is not editable. If a dynamic text field is not
	 * selectable, the user cannot select its text.
	 *
	 * <p>If <code>selectable</code> is set to <code>false</code>, the text in
	 * the text field does not respond to selection commands from the mouse or
	 * keyboard, and the text cannot be copied with the Copy command. If
	 * <code>selectable</code> is set to <code>true</code>, the text in the text
	 * field can be selected with the mouse or keyboard, and the text can be
	 * copied with the Copy command. You can select text this way even if the
	 * text field is a dynamic text field instead of an input text field. </p>
	 * 
	 * @default true]]></haxe_doc>
		</selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The zero-based character index value of the first character in the current
	 * selection. For example, the first character is 0, the second character is
	 * 1, and so on. If no text is selected, this property is the value of
	 * <code>caretIndex</code>.]]></haxe_doc>
		</selectionBeginIndex>
		<selectionEndIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The zero-based character index value of the last character in the current
	 * selection. For example, the first character is 0, the second character is
	 * 1, and so on. If no text is selected, this property is the value of
	 * <code>caretIndex</code>.]]></haxe_doc>
		</selectionEndIndex>
		<sharpness public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The sharpness of the glyph edges in this text field. This property applies
	 * only if the <code>flash.text.AntiAliasType</code> property of the text
	 * field is set to <code>flash.text.AntiAliasType.ADVANCED</code>. The range
	 * for <code>sharpness</code> is a number from -400 to 400. If you attempt to
	 * set <code>sharpness</code> to a value outside that range, Flash sets the
	 * property to the nearest value in the range(either -400 or 400).
	 * 
	 * @default 0]]></haxe_doc>
		</sharpness>
		<text public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Attaches a style sheet to the text field. For information on creating
	 * style sheets, see the StyleSheet class and the <i>ActionScript 3.0
	 * Developer's Guide</i>.
	 *
	 * <p>You can change the style sheet associated with a text field at any
	 * time. If you change the style sheet in use, the text field is redrawn with
	 * the new style sheet. You can set the style sheet to <code>null</code> or
	 * <code>undefined</code> to remove the style sheet. If the style sheet in
	 * use is removed, the text field is redrawn without a style sheet. </p>
	 *
	 * <p><b>Note:</b> If the style sheet is removed, the contents of both
	 * <code>TextField.text</code> and <code> TextField.htmlText</code> change to
	 * incorporate the formatting previously applied by the style sheet. To
	 * preserve the original <code>TextField.htmlText</code> contents without the
	 * formatting, save the value in a variable before removing the style
	 * sheet.</p>]]></haxe_doc>
		</text>
		<textColor public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The color of the text in a text field, in hexadecimal format. The
	 * hexadecimal color system uses six digits to represent color values. Each
	 * digit has 16 possible values or characters. The characters range from 0-9
	 * and then A-F. For example, black is <code>0x000000</code>; white is
	 * <code>0xFFFFFF</code>.
	 * 
	 * @default 0(0x000000)]]></haxe_doc>
		</textColor>
		<textHeight public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The height of the text in pixels.</haxe_doc>
		</textHeight>
		<textWidth public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The interaction mode property, Default value is
	 * TextInteractionMode.NORMAL. On mobile platforms, the normal mode implies
	 * that the text can be scrolled but not selected. One can switch to the
	 * selectable mode through the in-built context menu on the text field. On
	 * Desktop, the normal mode implies that the text is in scrollable as well as
	 * selection mode.</haxe_doc>
		</textWidth>
		<thickness public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* The thickness of the glyph edges in this text field. This property applies
	 * only when <code>flash.text.AntiAliasType</code> is set to
	 * <code>flash.text.AntiAliasType.ADVANCED</code>.
	 *
	 * <p>The range for <code>thickness</code> is a number from -200 to 200. If
	 * you attempt to set <code>thickness</code> to a value outside that range,
	 * the property is set to the nearest value in the range(either -200 or
	 * 200).</p>
	 * 
	 * @default 0]]></haxe_doc>
		</thickness>
		<type public="1">
			<e path="flash.text.TextFieldType"/>
			<haxe_doc><![CDATA[* The type of the text field. Either one of the following TextFieldType
	 * constants: <code>TextFieldType.DYNAMIC</code>, which specifies a dynamic
	 * text field, which a user cannot edit, or <code>TextFieldType.INPUT</code>,
	 * which specifies an input text field, which a user can edit.
	 * 
	 * @default dynamic
	 * @throws ArgumentError The <code>type</code> specified is not a member of
	 *                       flash.text.TextFieldType.]]></haxe_doc>
		</type>
		<useRichTextClipboard public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to copy and paste the text formatting along with the
	 * text. When set to <code>true</code>, Flash Player copies and pastes
	 * formatting(such as alignment, bold, and italics) when you copy and paste
	 * between text fields. Both the origin and destination text fields for the
	 * copy and paste procedure must have <code>useRichTextClipboard</code> set
	 * to <code>true</code>. The default value is <code>false</code>.]]></haxe_doc>
		</useRichTextClipboard>
		<wordWrap public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether the text field has word wrap. If
	 * the value of <code>wordWrap</code> is <code>true</code>, the text field
	 * has word wrap; if the value is <code>false</code>, the text field does not
	 * have word wrap. The default value is <code>false</code>.]]></haxe_doc>
		</wordWrap>
		<appendText public="1" set="method">
			<f a="newText">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Appends the string specified by the <code>newText</code> parameter to the
	 * end of the text of the text field. This method is more efficient than an
	 * addition assignment(<code>+=</code>) on a <code>text</code> property
	 * (such as <code>someTextField.text += moreText</code>), particularly for a
	 * text field that contains a significant amount of content.
	 * 
	 * @param newText The string to append to the existing text.]]></haxe_doc>
		</appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method">
			<f a="charIndex">
				<x path="Int"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Returns a rectangle that is the bounding box of the character.
	 * 
	 * @param charIndex The zero-based index value for the character(for
	 *                  example, the first position is 0, the second position is
	 *                  1, and so on).
	 * @return A rectangle with <code>x</code> and <code>y</code> minimum and
	 *         maximum values defining the bounding box of the character.]]></haxe_doc>
		</getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the zero-based index value of the character at the point specified
	 * by the <code>x</code> and <code>y</code> parameters.
	 * 
	 * @param x The <i>x</i> coordinate of the character.
	 * @param y The <i>y</i> coordinate of the character.
	 * @return The zero-based index value of the character(for example, the
	 *         first position is 0, the second position is 1, and so on). Returns
	 *         -1 if the point is not over any character.]]></haxe_doc>
		</getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method">
			<f a="charIndex">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Given a character index, returns the index of the first character in the
	 * same paragraph.
	 * 
	 * @param charIndex The zero-based index value of the character(for example,
	 *                  the first character is 0, the second character is 1, and
	 *                  so on).
	 * @return The zero-based index value of the first character in the same
	 *         paragraph.
	 * @throws RangeError The character index specified is out of range.</haxe_doc>
		</getFirstCharInParagraph>
		<getImageReference public="1" set="method">
			<f a="id">
				<c path="String"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns a DisplayObject reference for the given <code>id</code>, for an
	 * image or SWF file that has been added to an HTML-formatted text field by
	 * using an <code><img></code> tag. The <code><img></code> tag is in the
	 * following format:
	 *
	 * <p><pre xml:space="preserve"><code> <img src = 'filename.jpg' id =
	 * 'instanceName' ></code></pre></p>
	 * 
	 * @param id The <code>id</code> to match(in the <code>id</code> attribute
	 *           of the <code><img></code> tag).
	 * @return The display object corresponding to the image or SWF file with the
	 *         matching <code>id</code> attribute in the <code><img></code> tag
	 *         of the text field. For media loaded from an external source, this
	 *         object is a Loader object, and, once loaded, the media object is a
	 *         child of that Loader object. For media embedded in the SWF file,
	 *         it is the loaded object. If no <code><img></code> tag with the
	 *         matching <code>id</code> exists, the method returns
	 *         <code>null</code>.]]></haxe_doc>
		</getImageReference>
		<getLineIndexAtPoint public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the zero-based index value of the line at the point specified by
	 * the <code>x</code> and <code>y</code> parameters.
	 * 
	 * @param x The <i>x</i> coordinate of the line.
	 * @param y The <i>y</i> coordinate of the line.
	 * @return The zero-based index value of the line(for example, the first
	 *         line is 0, the second line is 1, and so on). Returns -1 if the
	 *         point is not over any line.]]></haxe_doc>
		</getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method">
			<f a="charIndex">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the zero-based index value of the line containing the character
	 * specified by the <code>charIndex</code> parameter.
	 * 
	 * @param charIndex The zero-based index value of the character(for example,
	 *                  the first character is 0, the second character is 1, and
	 *                  so on).
	 * @return The zero-based index value of the line.
	 * @throws RangeError The character index specified is out of range.]]></haxe_doc>
		</getLineIndexOfChar>
		<getLineLength public="1" set="method">
			<f a="lineIndex">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the number of characters in a specific text line.
	 * 
	 * @param lineIndex The line number for which you want the length.
	 * @return The number of characters in the line.
	 * @throws RangeError The line number specified is out of range.</haxe_doc>
		</getLineLength>
		<getLineMetrics public="1" set="method">
			<f a="lineIndex">
				<x path="Int"/>
				<c path="flash.text.TextLineMetrics"/>
			</f>
			<haxe_doc>* Returns metrics information about a given text line.
	 * 
	 * @param lineIndex The line number for which you want metrics information.
	 * @return A TextLineMetrics object.
	 * @throws RangeError The line number specified is out of range.</haxe_doc>
		</getLineMetrics>
		<getLineOffset public="1" set="method">
			<f a="lineIndex">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the character index of the first character in the line that the
	 * <code>lineIndex</code> parameter specifies.
	 * 
	 * @param lineIndex The zero-based index value of the line(for example, the
	 *                  first line is 0, the second line is 1, and so on).
	 * @return The zero-based index value of the first character in the line.
	 * @throws RangeError The line number specified is out of range.]]></haxe_doc>
		</getLineOffset>
		<getLineText public="1" set="method">
			<f a="lineIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Returns the text of the line specified by the <code>lineIndex</code>
	 * parameter.
	 * 
	 * @param lineIndex The zero-based index value of the line(for example, the
	 *                  first line is 0, the second line is 1, and so on).
	 * @return The text string contained in the specified line.
	 * @throws RangeError The line number specified is out of range.]]></haxe_doc>
		</getLineText>
		<getParagraphLength public="1" set="method">
			<f a="charIndex">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Given a character index, returns the length of the paragraph containing
	 * the given character. The length is relative to the first character in the
	 * paragraph(as returned by <code>getFirstCharInParagraph()</code>), not to
	 * the character index passed in.
	 * 
	 * @param charIndex The zero-based index value of the character(for example,
	 *                  the first character is 0, the second character is 1, and
	 *                  so on).
	 * @return Returns the number of characters in the paragraph.
	 * @throws RangeError The character index specified is out of range.]]></haxe_doc>
		</getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.text.TextFormat"/>
			</f>
			<haxe_doc><![CDATA[* Returns a TextFormat object that contains formatting information for the
	 * range of text that the <code>beginIndex</code> and <code>endIndex</code>
	 * parameters specify. Only properties that are common to the entire text
	 * specified are set in the resulting TextFormat object. Any property that is
	 * <i>mixed</i>, meaning that it has different values at different points in
	 * the text, has a value of <code>null</code>.
	 *
	 * <p>If you do not specify values for these parameters, this method is
	 * applied to all the text in the text field. </p>
	 *
	 * <p>The following table describes three possible usages:</p>
	 * 
	 * @return The TextFormat object that represents the formatting properties
	 *         for the specified text.
	 * @throws RangeError The <code>beginIndex</code> or <code>endIndex</code>
	 *                    specified is out of range.]]></haxe_doc>
		</getTextFormat>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Replaces the current selection with the contents of the <code>value</code>
	 * parameter. The text is inserted at the position of the current selection,
	 * using the current default character format and default paragraph format.
	 * The text is not treated as HTML.
	 *
	 * <p>You can use the <code>replaceSelectedText()</code> method to insert and
	 * delete text without disrupting the character and paragraph formatting of
	 * the rest of the text.</p>
	 *
	 * <p><b>Note:</b> This method does not work if a style sheet is applied to
	 * the text field.</p>
	 * 
	 * @param value The string to replace the currently selected text.
	 * @throws Error This method cannot be used on a text field with a style
	 *               sheet.]]></haxe_doc>
		</replaceSelectedText>
		<replaceText public="1" set="method">
			<f a="beginIndex:endIndex:newText">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Replaces the range of characters that the <code>beginIndex</code> and
	 * <code>endIndex</code> parameters specify with the contents of the
	 * <code>newText</code> parameter. As designed, the text from
	 * <code>beginIndex</code> to <code>endIndex-1</code> is replaced.
	 *
	 * <p><b>Note:</b> This method does not work if a style sheet is applied to
	 * the text field.</p>
	 * 
	 * @param beginIndex The zero-based index value for the start position of the
	 *                   replacement range.
	 * @param endIndex   The zero-based index position of the first character
	 *                   after the desired text span.
	 * @param newText    The text to use to replace the specified range of
	 *                   characters.
	 * @throws Error This method cannot be used on a text field with a style
	 *               sheet.]]></haxe_doc>
		</replaceText>
		<setSelection public="1" set="method">
			<f a="beginIndex:endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets as selected the text designated by the index values of the first and
	 * last characters, which are specified with the <code>beginIndex</code> and
	 * <code>endIndex</code> parameters. If the two parameter values are the
	 * same, this method sets the insertion point, as if you set the
	 * <code>caretIndex</code> property.
	 * 
	 * @param beginIndex The zero-based index value of the first character in the
	 *                   selection(for example, the first character is 0, the
	 *                   second character is 1, and so on).
	 * @param endIndex   The zero-based index value of the last character in the
	 *                   selection.]]></haxe_doc>
		</setSelection>
		<setTextFormat public="1" set="method">
			<f a="format:?beginIndex:?endIndex">
				<c path="flash.text.TextFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Applies the text formatting that the <code>format</code> parameter
	 * specifies to the specified text in a text field. The value of
	 * <code>format</code> must be a TextFormat object that specifies the desired
	 * text formatting changes. Only the non-null properties of
	 * <code>format</code> are applied to the text field. Any property of
	 * <code>format</code> that is set to <code>null</code> is not applied. By
	 * default, all of the properties of a newly created TextFormat object are
	 * set to <code>null</code>.
	 *
	 * <p><b>Note:</b> This method does not work if a style sheet is applied to
	 * the text field.</p>
	 *
	 * <p>The <code>setTextFormat()</code> method changes the text formatting
	 * applied to a range of characters or to the entire body of text in a text
	 * field. To apply the properties of format to all text in the text field, do
	 * not specify values for <code>beginIndex</code> and <code>endIndex</code>.
	 * To apply the properties of the format to a range of text, specify values
	 * for the <code>beginIndex</code> and the <code>endIndex</code> parameters.
	 * You can use the <code>length</code> property to determine the index
	 * values.</p>
	 *
	 * <p>The two types of formatting information in a TextFormat object are
	 * character level formatting and paragraph level formatting. Each character
	 * in a text field can have its own character formatting settings, such as
	 * font name, font size, bold, and italic.</p>
	 *
	 * <p>For paragraphs, the first character of the paragraph is examined for
	 * the paragraph formatting settings for the entire paragraph. Examples of
	 * paragraph formatting settings are left margin, right margin, and
	 * indentation.</p>
	 *
	 * <p>Any text inserted manually by the user, or replaced by the
	 * <code>replaceSelectedText()</code> method, receives the default text field
	 * formatting for new text, and not the formatting specified for the text
	 * insertion point. To set the default formatting for new text, use
	 * <code>defaultTextFormat</code>.</p>
	 * 
	 * @param format A TextFormat object that contains character and paragraph
	 *               formatting information.
	 * @throws Error      This method cannot be used on a text field with a style
	 *                    sheet.
	 * @throws RangeError The <code>beginIndex</code> or <code>endIndex</code>
	 *                    specified is out of range.]]></haxe_doc>
		</setTextFormat>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a new TextField instance. After you create the TextField instance,
	 * call the <code>addChild()</code> or <code>addChildAt()</code> method of
	 * the parent DisplayObjectContainer object to add the TextField instance to
	 * the display list.
	 *
	 * <p>The default size for a text field is 100 x 100 pixels.</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The TextField class is used to create display objects for text display and
 * input. <ph outputclass="flexonly">You can use the TextField class to
 * perform low-level text rendering. However, in Flex, you typically use the
 * Label, Text, TextArea, and TextInput controls to process text. <ph
 * outputclass="flashonly">You can give a text field an instance name in the
 * Property inspector and use the methods and properties of the TextField
 * class to manipulate it with ActionScript. TextField instance names are
 * displayed in the Movie Explorer and in the Insert Target Path dialog box in
 * the Actions panel.
 *
 * <p>To create a text field dynamically, use the <code>TextField()</code>
 * constructor.</p>
 *
 * <p>The methods of the TextField class let you set, select, and manipulate
 * text in a dynamic or input text field that you create during authoring or
 * at runtime. </p>
 *
 * <p>ActionScript provides several ways to format your text at runtime. The
 * TextFormat class lets you set character and paragraph formatting for
 * TextField objects. You can apply Cascading Style Sheets(CSS) styles to
 * text fields by using the <code>TextField.styleSheet</code> property and the
 * StyleSheet class. You can use CSS to style built-in HTML tags, define new
 * formatting tags, or apply styles. You can assign HTML formatted text, which
 * optionally uses CSS styles, directly to a text field. HTML text that you
 * assign to a text field can contain embedded media(movie clips, SWF files,
 * GIF files, PNG files, and JPEG files). The text wraps around the embedded
 * media in the same way that a web browser wraps text around media embedded
 * in an HTML document. </p>
 *
 * <p>Flash Player supports a subset of HTML tags that you can use to format
 * text. See the list of supported HTML tags in the description of the
 * <code>htmlText</code> property.</p>
 * 
 * @event change                    Dispatched after a control value is
 *                                  modified, unlike the
 *                                  <code>textInput</code> event, which is
 *                                  dispatched before the value is modified.
 *                                  Unlike the W3C DOM Event Model version of
 *                                  the <code>change</code> event, which
 *                                  dispatches the event only after the
 *                                  control loses focus, the ActionScript 3.0
 *                                  version of the <code>change</code> event
 *                                  is dispatched any time the control
 *                                  changes. For example, if a user types text
 *                                  into a text field, a <code>change</code>
 *                                  event is dispatched after every keystroke.
 * @event link                      Dispatched when a user clicks a hyperlink
 *                                  in an HTML-enabled text field, where the
 *                                  URL begins with "event:". The remainder of
 *                                  the URL after "event:" is placed in the
 *                                  text property of the LINK event.
 *
 *                                  <p><b>Note:</b> The default behavior,
 *                                  adding the text to the text field, occurs
 *                                  only when Flash Player generates the
 *                                  event, which in this case happens when a
 *                                  user attempts to input text. You cannot
 *                                  put text into a text field by sending it
 *                                  <code>textInput</code> events.</p>
 * @event scroll                    Dispatched by a TextField object
 *                                  <i>after</i> the user scrolls.
 * @event textInput                 Flash Player dispatches the
 *                                  <code>textInput</code> event when a user
 *                                  enters one or more characters of text.
 *                                  Various text input methods can generate
 *                                  this event, including standard keyboards,
 *                                  input method editors(IMEs), voice or
 *                                  speech recognition systems, and even the
 *                                  act of pasting plain text with no
 *                                  formatting or style information.
 * @event textInteractionModeChange Flash Player dispatches the
 *                                  <code>textInteractionModeChange</code>
 *                                  event when a user changes the interaction
 *                                  mode of a text field. for example on
 *                                  Android, one can toggle from NORMAL mode
 *                                  to SELECTION mode using context menu
 *                                  options]]></haxe_doc>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/TextFieldAutoSize.hx">
		<CENTER><haxe_doc>* Specifies that the text is to be treated as center-justified text. Any
	 * resizing of a single line of a text field is equally distributed to both
	 * the right and left sides.</haxe_doc></CENTER>
		<LEFT><haxe_doc>* Specifies that the text is to be treated as left-justified text, meaning
	 * that the left side of the text field remains fixed and any resizing of a
	 * single line is on the right side.</haxe_doc></LEFT>
		<NONE><haxe_doc>* Specifies that no resizing is to occur.</haxe_doc></NONE>
		<RIGHT><haxe_doc>* Specifies that the text is to be treated as right-justified text, meaning
	 * that the right side of the text field remains fixed and any resizing of a
	 * single line is on the left side.</haxe_doc></RIGHT>
		<haxe_doc><![CDATA[* The TextFieldAutoSize class is an enumeration of constant values used in
 * setting the <code>autoSize</code> property of the TextField class.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/TextFieldType.hx">
		<DYNAMIC><haxe_doc><![CDATA[* Used to specify a <code>dynamic</code> TextField.]]></haxe_doc></DYNAMIC>
		<INPUT><haxe_doc><![CDATA[* Used to specify an <code>input</code> TextField.]]></haxe_doc></INPUT>
		<haxe_doc><![CDATA[* The TextFieldType class is an enumeration of constant values used in
 * setting the <code>type</code> property of the TextField class.]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/TextFormat.hx" extern="1">
		<align public="1">
			<e path="flash.text.TextFormatAlign"/>
			<haxe_doc><![CDATA[* Indicates the alignment of the paragraph. Valid values are TextFormatAlign
	 * constants.
	 * 
	 * @default TextFormatAlign.LEFT
	 * @throws ArgumentError The <code>align</code> specified is not a member of
	 *                       flash.text.TextFormatAlign.]]></haxe_doc>
		</align>
		<blockIndent public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* Indicates the block indentation in pixels. Block indentation is applied to
	 * an entire block of text; that is, to all lines of the text. In contrast,
	 * normal indentation(<code>TextFormat.indent</code>) affects only the first
	 * line of each paragraph. If this property is <code>null</code>, the
	 * TextFormat object does not specify block indentation(block indentation is
	 * 0).]]></haxe_doc>
		</blockIndent>
		<bold public="1">
			<t path="Null"><x path="Bool"/></t>
			<haxe_doc><![CDATA[* Specifies whether the text is boldface. The default value is
	 * <code>null</code>, which means no boldface is used. If the value is
	 * <code>true</code>, then the text is boldface.]]></haxe_doc>
		</bold>
		<bullet public="1">
			<t path="Null"><x path="Bool"/></t>
			<haxe_doc><![CDATA[* Indicates that the text is part of a bulleted list. In a bulleted list,
	 * each paragraph of text is indented. To the left of the first line of each
	 * paragraph, a bullet symbol is displayed. The default value is
	 * <code>null</code>, which means no bulleted list is used.]]></haxe_doc>
		</bullet>
		<color public="1">
			<t path="Null"><x path="Int"/></t>
			<haxe_doc><![CDATA[* Indicates the color of the text. A number containing three 8-bit RGB
	 * components; for example, 0xFF0000 is red, and 0x00FF00 is green. The
	 * default value is <code>null</code>, which means that Flash Player uses the
	 * color black(0x000000).]]></haxe_doc>
		</color>
		<font public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The name of the font for text in this text format, as a string. The
	 * default value is <code>null</code>, which means that Flash Player uses
	 * Times New Roman font for the text.]]></haxe_doc>
		</font>
		<indent public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* Indicates the indentation from the left margin to the first character in
	 * the paragraph. The default value is <code>null</code>, which indicates
	 * that no indentation is used.]]></haxe_doc>
		</indent>
		<italic public="1">
			<t path="Null"><x path="Bool"/></t>
			<haxe_doc><![CDATA[* Indicates whether text in this text format is italicized. The default
	 * value is <code>null</code>, which means no italics are used.]]></haxe_doc>
		</italic>
		<kerning public="1">
			<t path="Null"><x path="Bool"/></t>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether kerning is enabled
	 * (<code>true</code>) or disabled(<code>false</code>). Kerning adjusts the
	 * pixels between certain character pairs to improve readability, and should
	 * be used only when necessary, such as with headings in large fonts. Kerning
	 * is supported for embedded fonts only.
	 *
	 * <p>Certain fonts such as Verdana and monospaced fonts, such as Courier
	 * New, do not support kerning.</p>
	 *
	 * <p>The default value is <code>null</code>, which means that kerning is not
	 * enabled.</p>]]></haxe_doc>
		</kerning>
		<leading public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* An integer representing the amount of vertical space(called
	 * <i>leading</i>) between lines. The default value is <code>null</code>,
	 * which indicates that the amount of leading used is 0.]]></haxe_doc>
		</leading>
		<leftMargin public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* The left margin of the paragraph, in pixels. The default value is
	 * <code>null</code>, which indicates that the left margin is 0 pixels.]]></haxe_doc>
		</leftMargin>
		<letterSpacing public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* A number representing the amount of space that is uniformly distributed
	 * between all characters. The value specifies the number of pixels that are
	 * added to the advance after each character. The default value is
	 * <code>null</code>, which means that 0 pixels of letter spacing is used.
	 * You can use decimal values such as <code>1.75</code>.]]></haxe_doc>
		</letterSpacing>
		<rightMargin public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* The right margin of the paragraph, in pixels. The default value is
	 * <code>null</code>, which indicates that the right margin is 0 pixels.]]></haxe_doc>
		</rightMargin>
		<size public="1">
			<t path="Null"><x path="Float"/></t>
			<haxe_doc><![CDATA[* The size in pixels of text in this text format. The default value is
	 * <code>null</code>, which means that a size of 12 is used.]]></haxe_doc>
		</size>
		<tabStops public="1">
			<c path="Array"><x path="Int"/></c>
			<haxe_doc><![CDATA[* Specifies custom tab stops as an array of non-negative integers. Each tab
	 * stop is specified in pixels. If custom tab stops are not specified
	 * (<code>null</code>), the default tab stop is 4(average character width).]]></haxe_doc>
		</tabStops>
		<target public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the target window where the hyperlink is displayed. If the
	 * target window is an empty string, the text is displayed in the default
	 * target window <code>_self</code>. You can choose a custom name or one of
	 * the following four names: <code>_self</code> specifies the current frame
	 * in the current window, <code>_blank</code> specifies a new window,
	 * <code>_parent</code> specifies the parent of the current frame, and
	 * <code>_top</code> specifies the top-level frame in the current window. If
	 * the <code>TextFormat.url</code> property is an empty string or
	 * <code>null</code>, you can get or set this property, but the property will
	 * have no effect.]]></haxe_doc>
		</target>
		<underline public="1">
			<t path="Null"><x path="Bool"/></t>
			<haxe_doc><![CDATA[* Indicates whether the text that uses this text format is underlined
	 * (<code>true</code>) or not(<code>false</code>). This underlining is
	 * similar to that produced by the <code><U></code> tag, but the latter is
	 * not true underlining, because it does not skip descenders correctly. The
	 * default value is <code>null</code>, which indicates that underlining is
	 * not used.]]></haxe_doc>
		</underline>
		<url public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the target URL for the text in this text format. If the
	 * <code>url</code> property is an empty string, the text does not have a
	 * hyperlink. The default value is <code>null</code>, which indicates that
	 * the text does not have a hyperlink.
	 *
	 * <p><b>Note:</b> The text with the assigned text format must be set with
	 * the <code>htmlText</code> property for the hyperlink to work.</p>]]></haxe_doc>
		</url>
		<new public="1" set="method">
			<f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
				<c path="String"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<e path="flash.text.TextFormatAlign"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a TextFormat object with the specified properties. You can then
	 * change the properties of the TextFormat object to change the formatting of
	 * text fields.
	 *
	 * <p>Any parameter may be set to <code>null</code> to indicate that it is
	 * not defined. All of the parameters are optional; any omitted parameters
	 * are treated as <code>null</code>.</p>
	 * 
	 * @param font        The name of a font for text as a string.
	 * @param size        An integer that indicates the size in pixels.
	 * @param color       The color of text using this text format. A number
	 *                    containing three 8-bit RGB components; for example,
	 *                    0xFF0000 is red, and 0x00FF00 is green.
	 * @param bold        A Boolean value that indicates whether the text is
	 *                    boldface.
	 * @param italic      A Boolean value that indicates whether the text is
	 *                    italicized.
	 * @param underline   A Boolean value that indicates whether the text is
	 *                    underlined.
	 * @param url         The URL to which the text in this text format
	 *                    hyperlinks. If <code>url</code> is an empty string, the
	 *                    text does not have a hyperlink.
	 * @param target      The target window where the hyperlink is displayed. If
	 *                    the target window is an empty string, the text is
	 *                    displayed in the default target window
	 *                    <code>_self</code>. If the <code>url</code> parameter
	 *                    is set to an empty string or to the value
	 *                    <code>null</code>, you can get or set this property,
	 *                    but the property will have no effect.
	 * @param align       The alignment of the paragraph, as a TextFormatAlign
	 *                    value.
	 * @param leftMargin  Indicates the left margin of the paragraph, in pixels.
	 * @param rightMargin Indicates the right margin of the paragraph, in pixels.
	 * @param indent      An integer that indicates the indentation from the left
	 *                    margin to the first character in the paragraph.
	 * @param leading     A number that indicates the amount of leading vertical
	 *                    space between lines.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The TextFormat class represents character formatting information. Use the
 * TextFormat class to create specific text formatting for text fields. You
 * can apply text formatting to both static and dynamic text fields. The
 * properties of the TextFormat class apply to device and embedded fonts.
 * However, for embedded fonts, bold and italic text actually require specific
 * fonts. If you want to display bold or italic text with an embedded font,
 * you need to embed the bold and italic variations of that font.
 *
 * <p> You must use the constructor <code>new TextFormat()</code> to create a
 * TextFormat object before setting its properties. When you apply a
 * TextFormat object to a text field using the
 * <code>TextField.defaultTextFormat</code> property or the
 * <code>TextField.setTextFormat()</code> method, only its defined properties
 * are applied. Use the <code>TextField.defaultTextFormat</code> property to
 * apply formatting BEFORE you add text to the <code>TextField</code>, and the
 * <code>setTextFormat()</code> method to add formatting AFTER you add text to
 * the <code>TextField</code>. The TextFormat properties are <code>null</code>
 * by default because if you don't provide values for the properties, Flash
 * Player uses its own default formatting. The default formatting that Flash
 * Player uses for each property(if property's value is <code>null</code>) is
 * as follows:</p>
 *
 * <p>The default formatting for each property is also described in each
 * property description.</p>]]></haxe_doc>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/TextFormatAlign.hx">
		<CENTER><haxe_doc><![CDATA[* Constant; centers the text in the text field. Use the syntax
	 * <code>TextFormatAlign.CENTER</code>.]]></haxe_doc></CENTER>
		<JUSTIFY><haxe_doc><![CDATA[* Constant; justifies text within the text field. Use the syntax
	 * <code>TextFormatAlign.JUSTIFY</code>.]]></haxe_doc></JUSTIFY>
		<LEFT><haxe_doc><![CDATA[* Constant; aligns text to the left within the text field. Use the syntax
	 * <code>TextFormatAlign.LEFT</code>.]]></haxe_doc></LEFT>
		<RIGHT><haxe_doc><![CDATA[* Constant; aligns text to the right within the text field. Use the syntax
	 * <code>TextFormatAlign.RIGHT</code>.]]></haxe_doc></RIGHT>
		<haxe_doc>* The TextFormatAlign class provides values for text alignment in the
 * TextFormat class.</haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1">
			<x path="Float"/>
			<haxe_doc>* The ascent value of the text is the length from the baseline to the top of
         * the line height in pixels.</haxe_doc>
		</ascent>
		<descent public="1">
			<x path="Float"/>
			<haxe_doc>* The descent value of the text is the length from the baseline to the
	 * bottom depth of the line in pixels.</haxe_doc>
		</descent>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* The height value of the text of the selected lines (not necessarily the
         * complete text) in pixels. The height of the text line does not include the
         * gutter height.</haxe_doc>
		</height>
		<leading public="1">
			<x path="Float"/>
			<haxe_doc>* The leading value is the measurement of the vertical distance between the
         * lines of text.</haxe_doc>
		</leading>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* The width value is the width of the text of the selected lines (not 
         * necessarily the complete text) in pixels. The width of the text line is
         * not the same as the width of the text field. The width of the text line is
         * relative to the text field width, minus the gutter width of 4 pixels 
         * (2 pixels on each side).</haxe_doc>
		</width>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* The x value is the left position of the first character in pixels. This
         * value includes the margin, indent (if any), and gutter widths.</haxe_doc>
		</x>
		<new public="1" set="method">
			<f a="?x:?width:?height:?ascent:?descent:?leading">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a TextLineMetrics object. The TextLineMetrics object contains
         * information about the text metrics of a line of text in a text field.
         * Objects of this class are returned by the 
         * flash.text.TextField.getLineMetrics() method.
	 *
	 * @param x           The left position of the first character in pixels.
	 * @param width       The width of the text of the selected lines (not 
         *                    necessarily the complete text) in pixels.
	 * @param height      The height of the text of the selected lines (not
         *                    necessarily the complete text) in pixels.
	 * @param ascent      The length from the baseline to the top of the line
         *                    height in pixels.
	 * @param descent     The length from the baseline to the bottom depth of
         *                    the line in pixels.
	 * @param leading     The measurement of the vertical distance between the
         *                    lines of text.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The TextLineMetrics class contains information about the text position and
 * measurements of a line of text within a text field. All measurements are in
 * pixels. Objects of this class are returned by the 
 * <code>flash.text.TextField.getLineMetrics()</code> method.]]></haxe_doc>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><x path="Int"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="Int"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
	</class>
	<class path="flash.utils.ByteArray" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<defaultObjectEncoding public="1" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* Denotes the default object encoding for the ByteArray class to use for a
	 * new ByteArray instance. When you create a new ByteArray instance, the
	 * encoding on that instance starts with the value of
	 * <code>defaultObjectEncoding</code>. The <code>defaultObjectEncoding</code>
	 * property is initialized to <code>ObjectEncoding.AMF3</code>.
	 *
	 * <p>When an object is written to or read from binary data, the
	 * <code>objectEncoding</code> value is used to determine whether the
	 * ActionScript 3.0, ActionScript2.0, or ActionScript 1.0 format should be
	 * used. The value is a constant from the ObjectEncoding class.</p>]]></haxe_doc>
		</defaultObjectEncoding>
		<bytesAvailable public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The number of bytes of data available for reading from the current
	 * position in the byte array to the end of the array.
	 *
	 * <p>Use the <code>bytesAvailable</code> property in conjunction with the
	 * read methods each time you access a ByteArray object to ensure that you
	 * are reading valid data.</p>]]></haxe_doc>
		</bytesAvailable>
		<endian public="1">
			<e path="flash.utils.Endian"/>
			<haxe_doc><![CDATA[* Changes or reads the byte order for the data; either
	 * <code>Endian.BIG_ENDIAN</code> or <code>Endian.LITTLE_ENDIAN</code>.]]></haxe_doc>
		</endian>
		<length public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* The length of the ByteArray object, in bytes.
	 *
	 * <p>If the length is set to a value that is larger than the current length,
	 * the right side of the byte array is filled with zeros.</p>
	 *
	 * <p>If the length is set to a value that is smaller than the current
	 * length, the byte array is truncated.</p>]]></haxe_doc>
		</length>
		<objectEncoding public="1">
			<x path="Int"/>
			<haxe_doc>* Used to determine whether the ActionScript 3.0, ActionScript 2.0, or
	 * ActionScript 1.0 format should be used when writing to, or reading from, a
	 * ByteArray instance. The value is a constant from the ObjectEncoding class.</haxe_doc>
		</objectEncoding>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>* Moves, or returns the current position, in bytes, of the file pointer into
	 * the ByteArray object. This is the point at which the next call to a read
	 * method starts reading or a write method starts writing.</haxe_doc>
		</position>
		<compress public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Compresses the byte array. The entire byte array is compressed. For
	 * content running in Adobe AIR, you can specify a compression algorithm by
	 * passing a value(defined in the CompressionAlgorithm class) as the
	 * <code>algorithm</code> parameter. Flash Player supports only the default
	 * algorithm, zlib.
	 *
	 * <p>After the call, the <code>length</code> property of the ByteArray is
	 * set to the new length. The <code>position</code> property is set to the
	 * end of the byte array.</p>
	 *
	 * <p>The zlib compressed data format is described at <a
	 * href="http://www.ietf.org/rfc/rfc1950.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1950.txt</a>.</p>
	 *
	 * <p>The deflate compression algorithm is described at <a
	 * href="http://www.ietf.org/rfc/rfc1951.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1951.txt</a>.</p>
	 *
	 * <p>The deflate compression algorithm is used in several compression
	 * formats, such as zlib, gzip, some zip implementations, and others. When
	 * data is compressed using one of those compression formats, in addition to
	 * storing the compressed version of the original data, the compression
	 * format data(for example, the .zip file) includes metadata information.
	 * Some examples of the types of metadata included in various file formats
	 * are file name, file modification date/time, original file size, optional
	 * comments, checksum data, and more.</p>
	 *
	 * <p>For example, when a ByteArray is compressed using the zlib algorithm,
	 * the resulting ByteArray is structured in a specific format. Certain bytes
	 * contain metadata about the compressed data, while other bytes contain the
	 * actual compressed version of the original ByteArray data. As defined by
	 * the zlib compressed data format specification, those bytes(that is, the
	 * portion containing the compressed version of the original data) are
	 * compressed using the deflate algorithm. Consequently those bytes are
	 * identical to the result of calling <code>compress(<ph
	 * outputclass="javascript">air.CompressionAlgorithm.DEFLATE)</code> on the
	 * original ByteArray. However, the result from <code>compress(<ph
	 * outputclass="javascript">air.CompressionAlgorithm.ZLIB)</code> includes
	 * the extra metadata, while the
	 * <code>compress(CompressionAlgorithm.DEFLATE)</code> result includes only
	 * the compressed version of the original ByteArray data and nothing
	 * else.</p>
	 *
	 * <p>In order to use the deflate format to compress a ByteArray instance's
	 * data in a specific format such as gzip or zip, you cannot simply call
	 * <code>compress(CompressionAlgorithm.DEFLATE)</code>. You must create a
	 * ByteArray structured according to the compression format's specification,
	 * including the appropriate metadata as well as the compressed data obtained
	 * using the deflate format. Likewise, in order to decode data compressed in
	 * a format such as gzip or zip, you can't simply call
	 * <code>uncompress(CompressionAlgorithm.DEFLATE)</code> on that data. First,
	 * you must separate the metadata from the compressed data, and you can then
	 * use the deflate format to decompress the compressed data.</p>
	 *]]></haxe_doc>
		</compress>
		<readBoolean public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[* Reads a Boolean value from the byte stream. A single byte is read, and
	 * <code>true</code> is returned if the byte is nonzero, <code>false</code>
	 * otherwise.
	 * 
	 * @return Returns <code>true</code> if the byte is nonzero,
	 *         <code>false</code> otherwise.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readBoolean>
		<readByte public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc><![CDATA[* Reads a signed byte from the byte stream.
	 *
	 * <p>The returned value is in the range -128 to 127.</p>
	 * 
	 * @return An integer between -128 and 127.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length">
				<c path="flash.utils.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Reads the number of data bytes, specified by the <code>length</code>
	 * parameter, from the byte stream. The bytes are read into the ByteArray
	 * object specified by the <code>bytes</code> parameter, and the bytes are
	 * written into the destination ByteArray starting at the position specified
	 * by <code>offset</code>.
	 * 
	 * @param bytes  The ByteArray object to read data into.
	 * @param offset The offset(position) in <code>bytes</code> at which the
	 *               read data should be written.
	 * @param length The number of bytes to read. The default value of 0 causes
	 *               all available data to be read.
	 * @throws EOFError   There is not sufficient data available to read.
	 * @throws RangeError The value of the supplied offset and length, combined,
	 *                    is greater than the maximum for a uint.]]></haxe_doc>
		</readBytes>
		<readDouble public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Reads an IEEE 754 double-precision(64-bit) floating-point number from the
	 * byte stream.
	 * 
	 * @return A double-precision(64-bit) floating-point number.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readDouble>
		<readFloat public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Reads an IEEE 754 single-precision(32-bit) floating-point number from the
	 * byte stream.
	 * 
	 * @return A single-precision(32-bit) floating-point number.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readFloat>
		<readInt public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc><![CDATA[* Reads a signed 32-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range -2147483648 to 2147483647.</p>
	 * 
	 * @return A 32-bit signed integer between -2147483648 and 2147483647.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readInt>
		<readMultiByte public="1" set="method">
			<f a="length:charSet">
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Reads a multibyte string of specified length from the byte stream using
	 * the specified character set.
	 * 
	 * @param length  The number of bytes from the byte stream to read.
	 * @param charSet The string denoting the character set to use to interpret
	 *                the bytes. Possible character set strings include
	 *                <code>"shift-jis"</code>, <code>"cn-gb"</code>,
	 *                <code>"iso-8859-1"</code>, and others. For a complete list,
	 *                see <a href="../../charset-codes.html">Supported Character
	 *                Sets</a>.
	 *
	 *                <p><b>Note:</b> If the value for the <code>charSet</code>
	 *                parameter is not recognized by the current system, the
	 *                application uses the system's default code page as the
	 *                character set. For example, a value for the
	 *                <code>charSet</code> parameter, as in
	 *                <code>myTest.readMultiByte(22, "iso-8859-01")</code> that
	 *                uses <code>01</code> instead of <code>1</code> might work
	 *                on your development system, but not on another system. On
	 *                the other system, the application will use the system's
	 *                default code page.</p>
	 * @return UTF-8 encoded string.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readMultiByte>
		<readObject public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>* Reads an object from the byte array, encoded in AMF serialized format.
	 * 
	 * @return The deserialized object.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readObject>
		<readShort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc><![CDATA[* Reads a signed 16-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range -32768 to 32767.</p>
	 * 
	 * @return A 16-bit signed integer between -32768 and 32767.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readShort>
		<readUTF public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Reads a UTF-8 string from the byte stream. The string is assumed to be
	 * prefixed with an unsigned short indicating the length in bytes.
	 * 
	 * @return UTF-8 encoded string.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readUTF>
		<readUTFBytes public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Reads a sequence of UTF-8 bytes specified by the <code>length</code>
	 * parameter from the byte stream and returns a string.
	 * 
	 * @param length An unsigned short indicating the length of the UTF-8 bytes.
	 * @return A string composed of the UTF-8 bytes of the specified length.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUTFBytes>
		<readUnsignedByte public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc><![CDATA[* Reads an unsigned byte from the byte stream.
	 *
	 * <p>The returned value is in the range 0 to 255. </p>
	 * 
	 * @return A 32-bit unsigned integer between 0 and 255.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUnsignedByte>
		<readUnsignedInt public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc><![CDATA[* Reads an unsigned 32-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range 0 to 4294967295. </p>
	 * 
	 * @return A 32-bit unsigned integer between 0 and 4294967295.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUnsignedInt>
		<readUnsignedShort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc><![CDATA[* Reads an unsigned 16-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range 0 to 65535. </p>
	 * 
	 * @return A 16-bit unsigned integer between 0 and 65535.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUnsignedShort>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Converts the byte array to a string. If the data in the array begins with
	 * a Unicode byte order mark, the application will honor that mark when
	 * converting to a string. If <code>System.useCodePage</code> is set to
	 * <code>true</code>, the application will treat the data in the array as
	 * being in the current system code page when converting.
	 * 
	 * @return The string representation of the byte array.]]></haxe_doc>
		</toString>
		<uncompress public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Decompresses the byte array. For content running in Adobe AIR, you can
	 * specify a compression algorithm by passing a value(defined in the
	 * CompressionAlgorithm class) as the <code>algorithm</code> parameter. The
	 * byte array must have been compressed using the same algorithm. Flash
	 * Player supports only the default algorithm, zlib.
	 *
	 * <p>After the call, the <code>length</code> property of the ByteArray is
	 * set to the new length. The <code>position</code> property is set to 0.</p>
	 *
	 * <p>The zlib compressed data format is described at <a
	 * href="http://www.ietf.org/rfc/rfc1950.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1950.txt</a>.</p>
	 *
	 * <p>The deflate compression algorithm is described at <a
	 * href="http://www.ietf.org/rfc/rfc1951.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1951.txt</a>.</p>
	 *
	 * <p>In order to decode data compressed in a format that uses the deflate
	 * compression algorithm, such as data in gzip or zip format, it will not
	 * work to call <code>uncompress(CompressionAlgorithm.DEFLATE)</code> on a
	 * ByteArray containing the compression formation data. First, you must
	 * separate the metadata that is included as part of the compressed data
	 * format from the actual compressed data. For more information, see the
	 * <code>compress()</code> method description.</p>
	 * 
	 * @throws IOError The data is not valid compressed data; it was not
	 *                 compressed with the same compression algorithm used to
	 *                 compress.]]></haxe_doc>
		</uncompress>
		<writeBoolean public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a Boolean value. A single byte is written according to the
	 * <code>value</code> parameter, either 1 if <code>true</code> or 0 if
	 * <code>false</code>.
	 * 
	 * @param value A Boolean value determining which byte is written. If the
	 *              parameter is <code>true</code>, the method writes a 1; if
	 *              <code>false</code>, the method writes a 0.]]></haxe_doc>
		</writeBoolean>
		<writeByte public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a byte to the byte stream.
	 *
	 * <p>The low 8 bits of the parameter are used. The high 24 bits are ignored.
	 * </p>
	 * 
	 * @param value A 32-bit integer. The low 8 bits are written to the byte
	 *              stream.]]></haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length">
				<c path="flash.utils.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a sequence of <code>length</code> bytes from the specified byte
	 * array, <code>bytes</code>, starting <code>offset</code>(zero-based index)
	 * bytes into the byte stream.
	 *
	 * <p>If the <code>length</code> parameter is omitted, the default length of
	 * 0 is used; the method writes the entire buffer starting at
	 * <code>offset</code>. If the <code>offset</code> parameter is also omitted,
	 * the entire buffer is written. </p>
	 *
	 * <p>If <code>offset</code> or <code>length</code> is out of range, they are
	 * clamped to the beginning and end of the <code>bytes</code> array.</p>
	 * 
	 * @param bytes  The ByteArray object.
	 * @param offset A zero-based index indicating the position into the array to
	 *               begin writing.
	 * @param length An unsigned integer indicating how far into the buffer to
	 *               write.]]></haxe_doc>
		</writeBytes>
		<writeDouble public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes an IEEE 754 double-precision(64-bit) floating-point number to the
	 * byte stream.
	 * 
	 * @param value A double-precision(64-bit) floating-point number.</haxe_doc>
		</writeDouble>
		<writeFloat public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes an IEEE 754 single-precision(32-bit) floating-point number to the
	 * byte stream.
	 * 
	 * @param value A single-precision(32-bit) floating-point number.</haxe_doc>
		</writeFloat>
		<writeInt public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes a 32-bit signed integer to the byte stream.
	 * 
	 * @param value An integer to write to the byte stream.</haxe_doc>
		</writeInt>
		<writeMultiByte public="1" set="method">
			<f a="value:charSet">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a multibyte string to the byte stream using the specified character
	 * set.
	 * 
	 * @param value   The string value to be written.
	 * @param charSet The string denoting the character set to use. Possible
	 *                character set strings include <code>"shift-jis"</code>,
	 *                <code>"cn-gb"</code>, <code>"iso-8859-1"</code>, and
	 *                others. For a complete list, see <a
	 *                href="../../charset-codes.html">Supported Character
	 *                Sets</a>.]]></haxe_doc>
		</writeMultiByte>
		<writeObject public="1" set="method">
			<f a="object">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes an object into the byte array in AMF serialized format.
	 * 
	 * @param object The object to serialize.</haxe_doc>
		</writeObject>
		<writeShort public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes a 16-bit integer to the byte stream. The low 16 bits of the
	 * parameter are used. The high 16 bits are ignored.
	 * 
	 * @param value 32-bit integer, whose low 16 bits are written to the byte
	 *              stream.</haxe_doc>
		</writeShort>
		<writeUTF public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes a UTF-8 string to the byte stream. The length of the UTF-8 string
	 * in bytes is written first, as a 16-bit integer, followed by the bytes
	 * representing the characters of the string.
	 * 
	 * @param value The string value to be written.
	 * @throws RangeError If the length is larger than 65535.</haxe_doc>
		</writeUTF>
		<writeUTFBytes public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a UTF-8 string to the byte stream. Similar to the
	 * <code>writeUTF()</code> method, but <code>writeUTFBytes()</code> does not
	 * prefix the string with a 16-bit length word.
	 * 
	 * @param value The string value to be written.]]></haxe_doc>
		</writeUTFBytes>
		<writeUnsignedInt public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes a 32-bit unsigned integer to the byte stream.
	 * 
	 * @param value An unsigned integer to write to the byte stream.</haxe_doc>
		</writeUnsignedInt>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a ByteArray instance representing a packed array of bytes, so that
	 * you can use the methods and properties in this class to optimize your data
	 * storage and stream.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The ByteArray class provides methods and properties to optimize reading,
 * writing, and working with binary data.
 *
 * <p><i>Note:</i> The ByteArray class is for advanced developers who need to
 * access data on the byte level.</p>
 *
 * <p>In-memory data is a packed array(the most compact representation for
 * the data type) of bytes, but an instance of the ByteArray class can be
 * manipulated with the standard <code>[]</code>(array access) operators. It
 * also can be read and written to as an in-memory file, using methods similar
 * to those in the URLStream and Socket classes.</p>
 *
 * <p>In addition, zlib compression and decompression are supported, as well
 * as Action Message Format(AMF) object serialization.</p>
 *
 * <p>Possible uses of the ByteArray class include the following:
 * <ul>
 *   <li>Creating a custom protocol to connect to a server.</li>
 *   <li>Writing your own URLEncoder/URLDecoder.</li>
 *   <li>Writing your own AMF/Remoting packet.</li>
 *   <li>Optimizing the size of your data by using data types.</li>
 *   <li>Working with binary data loaded from a file in Adobe<sup>®</sup>
 * AIR<sup>®</sup>.</li>
 * </ul>
 * </p>]]></haxe_doc>
	</class>
	<enum path="flash.utils.Endian" params="" file="/usr/lib/haxe/lib/openfl/1,0,6/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<haxe_doc><![CDATA[* The Endian class contains values that denote the byte order used to
 * represent multibyte numbers. The byte order is either bigEndian(most
 * significant byte first) or littleEndian(least significant byte first).
 *
 * <p>Content in Flash Player or Adobe<sup>®</sup> AIR™ can interface with
 * a server by using the binary protocol of that server, directly. Some
 * servers use the bigEndian byte order and some servers use the littleEndian
 * byte order. Most servers on the Internet use the bigEndian byte order
 * because "network byte order" is bigEndian. The littleEndian byte order is
 * popular because the Intel x86 architecture uses it. Use the endian byte
 * order that matches the protocol of the server that is sending or receiving
 * data.</p>]]></haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<typedef path="flash.utils.Object" params="" file="/usr/lib/haxe/std/flash/utils/Object.hx"><d/></typedef>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.
		
		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `e` has no package, the enum name is returned.
		
		If `e` is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.
		
		This may return the empty Array [] if all constructors of `e` require
		arguments.
		
		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.
		
		The result String does not contain any constructor arguments.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.
		
		If `e` has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.
		
		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.
	
	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.
	
	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="253" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="280" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" get="inline" set="null" line="359" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="377" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="34"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="50"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="68"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<sub public="1" set="method" line="101"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="129"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<readString public="1" set="method" line="167"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="215"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="236"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="250"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="29"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="neko.NativeString"/></typedef>
	<enum path="haxe.io.Error" params="" file="/usr/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="js.html.EventTarget" params="" file="/usr/lib/haxe/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<t path="js.html.EventListener"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="js.html.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<t path="js.html.EventListener"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<haxe_doc><![CDATA[An <code>EventTarget</code> is a DOM interface implemented by objects that can receive DOM events and have listeners for them. The most common <code>EventTarget</code>s are <a rel="internal" href="/api/js/html/Element" title="en/DOM/element">DOM elements</a>, although other objects can be <code>EventTarget</code>s too, for example <a rel="internal" href="/api/js/html/Document" title="en/DOM/document">document</a>, <a rel="internal" href="/api/js/html/DOMWindow" title="en/DOM/window">window</a>, <a rel="internal" href="/api/js/html/XMLHttpRequest" title="en/XMLHttpRequest">XMLHttpRequest</a>, and others.
<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/EventTarget">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.AbstractWorker" params="" file="/usr/lib/haxe/std/js/html/AbstractWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<meta><m n=":native"><e>"AbstractWorker"</e></m></meta>
	</class>
	<class path="js.html.Node" params="" file="/usr/lib/haxe/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></ATTRIBUTE_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" line="45" static="1"><x path="Int"/></CDATA_SECTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" line="47" static="1"><x path="Int"/></COMMENT_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" line="49" static="1"><x path="Int"/></DOCUMENT_FRAGMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" line="51" static="1"><x path="Int"/></DOCUMENT_NODE>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" line="53" static="1"><x path="Int"/></DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" line="55" static="1"><x path="Int"/></DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" line="57" static="1"><x path="Int"/></DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" line="59" static="1"><x path="Int"/></DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" line="61" static="1"><x path="Int"/></DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" line="63" static="1"><x path="Int"/></DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" line="65" static="1"><x path="Int"/></DOCUMENT_TYPE_NODE>
		<ELEMENT_NODE public="1" get="inline" set="null" line="67" static="1"><x path="Int"/></ELEMENT_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" line="69" static="1"><x path="Int"/></ENTITY_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" line="71" static="1"><x path="Int"/></ENTITY_REFERENCE_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" line="73" static="1"><x path="Int"/></NOTATION_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" line="75" static="1"><x path="Int"/></PROCESSING_INSTRUCTION_NODE>
		<TEXT_NODE public="1" get="inline" set="null" line="77" static="1"><x path="Int"/></TEXT_NODE>
		<attributes public="1" set="null"><c path="js.html.NamedNodeMap"/></attributes>
		<baseURI public="1" set="null"><c path="String"/></baseURI>
		<childNodes public="1" set="null"><c path="js.html.NodeList"/></childNodes>
		<firstChild public="1" set="null"><c path="js.html.Node"/></firstChild>
		<lastChild public="1" set="null"><c path="js.html.Node"/></lastChild>
		<localName public="1" set="null"><c path="String"/></localName>
		<namespaceURI public="1" set="null"><c path="String"/></namespaceURI>
		<nextSibling public="1" set="null"><c path="js.html.Node"/></nextSibling>
		<nodeName public="1" set="null"><c path="String"/></nodeName>
		<nodeType public="1" set="null"><x path="Int"/></nodeType>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</nodeValue>
		<ownerDocument public="1" set="null"><c path="js.html.Document"/></ownerDocument>
		<parentElement public="1" set="null"><c path="js.html.Element"/></parentElement>
		<parentNode public="1" set="null"><c path="js.html.Node"/></parentNode>
		<prefix public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</prefix>
		<previousSibling public="1" set="null"><c path="js.html.Node"/></previousSibling>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</textContent>
		<appendChild public="1" set="method"><f a="newChild">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></appendChild>
		<cloneNode public="1" set="method"><f a="deep">
	<x path="Bool"/>
	<c path="js.html.Node"/>
</f></cloneNode>
		<compareDocumentPosition public="1" set="method"><f a="other">
	<c path="js.html.Node"/>
	<x path="Int"/>
</f></compareDocumentPosition>
		<contains public="1" set="method"><f a="other">
	<c path="js.html.Node"/>
	<x path="Bool"/>
</f></contains>
		<hasAttributes public="1" set="method"><f a=""><x path="Bool"/></f></hasAttributes>
		<hasChildNodes public="1" set="method"><f a=""><x path="Bool"/></f></hasChildNodes>
		<insertBefore public="1" set="method"><f a="newChild:refChild">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></insertBefore>
		<isDefaultNamespace public="1" set="method"><f a="?namespaceURI">
	<c path="String"/>
	<x path="Bool"/>
</f></isDefaultNamespace>
		<isEqualNode public="1" set="method"><f a="other">
	<c path="js.html.Node"/>
	<x path="Bool"/>
</f></isEqualNode>
		<isSameNode public="1" set="method"><f a="other">
	<c path="js.html.Node"/>
	<x path="Bool"/>
</f></isSameNode>
		<isSupported public="1" set="method"><f a="feature:?version">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></isSupported>
		<lookupNamespaceURI public="1" set="method"><f a="?prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI>
		<lookupPrefix public="1" set="method"><f a="?namespaceURI">
	<c path="String"/>
	<c path="String"/>
</f></lookupPrefix>
		<normalize public="1" set="method"><f a=""><x path="Void"/></f></normalize>
		<removeChild public="1" set="method"><f a="oldChild">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></removeChild>
		<replaceChild public="1" set="method"><f a="newChild:oldChild">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></replaceChild>
		<haxe_doc><![CDATA[A <code>Node</code> is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.<br> The following all inherit this interface and its methods and properties (though they may return null in particular cases where not relevant; or throw an exception when adding children to a node type for which no children can exist): <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Document">Document</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Element">Element</a></code>
, <code><a rel="custom" href="/api/js/html/Attr">Attr</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/CharacterData">CharacterData</a></code>
 (which <code><a rel="custom" href="/api/js/html/Text">Text</a></code>
, <code><a rel="custom" href="/api/js/html/Comment">Comment</a></code>
, and <code><a rel="custom" href="/api/js/html/CDATASection">CDATASection</a></code>
 inherit), <code><a rel="custom" href="/api/js/html/ProcessingInstruction">ProcessingInstruction</a></code>
, <code><a rel="custom" href="/api/js/html/DocumentFragment">DocumentFragment</a></code>
, <code><a rel="custom" href="/api/js/html/DocumentType">DocumentType</a></code>
, <code><a rel="custom" href="/api/js/html/Notation">Notation</a></code>
, <code><a rel="custom" href="/api/js/html/Entity">Entity</a></code>
, <code><a rel="custom" href="/api/js/html/EntityReference">EntityReference</a></code><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Node">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/usr/lib/haxe/std/js/html/Element.hx" extern="1">
		<extends path="js.html.Node"/>
		<ALLOW_KEYBOARD_INPUT public="1" get="inline" set="null" line="90" static="1"><x path="Int"/></ALLOW_KEYBOARD_INPUT>
		<accessKey public="1"><c path="String"/></accessKey>
		<childElementCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of child nodes that are elements.</haxe_doc>
		</childElementCount>
		<children public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc><![CDATA[A live <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/XPCOM_Interface_Reference/nsIDOMNodeList&amp;ident=nsIDOMNodeList" class="new">nsIDOMNodeList</a></code>
 of the current child elements.]]></haxe_doc>
		</children>
		<classList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Token list of class attribute</haxe_doc>
		</classList>
		<className public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the class of the element.</haxe_doc>
		</className>
		<clientHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The inner height of an element.</haxe_doc>
		</clientHeight>
		<clientLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The width of the left border of an element.</haxe_doc>
		</clientLeft>
		<clientTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The width of the top border of an element.</haxe_doc>
		</clientTop>
		<clientWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The inner width of an element.</haxe_doc>
		</clientWidth>
		<contentEditable public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets whether or not the element is editable. Setter throws DOMException.</haxe_doc>
		</contentEditable>
		<dataset public="1" set="null">
			<c path="js.html.DOMStringMap"/>
			<haxe_doc>Allows access to read and write custom data attributes on the element.</haxe_doc>
		</dataset>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the directionality of the element.</haxe_doc>
		</dir>
		<draggable public="1"><x path="Bool"/></draggable>
		<dropzone public="1"><c path="String"/></dropzone>
		<firstElementChild public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc><![CDATA[The first direct child element of an element, or <code>null</code> if the element has no child elements.]]></haxe_doc>
		</firstElementChild>
		<hidden public="1"><x path="Bool"/></hidden>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the id of the element.</haxe_doc>
		</id>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the markup of the element's content. Setter throws DOMException.</haxe_doc>
		</innerHTML>
		<innerText public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</innerText>
		<isContentEditable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the content of the element can be edited. Read only.</haxe_doc>
		</isContentEditable>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the language of an element's attributes, text, and element contents.</haxe_doc>
		</lang>
		<lastElementChild public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc><![CDATA[The last direct child element of an element, or <code>null</code> if the element has no child elements.]]></haxe_doc>
		</lastElementChild>
		<nextElementSibling public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc><![CDATA[The element immediately following the given one in the tree, or <code>null</code> if there's no sibling node.]]></haxe_doc>
		</nextElementSibling>
		<offsetHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The height of an element, relative to the layout.</haxe_doc>
		</offsetHeight>
		<offsetLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The distance from this element's left border to its <code>offsetParent</code>'s left border.]]></haxe_doc>
		</offsetLeft>
		<offsetParent public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element from which all offset calculations are currently computed.</haxe_doc>
		</offsetParent>
		<offsetTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The distance from this element's top border to its <code>offsetParent</code>'s top border.]]></haxe_doc>
		</offsetTop>
		<offsetWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The width of an element, relative to the layout.</haxe_doc>
		</offsetWidth>
		<onabort public="1"><t path="js.html.EventListener"/></onabort>
		<onbeforecopy public="1"><t path="js.html.EventListener"/></onbeforecopy>
		<onbeforecut public="1"><t path="js.html.EventListener"/></onbeforecut>
		<onbeforepaste public="1"><t path="js.html.EventListener"/></onbeforepaste>
		<onblur public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the blur event.</haxe_doc>
		</onblur>
		<onchange public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the change event.</haxe_doc>
		</onchange>
		<onclick public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the click event.</haxe_doc>
		</onclick>
		<oncontextmenu public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the contextmenu event.</haxe_doc>
		</oncontextmenu>
		<oncopy public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the copy event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the cut event.</haxe_doc>
		</oncut>
		<ondblclick public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the dblclick event.</haxe_doc>
		</ondblclick>
		<ondrag public="1"><t path="js.html.EventListener"/></ondrag>
		<ondragend public="1"><t path="js.html.EventListener"/></ondragend>
		<ondragenter public="1"><t path="js.html.EventListener"/></ondragenter>
		<ondragleave public="1"><t path="js.html.EventListener"/></ondragleave>
		<ondragover public="1"><t path="js.html.EventListener"/></ondragover>
		<ondragstart public="1"><t path="js.html.EventListener"/></ondragstart>
		<ondrop public="1"><t path="js.html.EventListener"/></ondrop>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<onfocus public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the focus event.</haxe_doc>
		</onfocus>
		<onfullscreenchange public="1"><t path="js.html.EventListener"/></onfullscreenchange>
		<onfullscreenerror public="1"><t path="js.html.EventListener"/></onfullscreenerror>
		<oninput public="1"><t path="js.html.EventListener"/></oninput>
		<oninvalid public="1"><t path="js.html.EventListener"/></oninvalid>
		<onkeydown public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the keydown event.</haxe_doc>
		</onkeydown>
		<onkeypress public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the keypress event.</haxe_doc>
		</onkeypress>
		<onkeyup public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the keyup event.</haxe_doc>
		</onkeyup>
		<onload public="1"><t path="js.html.EventListener"/></onload>
		<onmousedown public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the mousedown event.</haxe_doc>
		</onmousedown>
		<onmousemove public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the mousemove event.</haxe_doc>
		</onmousemove>
		<onmouseout public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the mouseout event.</haxe_doc>
		</onmouseout>
		<onmouseover public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the mouseover event.</haxe_doc>
		</onmouseover>
		<onmouseup public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the mouseup event.</haxe_doc>
		</onmouseup>
		<onmousewheel public="1"><t path="js.html.EventListener"/></onmousewheel>
		<onpaste public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the paste event.</haxe_doc>
		</onpaste>
		<onreset public="1"><t path="js.html.EventListener"/></onreset>
		<onscroll public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>Returns the event handling code for the scroll event.</haxe_doc>
		</onscroll>
		<onsearch public="1"><t path="js.html.EventListener"/></onsearch>
		<onselect public="1"><t path="js.html.EventListener"/></onselect>
		<onselectstart public="1"><t path="js.html.EventListener"/></onselectstart>
		<onsubmit public="1"><t path="js.html.EventListener"/></onsubmit>
		<ontouchcancel public="1"><t path="js.html.EventListener"/></ontouchcancel>
		<ontouchend public="1"><t path="js.html.EventListener"/></ontouchend>
		<ontouchmove public="1"><t path="js.html.EventListener"/></ontouchmove>
		<ontouchstart public="1"><t path="js.html.EventListener"/></ontouchstart>
		<outerHTML public="1">
			<c path="String"/>
			<haxe_doc>Gets the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string. Setter throws DOMException.</haxe_doc>
		</outerHTML>
		<outerText public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</outerText>
		<previousElementSibling public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc><![CDATA[The element immediately preceding the given one in the tree, or <code>null</code> if there is no sibling element.]]></haxe_doc>
		</previousElementSibling>
		<pseudo public="1"><c path="String"/></pseudo>
		<scrollHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The scroll view height of an element.</haxe_doc>
		</scrollHeight>
		<scrollLeft public="1">
			<x path="Int"/>
			<haxe_doc>Gets/sets the left scroll offset of an element.</haxe_doc>
		</scrollLeft>
		<scrollTop public="1">
			<x path="Int"/>
			<haxe_doc>Gets/sets the top scroll offset of an element.</haxe_doc>
		</scrollTop>
		<scrollWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The scroll view width of an element.</haxe_doc>
		</scrollWidth>
		<spellcheck public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Controls <a title="en/Controlling_spell_checking_in_HTML_forms" rel="internal" href="https://developer.mozilla.org/en/HTML/Controlling_spell_checking_in_HTML_forms">spell-checking</a> (present on all HTML&nbsp;elements)]]></haxe_doc>
		</spellcheck>
		<style public="1" set="null">
			<c path="js.html.CSSStyleDeclaration"/>
			<haxe_doc>An object representing the declarations of an element's style attributes.</haxe_doc>
		</style>
		<tabIndex public="1">
			<x path="Int"/>
			<haxe_doc>Gets/sets the position of the element in the tabbing order.</haxe_doc>
		</tabIndex>
		<tagName public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the tag for the given element.</haxe_doc>
		</tagName>
		<title public="1">
			<c path="String"/>
			<haxe_doc>A string that appears in a popup box when mouse is over the element.</haxe_doc>
		</title>
		<translate public="1"><x path="Bool"/></translate>
		<blur public="1" set="method"><f a=""><x path="Void"/></f></blur>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method"><f a=""><x path="Void"/></f></focus>
		<getAttribute public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
		<getAttributeNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getAttributeNS>
		<getAttributeNode public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Attr"/>
</f></getAttributeNode>
		<getAttributeNodeNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Attr"/>
</f></getAttributeNodeNS>
		<getBoundingClientRect public="1" set="method"><f a=""><c path="js.html.ClientRect"/></f></getBoundingClientRect>
		<getClientRects public="1" set="method"><f a=""><c path="js.html.ClientRectList"/></f></getClientRects>
		<getElementsByClassName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByClassName>
		<getElementsByTagName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByTagNameNS>
		<hasAttribute public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasAttribute>
		<hasAttributeNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasAttributeNS>
		<insertAdjacentElement public="1" set="method"><f a="where:element">
	<c path="String"/>
	<c path="js.html.Element"/>
	<c path="js.html.Element"/>
</f></insertAdjacentElement>
		<insertAdjacentHTML public="1" set="method"><f a="where:html">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></insertAdjacentHTML>
		<insertAdjacentText public="1" set="method"><f a="where:text">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></insertAdjacentText>
		<matchesSelector public="1" set="method"><f a="selectors">
	<c path="String"/>
	<x path="Bool"/>
</f></matchesSelector>
		<querySelector public="1" set="method"><f a="selectors">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></querySelector>
		<querySelectorAll public="1" set="method"><f a="selectors">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></querySelectorAll>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<removeAttribute public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></removeAttribute>
		<removeAttributeNS public="1" set="method"><f a="namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></removeAttributeNS>
		<removeAttributeNode public="1" set="method"><f a="oldAttr">
	<c path="js.html.Attr"/>
	<c path="js.html.Attr"/>
</f></removeAttributeNode>
		<requestFullScreen public="1" set="method"><f a="flags">
	<x path="Int"/>
	<x path="Void"/>
</f></requestFullScreen>
		<requestFullscreen public="1" set="method"><f a=""><x path="Void"/></f></requestFullscreen>
		<requestPointerLock public="1" set="method"><f a=""><x path="Void"/></f></requestPointerLock>
		<scrollByLines public="1" set="method"><f a="lines">
	<x path="Int"/>
	<x path="Void"/>
</f></scrollByLines>
		<scrollByPages public="1" set="method"><f a="pages">
	<x path="Int"/>
	<x path="Void"/>
</f></scrollByPages>
		<scrollIntoView public="1" set="method"><f a="?alignWithTop">
	<x path="Bool"/>
	<x path="Void"/>
</f></scrollIntoView>
		<scrollIntoViewIfNeeded public="1" set="method"><f a="?centerIfNeeded">
	<x path="Bool"/>
	<x path="Void"/>
</f></scrollIntoViewIfNeeded>
		<setAttribute public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setAttribute>
		<setAttributeNS public="1" set="method"><f a="?namespaceURI:qualifiedName:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setAttributeNS>
		<setAttributeNode public="1" set="method"><f a="newAttr">
	<c path="js.html.Attr"/>
	<c path="js.html.Attr"/>
</f></setAttributeNode>
		<setAttributeNodeNS public="1" set="method"><f a="newAttr">
	<c path="js.html.Attr"/>
	<c path="js.html.Attr"/>
</f></setAttributeNodeNS>
		<haxe_doc><![CDATA[<p>This chapter provides a brief reference for the general methods, properties, and events available to most HTML and XML elements in the Gecko DOM.</p>
<p>Various W3C specifications apply to elements:</p>
<ul> <li><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Core/" title="http://www.w3.org/TR/DOM-Level-2-Core/" target="_blank">DOM Core Specification</a>—describes the core interfaces shared by most DOM objects in HTML and XML documents</li> <li><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/" title="http://www.w3.org/TR/DOM-Level-2-HTML/" target="_blank">DOM HTML Specification</a>—describes interfaces for objects in HTML and XHTML documents that build on the core specification</li> <li><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Events/" title="http://www.w3.org/TR/DOM-Level-2-Events/" target="_blank">DOM Events Specification</a>—describes events shared by most DOM objects, building on the DOM Core and <a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Views/" title="http://www.w3.org/TR/DOM-Level-2-Views/" target="_blank">Views</a> specifications</li> <li><a class="external" title="http://www.w3.org/TR/ElementTraversal/" rel="external" href="http://www.w3.org/TR/ElementTraversal/" target="_blank">Element Traversal Specification</a>—describes the new attributes that allow traversal of elements in the DOM&nbsp;tree 
<span>New in <a rel="custom" href="https://developer.mozilla.org/en/Firefox_3.5_for_developers">Firefox 3.5</a></span>
</li>
</ul>
<p>The articles listed here span the above and include links to the appropriate W3C DOM specification.</p>
<p>While these interfaces are generally shared by most HTML and XML elements, there are more specialized interfaces for particular objects listed in the DOM HTML Specification. Note, however, that these HTML&nbsp;interfaces are "only for [HTML 4.01] and [XHTML 1.0] documents and are not guaranteed to work with any future version of XHTML." The HTML 5 draft does state it aims for backwards compatibility with these HTML&nbsp;interfaces but says of them that "some features that were formerly deprecated, poorly supported, rarely used or considered unnecessary have been removed." One can avoid the potential conflict by moving entirely to DOM&nbsp;XML attribute methods such as <code>getAttribute()</code>.</p>
<p><code><a rel="custom" href="https://developer.mozilla.org/en/DOM/HTMLHtmlElement">Html</a></code>
, <code><a rel="custom" href="/api/js/html/HeadElement">Head</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/HTMLLinkElement">Link</a></code>
, <code><a rel="custom" href="/api/js/html/TitleElement">Title</a></code>
, <code><a rel="custom" href="/api/js/html/MetaElement">Meta</a></code>
, <code><a rel="custom" href="/api/js/html/BaseElement">Base</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/HTMLIsIndexElement" class="new">IsIndex</a></code>
, <code><a rel="custom" href="/api/js/html/StyleElement">Style</a></code>
, <code><a rel="custom" href="/api/js/html/BodyElement">Body</a></code>
, <code><a rel="custom" href="/api/js/html/FormElement">Form</a></code>
, <code><a rel="custom" href="/api/js/html/SelectElement">Select</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/HTMLOptGroupElement" class="new">OptGroup</a></code>
, <a title="en/HTML/Element/HTMLOptionElement" rel="internal" href="https://developer.mozilla.org/en/HTML/Element/HTMLOptionElement" class="new ">Option</a>, <code><a rel="custom" href="/api/js/html/InputElement">Input</a></code>
, <code><a rel="custom" href="/api/js/html/TextAreaElement">TextArea</a></code>
, <code><a rel="custom" href="/api/js/html/ButtonElement">Button</a></code>
, <code><a rel="custom" href="/api/js/html/LabelElement">Label</a></code>
, <code><a rel="custom" href="/api/js/html/FieldSetElement">FieldSet</a></code>
, <code><a rel="custom" href="/api/js/html/LegendElement">Legend</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/HTMLUListElement" class="new">UList</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/OList" class="new">OList</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/DList" class="new">DList</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Directory" class="new">Directory</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Menu" class="new">Menu</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/LI" class="new">LI</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Div" class="new">Div</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Paragraph" class="new">Paragraph</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Heading" class="new">Heading</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Quote" class="new">Quote</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Pre" class="new">Pre</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/BR" class="new">BR</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/BaseFont" class="new">BaseFont</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Font" class="new">Font</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/HR" class="new">HR</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Mod" class="new">Mod</a></code>
, <code><a rel="custom" href="/api/js/html/AnchorElement">Anchor</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Image" class="new">Image</a></code>
, <code><a rel="custom" href="/api/js/html/ObjectElement">Object</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Param" class="new">Param</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Applet" class="new">Applet</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Map" class="new">Map</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Area" class="new">Area</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Script" class="new">Script</a></code>
, <code><a rel="custom" href="/api/js/html/TableElement">Table</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/TableCaption" class="new">TableCaption</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/TableCol" class="new">TableCol</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/TableSection" class="new">TableSection</a></code>
, <code><a rel="custom" href="/api/js/html/TableRowElement">TableRow</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/TableCell" class="new">TableCell</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/FrameSet" class="new">FrameSet</a></code>
, <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Frame" class="new">Frame</a></code>
, <code><a rel="custom" href="/api/js/html/IFrameElement">IFrame</a></code>
</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/element">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/usr/lib/haxe/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<charset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The character encoding of the linked resource. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</charset>
		<coords public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Comma-separated list of coordinates. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</coords>
		<download public="1"><c path="String"/></download>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>The fragment identifier (including the leading hash mark (#)), if any, in the referenced URL.</haxe_doc>
		</hash>
		<host public="1">
			<c path="String"/>
			<haxe_doc>The hostname and port (if it's not the default port) in the referenced URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>The hostname in the referenced URL.</haxe_doc>
		</hostname>
		<href public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/a#attr-href">href</a></code>
 HTML attribute, containing a valid URL of a linked resource.]]></haxe_doc>
		</href>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/a#attr-hreflang">hreflang</a></code>
 HTML&nbsp;attribute, indicating the language of the linked resource.]]></haxe_doc>
		</hreflang>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Anchor name. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</name>
		<origin public="1" set="null"><c path="String"/></origin>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>The path name component, if any, of the referenced URL.</haxe_doc>
		</pathname>
		<ping public="1"><c path="String"/></ping>
		<port public="1">
			<c path="String"/>
			<haxe_doc>The port component, if any, of the referenced URL.</haxe_doc>
		</port>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>The protocol component (including trailing colon (:)), of the referenced URL.</haxe_doc>
		</protocol>
		<rel public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/a#attr-rel">rel</a></code>
 HTML attribute, specifying the relationship of the target object to the link object.]]></haxe_doc>
		</rel>
		<rev public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reverse link type. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</rev>
		<search public="1">
			<c path="String"/>
			<haxe_doc>The search element (including leading question mark (?)), if any, of the referenced URL</haxe_doc>
		</search>
		<shape public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The shape of the active area. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflectst the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/a#attr-target">target</a></code>
 HTML attribute, indicating where to display the linked resource.]]></haxe_doc>
		</target>
		<text public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[Same as the <strong><a title="https://developer.mozilla.org/En/DOM/Node.textContent" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.textContent">textContent</a></strong> property.]]></haxe_doc>
		</text>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/a#attr-type">type</a></code>
 HTML attribute, indicating the MIME type of the linked resource.]]></haxe_doc>
		</type>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<haxe_doc><![CDATA[DOM anchor elements expose the <a target="_blank" href="http://www.w3.org/TR/html5/text-level-semantics.html#htmlanchorelement" rel="external nofollow" class=" external" title="http://www.w3.org/TR/html5/text-level-semantics.html#htmlanchorelement">HTMLAnchorElement</a> (or <span><a href="https://developer.mozilla.org/en/HTML" rel="custom nofollow">HTML 4</a></span> <a target="_blank" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-48250443" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-48250443" rel="external nofollow" class=" external"><code>HTMLAnchorElement</code></a>) interface, which provides special properties and methods (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of hyperlink elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLAnchorElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.AppletElement" params="" file="/usr/lib/haxe/std/js/html/AppletElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute is used to position the applet on the page relative to content that might flow around it. The HTML 4.01 specification defines values of bottom, left, middle, right, and top, whereas Microsoft and Netscape also might support <strong>absbottom</strong>, <strong>absmiddle</strong>, <strong>baseline</strong>, <strong>center</strong>, and <strong>texttop</strong>.]]></haxe_doc>
		</align>
		<alt public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute causes a descriptive text alternate to be displayed on browsers that do not support Java. Page designers should also remember that content enclosed within the <code>&lt;applet&gt;</code> element may also be rendered as alternative text.]]></haxe_doc>
		</alt>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>This attribute refers to an archived or compressed version of the applet and its associated class files, which might help reduce download time.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute specifies the URL of the applet's class file to be loaded and executed. Applet filenames are identified by a .class filename extension. The URL specified by code might be relative to the <code>codebase</code> attribute.]]></haxe_doc>
		</code>
		<codeBase public="1"><c path="String"/></codeBase>
		<height public="1">
			<c path="String"/>
			<haxe_doc>This attribute specifies the height, in pixels, that the applet needs.</haxe_doc>
		</height>
		<hspace public="1">
			<c path="String"/>
			<haxe_doc>This attribute specifies additional horizontal space, in pixels, to be reserved on either side of the applet.</haxe_doc>
		</hspace>
		<name public="1">
			<c path="String"/>
			<haxe_doc>This attribute assigns a name to the applet so that it can be identified by other resources; particularly scripts.</haxe_doc>
		</name>
		<object public="1">
			<c path="String"/>
			<haxe_doc>This attribute specifies the URL of a serialized representation of an applet.</haxe_doc>
		</object>
		<vspace public="1">
			<c path="String"/>
			<haxe_doc>This attribute specifies additional vertical space, in pixels, to be reserved above and below the applet.</haxe_doc>
		</vspace>
		<width public="1">
			<c path="String"/>
			<haxe_doc>This attribute specifies in pixels the width that the applet needs.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[Obsolete<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/applet">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAppletElement"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/usr/lib/haxe/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/area#attr-alt">alt</a></code>
 HTML attribute, containing alternative text for the element.]]></haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/area#attr-coords">coords</a></code>
 HTML attribute, containing coordinates to define the hot-spot region.]]></haxe_doc>
		</coords>
		<hash public="1" set="null">
			<c path="String"/>
			<haxe_doc>The fragment identifier (including the leading hash mark (#)), if any, in the referenced URL.</haxe_doc>
		</hash>
		<host public="1" set="null">
			<c path="String"/>
			<haxe_doc>The hostname and port (if it's not the default port) in the referenced URL.</haxe_doc>
		</host>
		<hostname public="1" set="null">
			<c path="String"/>
			<haxe_doc>The hostname in the referenced URL.</haxe_doc>
		</hostname>
		<href public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/area#attr-href">href</a></code>
 HTML attribute, containing a valid URL&nbsp;of a linked resource.]]></haxe_doc>
		</href>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Indicates that this area is inactive. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</noHref>
		<pathname public="1" set="null">
			<c path="String"/>
			<haxe_doc>The path name component, if any, of the referenced URL.</haxe_doc>
		</pathname>
		<ping public="1"><c path="String"/></ping>
		<port public="1" set="null">
			<c path="String"/>
			<haxe_doc>The port component, if any, of the referenced URL.</haxe_doc>
		</port>
		<protocol public="1" set="null">
			<c path="String"/>
			<haxe_doc>The protocol component (including trailing colon (:)), of the referenced URL.</haxe_doc>
		</protocol>
		<search public="1" set="null">
			<c path="String"/>
			<haxe_doc>The search element (including leading question mark (?)), if any, of the referenced URL</haxe_doc>
		</search>
		<shape public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/area#attr-shape">shape</a></code>
 HTML&nbsp;attribute, indicating the shape of the hot-spot, limited to known values.]]></haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/area#attr-target">target</a></code>
 HTML&nbsp;attribute, indicating the browsing context in which to open the linked resource.]]></haxe_doc>
		</target>
		<haxe_doc><![CDATA[DOM area objects expose the <a class=" external" title="http://www.w3.org/TR/html5/the-map-element.html#htmlareaelement" rel="external" href="http://www.w3.org/TR/html5/the-map-element.html#htmlareaelement" target="_blank">HTMLAreaElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26019118" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26019118" target="_blank"><code>HTMLAreaElement</code></a>) interface, which provides special properties and methods (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of area elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLAreaElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<class path="js.html.ArrayBuffer" params="" file="/usr/lib/haxe/std/js/html/ArrayBuffer.hx" extern="1">
		<byteLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. <strong>Read only.</strong>]]></haxe_doc>
		</byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method"><f a="?arg0">
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[The <code>ArrayBuffer</code> is a data type that is used to represent a generic, fixed-length binary data buffer. You can't directly manipulate the contents of an <code>ArrayBuffer</code>; instead, you create an <a title="en/JavaScript typed arrays/ArrayBufferView" rel="internal" href="/api/js/html/ArrayBufferView"><code>ArrayBufferView</code></a> object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.html.ArrayBufferView" params="" file="/usr/lib/haxe/std/js/html/ArrayBufferView.hx" extern="1">
		<buffer public="1" set="null">
			<c path="js.html.ArrayBuffer"/>
			<haxe_doc><![CDATA[The buffer this view references. <strong>Read only.</strong>]]></haxe_doc>
		</buffer>
		<byteLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The length, in bytes, of the view. <strong>Read only.</strong>]]></haxe_doc>
		</byteLength>
		<byteOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The offset, in bytes, to the first byte of the view within the <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>.]]></haxe_doc>
		</byteOffset>
		<haxe_doc><![CDATA[<p>The <code>ArrayBufferView</code> type describes a particular view on the contents of an <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="/api/js/html/ArrayBuffer"><code>ArrayBuffer</code></a>'s data.</p>
<p>Of note is that you may create multiple views into the same buffer, each looking at the buffer's contents starting at a particular offset. This makes it possible to set up views of different data types to read the contents of a buffer based on the types of data at specific offsets into the buffer.</p>
<div class="note"><strong>Note:</strong> Typically, you'll instantiate one of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">subclasses</a> of this object instead of this base class. Those provide access to the data formatted using specific data types.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"ArrayBufferView"</e></m></meta>
	</class>
	<class path="js.html.Attr" params="" file="/usr/lib/haxe/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<isId public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the attribute is an "ID attribute". An "ID attribute" being an attribute which value is expected to be unique across a DOM Document. In HTML DOM, "id" is the only ID attribute, but XML documents could define others. Whether or not an attribute is unique is often determined by a DTD or other schema description.</haxe_doc>
		</isId>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The attribute's name.</haxe_doc>
		</name>
		<ownerElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>This property has been deprecated and will be removed in the future. Since you can only get Attr objects from elements, you should already know th</haxe_doc>
		</ownerElement>
		<specified public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This property has been deprecated and will be removed in the future; it now always returns <code>true</code>.]]></haxe_doc>
		</specified>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The attribute's value. Setter throws DOMException.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[<p>This type represents a DOM&nbsp;element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Element.getAttribute">Element.getAttribute()</a></code>
, but certain functions (e.g., <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Element.getAttributeNode">Element.getAttributeNode()</a></code>
)&nbsp;or means of iterating give <code>Attr</code> types.</p>
<div class="warning"><strong>Warning:</strong> In DOM Core 1, 2 and 3, Attr inherited from Node. This is no longer the case in <a class="external" rel="external" href="http://www.w3.org/TR/dom/" title="http://www.w3.org/TR/dom/" target="_blank">DOM4</a>. In order to bring the implementation of <code>Attr</code> up to specification, work is underway to change it to no longer inherit from <code><a rel="custom" href="/api/js/html/Node">Node</a></code>
. You should not be using any <code><a rel="custom" href="/api/js/html/Node">Node</a></code>
 properties or methods on <code>Attr</code> objects. Starting in Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, the ones that are going to be removed output warning messages to the console. You should revise your code accordingly. See <a rel="custom" href="https://developer.mozilla.org/en/DOM/Attr#Deprecated_properties_and_methods">Deprecated properties and methods</a> for a complete list.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Attr">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/usr/lib/haxe/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" line="34" static="1">
			<x path="Int"/>
			<haxe_doc>Data is available for the current playback position, but not enough to actually play more than one frame.</haxe_doc>
		</HAVE_CURRENT_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" line="37" static="1">
			<x path="Int"/>
			<haxe_doc>Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.</haxe_doc>
		</HAVE_ENOUGH_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" line="40" static="1">
			<x path="Int"/>
			<haxe_doc>Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).</haxe_doc>
		</HAVE_FUTURE_DATA>
		<HAVE_METADATA public="1" get="inline" set="null" line="43" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Enough of the media resource has been retrieved that the metadata attributes are initialized.&nbsp; Seeking will no longer raise an exception.]]></haxe_doc>
		</HAVE_METADATA>
		<HAVE_NOTHING public="1" get="inline" set="null" line="46" static="1">
			<x path="Int"/>
			<haxe_doc>No information is available about the media resource.</haxe_doc>
		</HAVE_NOTHING>
		<NETWORK_EMPTY public="1" get="inline" set="null" line="48" static="1"><x path="Int"/></NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" line="50" static="1"><x path="Int"/></NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" line="52" static="1"><x path="Int"/></NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" line="54" static="1"><x path="Int"/></NETWORK_NO_SOURCE>
		<audioDecodedByteCount public="1" set="null"><x path="Int"/></audioDecodedByteCount>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-autoplay">autoplay</a></code>
 HTML&nbsp;attribute, indicating whether to begin playing as soon as enough media is available.]]></haxe_doc>
		</autoplay>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>The ranges of the media source that the browser has buffered, if any.</haxe_doc>
		</buffered>
		<closedCaptionsVisible public="1"><x path="Bool"/></closedCaptionsVisible>
		<controller public="1"><c path="js.html.MediaController"/></controller>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-controls">controls</a></code>
 HTML attribute, indicating whether user interface items for controlling the resource should be displayed.]]></haxe_doc>
		</controls>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The absolute URL of the chosen media resource (if, for example, the server selects a media file based on the resolution of the user's display), or an empty string if the <code>networkState</code> is <code>EMPTY</code>.]]></haxe_doc>
		</currentSrc>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The current playback time, in seconds.&nbsp; Setting this value seeks the media to the new time. Setter throws DOMException.]]></haxe_doc>
		</currentTime>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-muted">muted</a></code>
 HTML attribute, indicating whether the media element's audio output should be muted by default. Changing the value dynamically will not unmute the audio (it only controls the default state).]]></haxe_doc>
		</defaultMuted>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The default playback rate for the media.&nbsp; The Ogg backend does not support this.&nbsp; 1.0 is "normal speed," values lower than 1.0 make the media play slower than normal, higher values make it play faster.&nbsp; The value 0.0 is invalid and throws a <code>NOT_SUPPORTED_ERR</code>&nbsp;exception.]]></haxe_doc>
		</defaultPlaybackRate>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[The length of the media in seconds, or zero if no media data is available.&nbsp; If the media data is available but the length is unknown, this value is <code>NaN</code>.&nbsp; If the media is streamed and has no predefined length, the value is <code>Inf</code>.]]></haxe_doc>
		</duration>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the media element has ended playback.</haxe_doc>
		</ended>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>The media error object for the most recent error, or null if there has not been an error.</haxe_doc>
		</error>
		<hasClosedCaptions public="1" set="null"><x path="Bool"/></hasClosedCaptions>
		<initialTime public="1" set="null"><x path="Float"/></initialTime>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-loop">loop</a></code>
 HTML&nbsp;attribute, indicating whether the media element should start over when it reaches the end.]]></haxe_doc>
		</loop>
		<mediaGroup public="1"><c path="String"/></mediaGroup>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[<code>true</code> if the audio is muted, and <code>false</code> otherwise.]]></haxe_doc>
		</muted>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[<p>The current state of fetching the media over the network.</p> <table class="standard-table"> <tbody> <tr> <td class="header">Constant</td> <td class="header">Value</td> <td class="header">Description</td> </tr> <tr> <td><code>EMPTY</code></td> <td>0</td> <td>There is no data yet.&nbsp; The <code>readyState</code> is also <code>HAVE_NOTHING</code>.</td> </tr> <tr> <td><code>LOADING</code></td> <td>1</td> <td>The media is loading.</td> </tr> <tr> <td><code>LOADED_METADATA</code></td> <td>2</td> <td>The media's metadata has been loaded.</td> </tr> <tr> <td><code>LOADED_FIRST_FRAME</code></td> <td>3</td> <td>The media's first frame has been loaded.</td> </tr> <tr> <td><code>LOADED</code></td> <td>4</td> <td>The media has been fully loaded.</td> </tr> </tbody> </table>]]></haxe_doc>
		</networkState>
		<onkeyadded public="1"><t path="js.html.EventListener"/></onkeyadded>
		<onkeyerror public="1"><t path="js.html.EventListener"/></onkeyerror>
		<onkeymessage public="1"><t path="js.html.EventListener"/></onkeymessage>
		<onneedkey public="1"><t path="js.html.EventListener"/></onneedkey>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the media element is paused.</haxe_doc>
		</paused>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The current rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.&nbsp; Not supported by the Ogg backend.]]></haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>The ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<preload public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-preload">preload</a></code>
 HTML attribute, indicating what data should be preloaded at page-load time, if any.]]></haxe_doc>
		</preload>
		<preservesPitch public="1"><x path="Bool"/></preservesPitch>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[<p>The readiness state of the media:</p> <table class="standard-table"> <tbody> <tr> <td class="header">Constant</td> <td class="header">Value</td> <td class="header">Description</td> </tr> <tr> <td><code>HAVE_NOTHING</code></td> <td>0</td> <td>No information is available about the media resource.</td> </tr> <tr> <td><code>HAVE_METADATA</code></td> <td>1</td> <td>Enough of the media resource has been retrieved that the metadata attributes are initialized.&nbsp; Seeking will no longer raise an exception.</td> </tr> <tr> <td><code>HAVE_CURRENT_DATA</code></td> <td>2</td> <td>Data is available for the current playback position, but not enough to actually play more than one frame.</td> </tr> <tr> <td><code>HAVE_FUTURE_DATA</code></td> <td>3</td> <td>Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).</td> </tr> <tr> <td><code>HAVE_ENOUGH_DATA</code></td> <td>4</td> <td>Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.</td> </tr> </tbody> </table>]]></haxe_doc>
		</readyState>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>The time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-src">src</a></code>
 HTML attribute, containing the URL of a media resource to use.]]></haxe_doc>
		</src>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The earliest possible position in the media, in seconds.</haxe_doc>
		</startTime>
		<textTracks public="1" set="null"><c path="js.html.TextTrackList"/></textTracks>
		<videoDecodedByteCount public="1" set="null"><x path="Int"/></videoDecodedByteCount>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>The audio volume, from 0.0 (silent) to 1.0 (loudest). Setter throws DOMException.</haxe_doc>
		</volume>
		<addKey public="1" set="method"><f a="keySystem:key:?initData:sessionId">
	<c path="String"/>
	<c path="js.html.Uint8Array"/>
	<c path="js.html.Uint8Array"/>
	<c path="String"/>
	<x path="Void"/>
</f></addKey>
		<addTextTrack public="1" set="method"><f a="kind:?label:?language">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></addTextTrack>
		<canPlayType public="1" set="method"><f a="type:?keySystem">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></canPlayType>
		<cancelKeyRequest public="1" set="method"><f a="keySystem:sessionId">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></cancelKeyRequest>
		<generateKeyRequest public="1" set="method"><f a="keySystem:?initData">
	<c path="String"/>
	<c path="js.html.Uint8Array"/>
	<x path="Void"/>
</f></generateKeyRequest>
		<load public="1" set="method"><f a=""><x path="Void"/></f></load>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<haxe_doc><![CDATA[HTML media elements (such as <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/audio">&lt;audio&gt;</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
) expose the <code>HTMLMediaElement</code> interface which provides special properties and methods (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of media elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLMediaElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/usr/lib/haxe/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[<p>The <code>HTMLAudioElement</code> interface provides access to the properties of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/audio">&lt;audio&gt;</a></code>
&nbsp;elements, as well as methods to manipulate them. It's derived from the <a title="en/DOM/HTMLMediaElement" rel="internal" href="/api/js/html/MediaElement" class=" new"><code>HTMLMediaElement</code></a> interface; it's implemented by <code><a rel="custom" href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIDOMHTMLMediaElement">nsIDOMHTMLMediaElement</a></code>
.</p>
<p>For details on how to use the audio streaming features exposed by this interface, please see <a title="en/Introducing the Audio API Extension" rel="internal" href="/api/js/html/audio/AudioBuffer">Introducing the Audio API Extension</a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Document_Object_Model_(DOM)/HTMLAudioElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.BRElement" params="" file="/usr/lib/haxe/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Indicates flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[DOM break elements expose the <a class="external" href="http://www.w3.org/TR/html5/text-level-semantics.html#the-br-element" rel="external nofollow" target="_blank" title="http://www.w3.org/TR/html5/text-level-semantics.html#the-br-element">HTMLBRElement</a> (or <span><a href="https://developer.mozilla.org/en/HTML" rel="custom nofollow">HTML 4</a></span> <a class="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-56836063" rel="external nofollow" target="_blank" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-56836063"><code>HTMLBRElement</code></a>) interface which inherits from HTMLElement, but defines no additional members in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>. The introduced additional property is also deprecated in 
<span>HTML 4.01</span>.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLBRElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarInfo" params="" file="/usr/lib/haxe/std/js/html/BarInfo.hx" extern="1">
		<visible public="1" set="null"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarInfo"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/usr/lib/haxe/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/base#attr-href">href</a></code>
 HTML attribute, containing a base URL for relative URLs in the document.]]></haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/base#attr-target">target</a></code>
 HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.]]></haxe_doc>
		</target>
		<haxe_doc><![CDATA[The <code>base</code> object exposes the <a class=" external" title="http://www.w3.org/TR/html5/semantics.html#htmlbaseelement" rel="external" href="http://www.w3.org/TR/html5/semantics.html#htmlbaseelement" target="_blank">HTMLBaseElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class="external" target="_blank" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-73629039" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-73629039">HTMLBaseElement</a>) interface which contains the base URI&nbsp;for a document.&nbsp; This object inherits all of the properties and methods as described in the <a class="internal" title="en/DOM/element" rel="internal" href="/api/js/html/Element">element</a> section.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLBaseElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.BaseFontElement" params="" file="/usr/lib/haxe/std/js/html/BaseFontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>This attribute sets the text color using either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>This attribute contains a list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.</haxe_doc>
		</face>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>This attribute specifies the font size as either a numeric or relative value. Numeric values range from 1 to 7 with 1 being the smallest and 3 the default.</haxe_doc>
		</size>
		<haxe_doc><![CDATA[Obsolete<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/basefont">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseFontElement"</e></m></meta>
	</class>
	<class path="js.html.BatteryManager" params="" file="/usr/lib/haxe/std/js/html/BatteryManager.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<charging public="1" set="null"><x path="Bool"/></charging>
		<chargingTime public="1" set="null"><x path="Float"/></chargingTime>
		<dischargingTime public="1" set="null"><x path="Float"/></dischargingTime>
		<level public="1" set="null"><x path="Float"/></level>
		<onchargingchange public="1"><t path="js.html.EventListener"/></onchargingchange>
		<onchargingtimechange public="1"><t path="js.html.EventListener"/></onchargingtimechange>
		<ondischargingtimechange public="1"><t path="js.html.EventListener"/></ondischargingtimechange>
		<onlevelchange public="1"><t path="js.html.EventListener"/></onlevelchange>
		<meta><m n=":native"><e>"BatteryManager"</e></m></meta>
	</class>
	<class path="js.html.Blob" params="" file="/usr/lib/haxe/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The size, in bytes, of the data contained in the <code>Blob</code> object. <strong>Read only.</strong>]]></haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[An ASCII-encoded string, in all lower case, indicating the MIME&nbsp;type of the data contained in the <code>Blob</code>. If the type is unknown, this string is empty. <strong>Read only.</strong>]]></haxe_doc>
		</type>
		<slice public="1" set="method"><f a="?start:?end:?contentType">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="js.html.Blob"/>
</f></slice>
		<new public="1" set="method"><f a="?arg0:?arg1">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[<div><p><strong>This is an experimental feature</strong><br>Because this feature is still in development in some browsers, check the <a href="#AutoCompatibilityTable">compatibility table</a> for the proper prefixes to use in various browsers.</p></div>
<p></p>
<p>A <code>Blob</code> object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The <code><a rel="custom" href="/api/js/html/File">File</a></code>
 interface is based on <code>Blob</code>, inheriting blob functionality and expanding it to support files on the user's system.</p>
<p>An easy way to construct a <code>Blob</code> is by using the <code><a rel="custom" href="/api/js/html/BlobBuilder">BlobBuilder</a></code>
 interface, which lets you iteratively append data to a blob, then retrieve the completed blob when you're ready to use it for something. Another way is to use the <code>slice()</code> method to create a blob that contains a subset of another blob's data.</p>
<div class="note"><strong>Note:</strong> The <code>slice()</code> method has vendor prefixes: <code>blob.mozSlice()</code> for Firefox and <code>blob.webkitSlice()</code> for Chrome. An old version of the <code>slice()</code> method, without vendor prefixes, had different semantics, as described below.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Blob">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<class path="js.html.BodyElement" params="" file="/usr/lib/haxe/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Color of active hyperlinks.</haxe_doc>
		</aLink>
		<background public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<p>URI for a background image resource.</p> <div class="note"><strong>Note:</strong> Starting in Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, this value is no longer resolved as a URI; instead, it's treated as a simple string.</div>]]></haxe_doc>
		</background>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Background color for the document.</haxe_doc>
		</bgColor>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Color of unvisited links.</haxe_doc>
		</link>
		<onbeforeunload public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onbeforeunload">onbeforeunload</a></code>
 HTML&nbsp;attribute value for a function to call when the document is about to be unloaded.]]></haxe_doc>
		</onbeforeunload>
		<onhashchange public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onhashchange">onhashchange</a></code>
 HTML&nbsp;attribute value for a function to call when the fragment identifier in the address of the document changes.]]></haxe_doc>
		</onhashchange>
		<onmessage public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onmessage">onmessage</a></code>
 HTML&nbsp;attribute value for a function to call when the document receives a message.]]></haxe_doc>
		</onmessage>
		<onoffline public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onoffline">onoffline</a></code>
 HTML&nbsp;attribute value for a function to call when network communication fails.]]></haxe_doc>
		</onoffline>
		<ononline public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-ononline">ononline</a></code>
 HTML&nbsp;attribute value for a function to call when network communication is restored.]]></haxe_doc>
		</ononline>
		<onpopstate public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onpopstate">onpopstate</a></code>
 HTML&nbsp;attribute value for a function to call when the user has navigated session history.]]></haxe_doc>
		</onpopstate>
		<onresize public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onresize">onresize</a></code>
 HTML&nbsp;attribute value for a function to call when the document has been resized.]]></haxe_doc>
		</onresize>
		<onstorage public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onpopstate">onpopstate</a></code>
 HTML&nbsp;attribute value for a function to call when the storage area has changed.]]></haxe_doc>
		</onstorage>
		<onunload public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body#attr-onunload">onunload</a></code>
 HTML&nbsp;attribute value for a function to call when when the document is going away.]]></haxe_doc>
		</onunload>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Foreground color of text.</haxe_doc>
		</text>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Color of visited links.</haxe_doc>
		</vLink>
		<haxe_doc><![CDATA[DOM body elements expose the <a href="http://www.w3.org/TR/html5/sections.html#the-body-element" target="_blank" rel="external nofollow" class=" external" title="http://www.w3.org/TR/html5/sections.html#the-body-element">HTMLBodyElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-48250443" target="_blank" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-48250443" rel="external nofollow" class=" external"><code>HTMLBodyElement</code></a>) interface, which provides special properties (beyond the regular <code><a rel="custom" href="/api/js/html/Element">element</a></code>
 object interface they also have available to them by inheritance) for manipulating body elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLBodyElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/usr/lib/haxe/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>The control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>The control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[<p>The form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.</p> <p>If the button is not a descendant of a form element, then:</p> <ul> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> The attribute can be the ID of any form element in the same document.</li> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> The attribute is null.</li> </ul>]]></haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The URI&nbsp;of a program that processes information submitted by the button. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-action">action</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The HTTP&nbsp;method that the browser uses to submit the form. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-method">method</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Indicates that the form is not to be validated when it is submitted. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-enctype">enctype</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[A name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-target">target</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formTarget>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc><![CDATA[A list of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/label">&lt;label&gt;</a></code>
 elements that are labels for this button.]]></haxe_doc>
		</labels>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The name of the object when submitted with a form. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> If specified, it must not be the empty string.]]></haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<p>Indicates the behavior of the button. This is an enumerated attribute with the following possible values:</p> <ul> <li><code>submit</code>:&nbsp;The button submits the form. This is the default value if the attribute is not specified, 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> or if it is dynamically changed to an empty or invalid value.</li> <li><code>reset</code>:&nbsp;The button resets the form.</li> <li><code>button</code>:&nbsp;The button does nothing.</li> </ul>]]></haxe_doc>
		</type>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>The validity states that this button is in.</haxe_doc>
		</validity>
		<value public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The current form control value of the button.&nbsp;]]></haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[DOM&nbsp;<code>Button </code>objects expose the <a class=" external" title="http://www.w3.org/TR/html5/the-button-element.html#the-button-element" rel="external" href="http://www.w3.org/TR/html5/the-button-element.html#the-button-element" target="_blank">HTMLButtonElement</a> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>&nbsp;(or <a class=" external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-34812697" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-34812697" target="_blank">HTMLButtonElement</a> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span>) interface, which provides properties and methods (beyond the <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of button elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLButtonElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/usr/lib/haxe/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</data>
		<length public="1" set="null"><x path="Int"/></length>
		<appendData public="1" set="method"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></appendData>
		<deleteData public="1" set="method"><f a="offset:length">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></deleteData>
		<insertData public="1" set="method"><f a="offset:data">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></insertData>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<replaceData public="1" set="method"><f a="offset:length:data">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceData>
		<substringData public="1" set="method"><f a="offset:length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substringData>
		<haxe_doc><![CDATA[<code><a title="En/DOM/Text" rel="internal" href="https://developer.mozilla.org/En/DOM/Text">Text</a></code>, <code><a title="En/DOM/Comment" rel="internal" href="https://developer.mozilla.org/En/DOM/Comment">Comment</a></code>, and <code><a title="en/DOM/CDATASection" rel="internal" href="/api/js/html/CDATASection">CDATASection</a></code> all implement CharacterData, which in turn also implements <code><a class="internal" title="En/DOM/Node" rel="internal" href="/api/js/html/Node">Node</a></code>. See <code>Node</code> for the remaining methods, properties, and constants.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/En/DOM/CharacterData">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/usr/lib/haxe/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns all text of all Text nodes logically adjacent to this node, concatenated in document order.</haxe_doc>
		</wholeText>
		<replaceWholeText public="1" set="method"><f a="content">
	<c path="String"/>
	<c path="js.html.Text"/>
</f></replaceWholeText>
		<splitText public="1" set="method"><f a="offset">
	<x path="Int"/>
	<c path="js.html.Text"/>
</f></splitText>
		<haxe_doc><![CDATA[<p>In the <a title="en/DOM" rel="internal" href="https://developer.mozilla.org/en/DOM">DOM</a>, the Text interface represents the textual content of an <a class="internal" title="En/DOM/Element" rel="internal" href="/api/js/html/Element">Element</a> or <a class="internal" title="En/DOM/Attr" rel="internal" href="https://developer.mozilla.org/En/DOM/Attr">Attr</a>.&nbsp; If an element has no markup within its content, it has a single child implementing Text that contains the element's text.&nbsp; However, if the element contains markup, it is parsed into information items and Text nodes that form its children.</p>
<p>New documents have a single Text node for each block of text.&nbsp; Over time, more Text nodes may be created as the document's content changes.&nbsp; The <code>Node.normalize()</code>&nbsp;method merges adjacent Text objects back into a single node for each block of text.</p>
<p>Text also implements the <a title="En/DOM/CharacterData" rel="internal" href="/api/js/html/CharacterData">CharacterData</a> interface (which implements the Node interface).</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Text">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/usr/lib/haxe/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[<p>A CDATA Section can be used within XML to include extended portions of unescaped text, such that the symbols &lt; and &amp; do not need escaping as they normally do within XML when used as text.</p>
<p>It takes the form:</p>
<pre class="eval">&lt;![CDATA[  ... ]]&gt;
</pre>
<p>For example:</p>
<pre class="eval">&lt;foo&gt;Here is a CDATA section: &lt;![CDATA[  &lt; &gt; &amp; ]]&gt; with all kinds of unescaped text. &lt;/foo&gt;
</pre>
<p>The only sequence which is not allowed within a CDATA section is the closing sequence of a CDATA section itself:</p>
<pre class="eval">&lt;![CDATA[  ]]&gt; will cause an error   ]]&gt;
</pre>
<p>Note that CDATA sections should not be used (without hiding) within HTML.</p>
<p>As a CDATASection has no properties or methods unique to itself and only directly implements the Text interface, one can refer to <a title="En/DOM/Text" rel="internal" href="https://developer.mozilla.org/En/DOM/Text">Text</a> to find its properties and methods.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CDATASection">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<class path="js.html.CSSRule" params="" file="/usr/lib/haxe/std/js/html/CSSRule.hx" extern="1">
		<CHARSET_RULE public="1" get="inline" set="null" line="32" static="1"><x path="Int"/></CHARSET_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" line="34" static="1"><x path="Int"/></FONT_FACE_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></IMPORT_RULE>
		<KEYFRAMES_RULE public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></KEYFRAMES_RULE>
		<KEYFRAME_RULE public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></KEYFRAME_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></MEDIA_RULE>
		<PAGE_RULE public="1" get="inline" set="null" line="44" static="1"><x path="Int"/></PAGE_RULE>
		<STYLE_RULE public="1" get="inline" set="null" line="46" static="1"><x path="Int"/></STYLE_RULE>
		<UNKNOWN_RULE public="1" get="inline" set="null" line="48" static="1"><x path="Int"/></UNKNOWN_RULE>
		<cssText public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Returns the textual representation of the rule, e.g. <code>"h1,h2 { font-size: 16pt }"</code> Setter throws DOMException.]]></haxe_doc>
		</cssText>
		<parentRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc><![CDATA[Returns the containing rule, otherwise <code>null</code>. E.g. if this rule is a style rule inside an <code><a title="en/CSS/@media" rel="internal" href="https://developer.mozilla.org/en/CSS/@media">@media</a></code> block, the parent rule would be that <code><a title="en/DOM/CSSMediaRule" rel="internal" href="https://developer.mozilla.org/en/DOM/CSSMediaRule">CSSMediaRule</a></code>.]]></haxe_doc>
		</parentRule>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.CSSStyleSheet"/>
			<haxe_doc><![CDATA[Returns the <code><a title="en/DOM/CSSStyleSheet" rel="internal" href="https://developer.mozilla.org/en/DOM/CSSStyleSheet">CSSStyleSheet</a></code> object for the style sheet that contains this rule]]></haxe_doc>
		</parentStyleSheet>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[One of the <a rel="custom" href="https://developer.mozilla.org/en/DOM/cssRule#Type_constants">Type constants</a>&nbsp;indicating the type of CSS&nbsp;rule.]]></haxe_doc>
		</type>
		<haxe_doc><![CDATA[<p>An object implementing the <code>CSSRule</code> DOM interface represents a single CSS rule. References to a <code>CSSRule</code>-implementing object may be obtained by looking at a <a title="en/DOM/stylesheet" rel="internal" href="/api/js/html/CSSStyleSheet">CSS style sheet's</a> <code><a title="en/DOM/CSSStyleSheet/cssRules" rel="internal" href="/api/js/html/CSSStyleSheet">cssRules</a></code> list.</p>
<p>There are several kinds of rules. The <code>CSSRule</code> interface specifies the properties common to all rules, while properties unique to specific rule types are specified in the more specialized interfaces for those rules' respective types.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/cssRule">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/usr/lib/haxe/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A <code>CSSRuleList</code> is an array-like object containing an ordered collection of <code><a title="en/DOM/cssRule" rel="internal" href="/api/js/html/CSSKeyframeRule">CSSRule</a></code> objects.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CSSRuleList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/usr/lib/haxe/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1">
			<c path="String"/>
			<haxe_doc>Textual representation of the declaration block. Setting this attribute changes the style. Setter throws DOMException.</haxe_doc>
		</cssText>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of properties. See the <strong>item</strong> method below.]]></haxe_doc>
		</length>
		<parentRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc><![CDATA[The containing <code><a href="https://developer.mozilla.org/en/DOM/cssRule" rel="internal" title="en/DOM/cssRule">cssRule</a>.</code>]]></haxe_doc>
		</parentRule>
		<animation public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand property for <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/animation-name">animation-name</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/animation-duration">animation-duration</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/animation-timing-function">animation-timing-function</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/animation-delay">animation-delay</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/animation-iteration-count">animation-iteration-count</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/animation-direction">animation-direction</a></code>
.]]></haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-delay</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies when the animation should start. This lets the animation sequence begin some time after it's applied to an element.]]></haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-direction</code> CSS property indicates whether the animation should play in reverse on alternate cycles.]]></haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-duration</code> CSS property specifies the length of time that an animation should take to complete one cycle.]]></haxe_doc>
		</animationDuration>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-iteration-count</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property defines the number of times an animation cycle should be played before stopping.]]></haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-name</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies a list of animations that should be applied to the selected element. Each name indicates a <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/@keyframes">@keyframes</a></code>
 at-rule that defines the property values for the animation sequence.]]></haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-play-state</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.]]></haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>animation-timing-function</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies how a CSS animation should progress over the duration of each cycle. The possible values are one or several <span class="lang lang-en"><code><a rel="custom" href="https://developer.mozilla.org/en/CSS/timing-function">&lt;timing-function&gt;</a></code>
 </span>.]]></haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[In combination with<code> elevation</code>, <code>azimuth</code> enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.]]></haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>backface-visibility</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property determines whether or not the back face of the element is visible when facing the user. The back face of an element always is a transparent background, letting, when visible, a mirror image of the front face be displayed.]]></haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> background </code>CSS property is a shorthand for setting the individual background values in a single place in the style sheet.<code> background </code>can be used to set the values for one or more of: <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-color">background-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-image">background-image</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-position">background-position</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-repeat">background-repeat</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-size">background-size</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-attachment">background-attachment</a></code>
.]]></haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[If a <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-image">background-image</a></code>
 is specified, the <code>background-attachment</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property determines whether that image's position is fixed within the viewport, or scrolls along with its containing block.]]></haxe_doc>
		</backgroundAttachment>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> background-clip </code>CSS property specifies whether an element's background, either the color or image, extends underneath its border.]]></haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>background-color</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the background color of an element, either through a color value or the keyword <code>transparent</code>.]]></haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> background-image </code>CSS property sets the background images for an element. The images are drawn on successive stacking context layers, with the first specified being drawn as if it is the closest to the user. The <a title="border" rel="internal" href="https://developer.mozilla.org/cn/CSS/border">borders</a> of the element are then drawn on top of them, and the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-color">background-color</a></code>
 is drawn beneath them.]]></haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> background-origin </code>CSS property determines the background positioning area, that is the position of the origin of an image specified using the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-image">background-image</a></code>
 CSS property.]]></haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> background-position </code>CSS property sets the initial position, relative to the background position layer defined by <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/background-origin">background-origin</a></code>
 for each defined background image.]]></haxe_doc>
		</backgroundPosition>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>background-repeat</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property defines how background images are repeated. A background image can be repeated along the horizontal axis, the vertical axis, both, or not repeated at all. When the repetition of the image tiles doesn't let them exactly cover the background, the way adjustments are done can be controlled by the author: by default, the last image is clipped, but the different tiles can instead be re-sized, or space can be inserted between the tiles.]]></haxe_doc>
		</backgroundRepeat>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> background-size </code>CSS property specifies the size of the background images.]]></haxe_doc>
		</backgroundSize>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>This property specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled.</haxe_doc>
		</bleed>
		<border public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand property for setting the individual border property values in a single place in the style sheet. <code>border</code> can be used to set the values for one or more of: <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-width">border-width</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-style">border-style</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-color">border-color</a></code>
.]]></haxe_doc>
		</border>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-bottom</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand that sets the values of <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-bottom-color">border-bottom-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-bottom-style">border-bottom-style</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-bottom-width">border-bottom-width</a></code>
. These properties describe the bottom border of elements.]]></haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-bottom-color </code>CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties&nbsp; <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-color">border-color</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-bottom">border-bottom</a></code>
 are more convenient and preferable.]]></haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-bottom-left-radius</code> CSS property sets the rounding of the bottom-left corner of the element. The rounding can be a circle or an ellipse, or if one of the value is <code>0</code> no rounding is done and the corner is square.]]></haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-bottom-right-radius</code> CSS property sets the rounding of the bottom-right corner of the element. The rounding can be a circle or an ellipse, or if one of the value is <code>0</code> no rounding is done and the corner is square.]]></haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-bottom-style</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the line style of the bottom border of a box.]]></haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-bottom-width</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the width of the bottom border of a box.]]></haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-collapse </code>CSS property selects a table's border model. This has a big influence on the look and style of the table cells.]]></haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-color </code>CSS property is a shorthand for setting the color of the four sides of an element's border: <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-top-color">border-top-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-right-color">border-right-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-bottom-color">border-bottom-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-left-color">border-left-color</a></code>]]></haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-image </code>CSS property allows drawing an image on the borders of elements. This makes drawing complex looking widgets much simpler than it has been and removes the need for nine boxes in some cases.]]></haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-image-outset </code>property describes, by which amount <dfn id="border-image-area">border image area</dfn> extends beyond the border box.]]></haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-image-repeat</code> CSS property defines how the middle part of a border image is handled to match the size of the border. It has a one-value syntax which describes the behavior for all sides, and a two-value syntax that sets a different value for the horizontal and vertical behavior.]]></haxe_doc>
		</borderImageRepeat>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-image-source</code> CSS property defines the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/image">&lt;image&gt;</a></code>
 to use instead of the style of the border. If this property is set to <code>none</code>, the style defined by <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-style">border-style</a></code>
 is used instead.]]></haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-image-width</code> CSS property defines the offset to use for dividing the border image in nine parts, the top-left corner, central top edge, top-right-corner, central right edge, bottom-right corner, central bottom edge, bottom-left corner, and central right edge. They represent inward distance from the top, right, bottom and right edges.]]></haxe_doc>
		</borderImageWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-left</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand that sets the values of <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-left-color">border-left-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-left-style">border-left-style</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-left-width">border-left-width</a></code>
. These properties describe the left border of elements.]]></haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-left-color </code>CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties&nbsp; <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-color">border-color</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-left">border-left</a></code>
 are more convenient and preferable.]]></haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-left-style</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the line style of the left border of a box.]]></haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-left-width</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the width of the left border of a box.]]></haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-radius</code> CSS property allows Web authors to define how rounded border corners are. The curve of each corner is defined using one or two radii, defining its shape: circle or ellipse.]]></haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-right</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand that sets the values of <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-right-color">border-right-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-right-style">border-right-style</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-right-width">border-right-width</a></code>
. These properties describe the right border of elements.]]></haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-right-color </code>CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties&nbsp; <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-color">border-color</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-right">border-right</a></code>
 are more convenient and preferable.]]></haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-right-style</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the line style of the right border of a box.]]></haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-right-width</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the width of the right border of a box.]]></haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-spacing</code> CSS property specifies the distance between the borders of adjacent cells (only for the <a title="en/CSS/border-collapse" rel="internal" href="https://developer.mozilla.org/en/CSS/border-collapse">separated borders model</a>). This is equivalent to the <code>cellspacing</code> attribute in presentational HTML, but an optional second value can be used to set different horizontal and vertical spacing.]]></haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-style</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand property for setting the line style for all four sides of the elements border.]]></haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-top</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand that sets the values of <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-top-color">border-top-color</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-top-style">border-top-style</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-top-width">border-top-width</a></code>
. These properties describe the top border of elements.]]></haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-top-color </code>CSS property sets the color of the top border of an element. Note that in many cases the shorthand CSS properties&nbsp; <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-color">border-color</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-top">border-top</a></code>
 are more convenient and preferable.]]></haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-top-left-radius</code> CSS property sets the rounding of the top-left corner of the element. The rounding can be a circle or an ellipse, or if one of the value is <code>0</code> no rounding is done and the corner is square.]]></haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-top-right-radius</code> CSS property sets the rounding of the top-right corner of the element. The rounding can be a circle or an ellipse, or if one of the value is <code>0</code> no rounding is done and the corner is square.]]></haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-top-style</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the line style of the top border of a box.]]></haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>border-top-width</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property sets the width of the top border of a box.]]></haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> border-width </code>CSS property sets the width of the border of a box. Using the shorthand property <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border">border</a></code>
 is often more convenient.]]></haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>bottom</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property participates in specifying the position of <em>positioned elements</em>.]]></haxe_doc>
		</bottom>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>box-shadow</code> CSS property accepts one or more shadow effects as a comma-separated list. It allows casting a drop shadow from the frame of almost any element. If a <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/border-radius">border-radius</a></code>
 is specified on the element with a box shadow, the box shadow takes on the same rounded corners. The z-ordering of multiple box shadows is the same as multiple <a title="text-shadow" rel="internal" href="https://developer.mozilla.org/en/CSS/text-shadow">text shadows</a> (the first specified shadow is on top).]]></haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> box-sizing </code>CSS property is used to alter the default CSS box model used to calculate widths and heights of elements. It is possible to use this property to emulate the behavior of browsers that do not correctly support the CSS box model specification.]]></haxe_doc>
		</boxSizing>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>caption-side</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property positions the content of a table's <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/caption">&lt;caption&gt;</a></code>
 on the specified side.]]></haxe_doc>
		</captionSide>
		<clear public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>clear</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies whether an element can be next to <a title="en/CSS/float" rel="internal" href="https://developer.mozilla.org/en/CSS/float">floating</a> elements that precede it or must be moved down (cleared) below them.]]></haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>clip</code> CSS property defines what portion of an element is visible. The <code>clip</code> property applies only to elements with <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/position">position:absolute</a></code>
.]]></haxe_doc>
		</clip>
		<color public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>color</code> CSS property sets the foreground color of an element's text content]]></haxe_doc>
		</color>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>column-count </code>CSS property describes the number of columns of the element.]]></haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>column-fill</code> CSS property controls how contents are partitioned into columns. Contents are either balanced, which means that contents in all columns will have the same height or, when using <code>auto</code>, just take up the room the content needs.]]></haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>column-gap</code> CSS property sets the size of the gap between columns for elements which are specified to display as a multi-column element.]]></haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[In multi-column layouts, the <code>column-rule</code> CSS property specifies a straight line, or "rule", to be drawn between each column. It is a convenient shorthand to avoid setting each of the individual <code>column-rule-*</code> properties separately : <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-rule-width">column-rule-width</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-rule-style">column-rule-style</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-rule-color">column-rule-color</a></code>
.]]></haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> column-rule-color </code>CSS property lets you set the color of the rule drawn between columns in multi-column layouts.]]></haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> column-rule-style </code>CSS property lets you set the style of the rule drawn between columns in multi-column layouts.]]></haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> column-rule-width </code>CSS property lets you set the width of the rule drawn between columns in multi-column layouts.]]></haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>column-span</code> CSS property makes it possible for an element to span across all columns when its value is set to <code>all</code>. An element that spans more than one column is called a <strong>spanning element</strong>.]]></haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>column-width</code> CSS property suggests an optimal column width. This is not a absolute value but a mere hint. Browser will adjust the width of the column around that suggested value, allowing to achieve scalable designs that fit different screen size. Especially in presence of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-count">column-count</a></code>
 CSS property which has precedence, to set an exact column width, all length values must be specified. In horizontal text these are <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/width">width</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-width">column-width</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-gap">column-gap</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-rule-width">column-rule-width</a></code>
.]]></haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>columns</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand property allowing to set both the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-width">column-width</a></code>
 and the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/column-count">column-count</a></code>
 properties at the same time.]]></haxe_doc>
		</columns>
		<content public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> content </code>CSS property is used with the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/%3Abefore">:before</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/%3Aafter">:after</a></code>
 pseudo-elements to generate content in an element.]]></haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>counter-increment</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is used to increase the value of <a title="en/CSS_Counters" rel="internal" href="https://developer.mozilla.org/en/CSS_Counters">CSS Counters</a> by a given value. The counter's value can be reset using the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/counter-reset">counter-reset</a></code>
 CSS property.]]></haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>counter-reset</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is used to reset <a title="en/CSS_Counters" rel="internal" href="https://developer.mozilla.org/en/CSS_Counters">CSS Counters</a> to a given value.]]></haxe_doc>
		</counterReset>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> cursor </code>CSS property specifies the mouse cursor displayed when the mouse pointer is over an element.]]></haxe_doc>
		</cursor>
		<direction public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>direction</code> CSS property should be set to match the direction of the text: <code>rtl</code> for Hebrew or Arabic text and <code>ltr</code> for other scripts. This should normally be done as part of the document (e.g., using the <code>dir</code> attribute in HTML) rather than through direct use of CSS.]]></haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>display</code> CSS property specifies the type of rendering box used for an element. In HTML, default <code>display</code> property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is <code>inline</code>.]]></haxe_doc>
		</display>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>empty-cells </code>CSS property specifies how user agent should render borders and backgrounds around cells that have no visible content.]]></haxe_doc>
		</emptyCells>
		<float public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>float</code> CSS property specifies that an element should be taken from the normal flow and placed along the left or right side of its container, where text and inline elements will wrap around it.]]></haxe_doc>
		</float>
		<font public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>font</code> CSS property is either a shorthand property for setting <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-style">font-style</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-variant">font-variant</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-weight">font-weight</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-size">font-size</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/line-height">line-height</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-family">font-family</a></code>
, or a way to set the element's font to a system font, using specific keywords.]]></haxe_doc>
		</font>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> font-family </code>CSS property allows for a prioritized list of font family names and/or generic family names to be specified for the selected element. Unlike most other CSS properties, values are separated by a comma to indicate that they are alternatives. The browser will select the first font on the list that is installed on the computer, or that can be downloaded using the information provided by a <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/@font-face">@font-face</a></code>
 at-rule.]]></haxe_doc>
		</fontFamily>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>font-size</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies the size of the font. The font size may, in turn, change the size of other items, since it is used to compute the value of <code>em</code> and <code>ex</code> length units.]]></haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> font-size-adjust </code>CSS property specifies that font size should be chosen based on the height of lowercase letters rather than the height of capital letters.]]></haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> font-stretch </code>CSS property selects a normal, condensed, or extended face from a font family.]]></haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> font-style </code>CSS property allows<code> italic </code>or<code> oblique </code>faces to be selected within a <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-family">font-family</a></code>
.<br>]]></haxe_doc>
		</fontStyle>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> font-variant </code>CSS property selects a<code> normal</code>, or<code> small-caps </code>face from a font family. Setting<code> font-variant </code>is also possible by using the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font">font</a></code>
 shorthand.]]></haxe_doc>
		</fontVariant>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/font-weight">font-weight</a></code>
 <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies the weight or boldness of the font. However, some fonts are not available in all weights; some are available only on <code>normal</code> and <code>bold</code>.]]></haxe_doc>
		</fontWeight>
		<height public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> height </code>CSS property specifies the height of the content area of an element. The <a title="en/CSS/Box_model#content" rel="internal" href="https://developer.mozilla.org/en/CSS/box_model#content">content area</a> is <em>inside</em> the padding, border, and margin of the element.]]></haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>hyphens</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property tells the browser how to go about splitting words to improve the layout of text when line-wrapping.]]></haxe_doc>
		</hyphens>
		<imageRendering public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>image-rendering</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property provides a hint to the user agent about how to handle its image rendering.<br> <code>image-rendering </code>applies to scaled images (and other elements, see below). For example, if the natural size of the image is<em> 100×100px </em>but the page author specifies the dimensions to <code>200×200px</code> (or<code>50×50px</code>), then the image will be upscaled (or downscaled) to the new dimensions using the specified algorithm. Scaling may also apply due to user interaction (zooming).]]></haxe_doc>
		</imageRendering>
		<left public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>left</code> CSS property specifies part of the position of positioned elements.]]></haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> letter-spacing </code>CSS property specifies spacing behavior between text characters.]]></haxe_doc>
		</letterSpacing>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[On inline elements, the<code> line-height </code>CSS property specifies the height that is used in the calculation of the line box height.<br>
On block level elements,<code> line-height </code>specifies the minimal height of line boxes within the element.]]></haxe_doc>
		</lineHeight>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> list-style </code>CSS property is a shorthand property for setting <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-image">list-style-image</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-position">list-style-position</a></code>
.]]></haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> list-style-image </code>CSS property sets the image that will be used as the list item marker. It is often more convenient to use the shortcut <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style">list-style</a></code>
.]]></haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> list-style-position </code>CSS property specifies the position of the marker box in the principal block box. It is often more convenient to use the shortcut <span class="lang lang-en"><code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style">list-style</a></code>
</span>.]]></haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> list-style-type </code>CSS property specifies appearance of a list item element. As it is the only one who defaults to <code>display:list-item</code>, this is usually a <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/li">&lt;li&gt;</a></code>
 element, but can be any element with this <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/display">display</a></code>
 value.]]></haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> margin </code>CSS property sets the margin for all four sides. It is a shorthand to avoid setting each side separately with the other margin properties:<br>
<code><a rel="custom" href="https://developer.mozilla.org/en/CSS/margin-top">margin-top</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/margin-right">margin-right</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/margin-bottom">margin-bottom</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/margin-left">margin-left</a></code>
.<br>
Negative value are also allowed.]]></haxe_doc>
		</margin>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>margin-bottom</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the margin space required on the bottom of an element. A negative value is also allowed.]]></haxe_doc>
		</marginBottom>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>margin-left</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the margin space required on the left side of an element. A negative value is also allowed.]]></haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>margin-right</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the margin space required on the right side of an element. A negative value is also allowed.]]></haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> margin-top </code>CSS property of an element sets the margin space required on the top of an element. A negative value is also allowed.]]></haxe_doc>
		</marginTop>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[&nbsp;]]></haxe_doc>
		</markerOffset>
		<marks public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>marks</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property adds crop and/or cross marks to the presentation of the document. <em>Crop marks</em> indicate where the page should be cut. <em>Cross marks</em> are used to align sheets.]]></haxe_doc>
		</marks>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> max-height </code>CSS property is used to set the maximum height of a given element. It prevents the used value of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/height">height</a></code>
 property from becoming larger than the value specified for<code> max-height</code>.]]></haxe_doc>
		</maxHeight>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> max-width </code>CSS property is used to set the maximum width of a given element. It prevents the used value of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/width">width</a></code>
 property from becoming larger than the value specified for<code> max-width</code>.]]></haxe_doc>
		</maxWidth>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> min-height </code>CSS property is used to set the minimum height of a given element. It prevents the used value of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/height">height</a></code>
 property from becoming smaller than the value specified for<code> min-height</code>.]]></haxe_doc>
		</minHeight>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> min-width </code>CSS property is used to set the minimum width of a given element. It prevents the used value of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/width">width</a></code>
 property from becoming smaller than the value specified for<code> min-width</code>.]]></haxe_doc>
		</minWidth>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>opacity</code> CSS property specifies the transparency of an element, that is, the degree to which the background behind the element is overlaid.]]></haxe_doc>
		</opacity>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>orphans</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property refers to the <em>minimum</em> number of lines in a block container that must be left at the bottom of the page.&nbsp; This property is normally used to control how page breaks occur.]]></haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> outline </code>CSS property is a shorthand property for setting one or more of the individual outline properties <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/outline-style">outline-style</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/outline-width">outline-width</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/outline-color">outline-color</a></code>
 in a single rule. In most cases the use of this shortcut is preferable and more convenient.]]></haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> outline-color </code>CSS property sets the color of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out.]]></haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> outline-offset </code>CSS property is used to set space between an <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/outline">outline</a></code>
 and the edge or border of an element. An outline is a line that is drawn around elements, outside the border edge.]]></haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> outline-style </code>CSS property is used to set the style of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out.]]></haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> outline-width </code>CSS property is used to set the width of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out:]]></haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> overflow </code>CSS property specifies whether to clip content, render scroll bars or display overflow content of a block-level element.]]></haxe_doc>
		</overflow>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>overflow-x </code><a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the left and right edges.]]></haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>overflow-y </code><a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the top and bottom edges.]]></haxe_doc>
		</overflowY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> padding </code>CSS property sets the required padding space on all sides of an element. The <a title="http://developer.mozilla.org/en/CSS/Box_model#padding" rel="internal" href="https://developer.mozilla.org/en/CSS/Box_model#padding">padding area</a> is the space between the content of the element and its border. Negative values are not allowed.]]></haxe_doc>
		</padding>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>padding-bottom</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the padding space required on the bottom of an element. The <a title="http://developer.mozilla.org/en/CSS/Box_model#padding" rel="internal" href="https://developer.mozilla.org/en/CSS/box_model#padding">padding area</a> is the space between the content of the element and it's border. A negative value is not allowed.]]></haxe_doc>
		</paddingBottom>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>padding-left</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the padding space required on the left side of an element. The <a title="http://developer.mozilla.org/en/CSS/Box_model#padding" rel="internal" href="https://developer.mozilla.org/en/CSS/box_model#padding">padding area</a> is the space between the content of the element and it's border. A negative value is not allowed.]]></haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>padding-right</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the padding space required on the right side of an element. The <a title="http://developer.mozilla.org/en/CSS/Box_model#padding" rel="internal" href="https://developer.mozilla.org/en/CSS/box_model#padding">padding area</a> is the space between the content of the element and its border. Negative values are not allowed.]]></haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>padding-top</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property of an element sets the padding space required on the top of an element. The <a title="http://developer.mozilla.org/en/CSS/Box_model#padding" rel="internal" href="https://developer.mozilla.org/en/CSS/box_model#padding">padding area</a> is the space between the content of the element and it's border. A negative values is not allowed.]]></haxe_doc>
		</paddingTop>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>page-break-after</code> CSS property adjusts page breaks <em>after</em> the current element.]]></haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>page-break-before</code> CSS property adjusts page breaks <em>before</em> the current element.]]></haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>page-break-inside</code> CSS property adjusts page breaks <em>inside</em> the current element.]]></haxe_doc>
		</pageBreakInside>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>perspective</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property determines the distance between the z=0 plane and the user in order to give to the 3D-positioned element some perspective. Each 3D element that is placed between the z=0 and the user is enlarged, each 3D-element with z&lt;0 is shrinked. How much deformation is defined by the value of this property.]]></haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>perspective-origin</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property determines the position the viewer is looking at. It is used as the <em>vanishing point</em> by the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/perspective">perspective</a></code>
 property.]]></haxe_doc>
		</perspectiveOrigin>
		<position public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> position </code>CSS property chooses alternative rules for positioning elements, designed to be useful for scripted animation effects.]]></haxe_doc>
		</position>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>quotes</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property indicates how user agents should render quotation marks.]]></haxe_doc>
		</quotes>
		<resize public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>resize</code> CSS property lets you control the resizability of an element.]]></haxe_doc>
		</resize>
		<right public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>right</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies part of the position of positioned elements.]]></haxe_doc>
		</right>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>tab-size</code> CSS property is used to customize the width of a tab (<code>U+0009</code>) character.]]></haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>table-layout</code> CSS property defines the algorithm to be used to layout the table cells, rows, and columns.]]></haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> text-align </code>CSS property describes how inline content like text is aligned in its parent block element.<code> text-align </code>does not control the alignment of block elements itself, only their inline content.]]></haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>text-align-last</code> CSS property describes how the last line of a block or a line right before a forced line break is aligned.]]></haxe_doc>
		</textAlignLast>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> text-decoration </code>CSS property is used to set the text formattings <code>underline, overline, line-through</code> and <code>blink</code>.]]></haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>text-decoration-color</code> CSS property sets the color used when drawing underlines, overlines, or strike-throughs specified by <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-decoration-line">text-decoration-line</a></code>
. This is the preferred way to color these text decorations, rather than using combinations of other HTML&nbsp;elements.]]></haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>text-decoration-line</code> CSS property sets what kind of line decorations are added to an element.]]></haxe_doc>
		</textDecorationLine>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>text-decoration-style</code> CSS property defines the style of the lines specified by <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-decoration-line">text-decoration-line</a></code>
. The style applies to all lines, there is no way to define different style for each of the line defined by <code>text-decoration-line</code>.]]></haxe_doc>
		</textDecorationStyle>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> text-indent </code>CSS property specifies how much horizontal space should be left before beginning of the first line of the text content of an element. Horizontal spacing is with respect to the left (or right, for right-to-left layout) edge of the containing block element's box.]]></haxe_doc>
		</textIndent>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> text-shadow </code>CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-decoration">text-decorations</a></code>
 of the element.]]></haxe_doc>
		</textShadow>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>text-transform</code> CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.]]></haxe_doc>
		</textTransform>
		<top public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>top</code> CSS property specifies part of the position of positioned elements. It has no effect on non-positioned elements.]]></haxe_doc>
		</top>
		<transform public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>transform</code> CSS property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled, and skewed according to the values set.]]></haxe_doc>
		</transform>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>transform-origin</code> CSS property lets you modify the origin for transformations of an element. For example, the transform-origin of the <code>rotate()</code> function is the centre of rotation. (This property is applied by first translating the element by the negated value of the property, then applying the element's transform, then translating by the property value.)]]></haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>transform-style</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element.]]></haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> transition </code><a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is a shorthand property for <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/transition-property">transition-property</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/transition-duration">transition-duration</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/transition-timing-function">transition-timing-function</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/transition-delay">transition-delay</a></code>
.]]></haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> transition-delay </code><a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies the amount of time to wait between a change being requested to a property that is to be transitioned and the start of the <a title="en/CSS/CSS transitions" rel="internal" href="https://developer.mozilla.org/en/CSS/CSS_transitions">transition effect</a>.]]></haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> transition-duration </code><a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies the number of seconds or milliseconds a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur.]]></haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>transition-property</code> CSS property is used to specify the names of CSS properties to which a <a title="en/CSS/CSS transitions" rel="internal" href="https://developer.mozilla.org/en/CSS/CSS_transitions">transition effect</a> should be applied.]]></haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> transition-timing-function </code>CSS property is used to describe how the intermediate values of the CSS&nbsp;properties being affected by a <a title="en/CSS/CSS transitions" rel="internal" href="https://developer.mozilla.org/en/CSS/CSS_transitions">transition effect</a> are calculated. This in essence lets you establish an acceleration curve, so that the speed of the transition can vary over its duration.]]></haxe_doc>
		</transitionTimingFunction>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>vertical-align</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property specifies the vertical alignment of an inline or table-cell element.]]></haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> visibility </code>CSS property is used for two things:]]></haxe_doc>
		</visibility>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> white-space </code>CSS property is used to to describe how whitespace inside the element is handled.]]></haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>where:</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> width </code>CSS property specifies the width of the content area of an element. The <a title="en/CSS/box_model#content" rel="internal" href="https://developer.mozilla.org/en/CSS/box_model#content">content area</a> is <em>inside</em> the padding, border, and margin of the element.]]></haxe_doc>
		</width>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> word-spacing </code>CSS property specifies spacing behavior between tags and words.]]></haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The <code>word-wrap</code> <a title="CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property is used to to specify whether or not the browser is allowed to break lines within words in order to prevent overflow when an otherwise unbreakable string is too long to fit.]]></haxe_doc>
		</wordWrap>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The<code> z-index </code>CSS property specifies the z-order of an element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one.]]></haxe_doc>
		</zIndex>
		<getPropertyCSSValue public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<c path="js.html.CSSValue"/>
</f></getPropertyCSSValue>
		<getPropertyPriority public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<getPropertyShorthand public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyShorthand>
		<getPropertyValue public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyValue>
		<isPropertyImplicit public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<x path="Bool"/>
</f></isPropertyImplicit>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<removeProperty public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<c path="String"/>
</f></removeProperty>
		<setProperty public="1" set="method"><f a="propertyName:?value:priority">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setProperty>
		<haxe_doc><![CDATA[<p>A CSSStyleDeclaration is an interface to the <a class="external" rel="external" href="http://www.w3.org/TR/1998/REC-CSS2-19980512/syndata.html#block" title="http://www.w3.org/TR/1998/REC-CSS2-19980512/syndata.html#block" target="_blank">declaration block</a> returned by the <code><a href="https://developer.mozilla.org/en/DOM/cssRule.style" rel="internal" title="en/DOM/cssRule.style">style</a></code> property of a <code><a href="/api/js/html/CSSKeyframeRule" rel="internal" title="en/DOM/cssRule">cssRule</a></code> in a <a href="/api/js/html/StyleSheet" rel="internal" title="en/DOM/stylesheet">stylesheet</a>, when the&nbsp;rule is a <a title="en/DOM/cssRule#CSSStyleRule" rel="internal" href="https://developer.mozilla.org/en/DOM/cssRule#CSSStyleRule">CSSStyleRule</a>.</p>
<p>CSSStyleDeclaration is also a <strong>read-only </strong>interface to the result of <a title="en/DOM/window.getComputedStyle" rel="internal" href="https://developer.mozilla.org/en/DOM/window.getComputedStyle">getComputedStyle</a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CSSStyleDeclaration">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/usr/lib/haxe/std/js/html/StyleSheet.hx" extern="1">
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the location of the stylesheet.</haxe_doc>
		</href>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Specifies the intended destination medium for style information.</haxe_doc>
		</media>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the node that associates this style sheet with the document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns the stylesheet that is including this one, if any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the advisory title of the current style sheet.</haxe_doc>
		</title>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Specifies the style sheet language for this style sheet.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[An object implementing the <code>StyleSheet</code> interface represents a single style sheet.&nbsp; CSS style sheets will further implement the more specialized <code><a title="en/DOM/CSSStyleSheet" rel="internal" href="/api/js/html/CSSStyleSheet">CSSStyleSheet</a></code> interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/stylesheet">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/usr/lib/haxe/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc><![CDATA[Returns a <code><a title="en/DOM/CSSRuleList" rel="internal" href="https://developer.mozilla.org/en/DOM/CSSRuleList">CSSRuleList</a></code> of the CSS rules in the style sheet.]]></haxe_doc>
		</cssRules>
		<ownerRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc><![CDATA[If this style sheet is imported into the document using an <code><a title="en/CSS/@import" rel="internal" href="https://developer.mozilla.org/en/CSS/@import">@import</a></code> rule, the <code>ownerRule</code> property will return that <code><a title="en/DOM/CSSImportRule" rel="internal" href="https://developer.mozilla.org/en/DOM/CSSImportRule" class="new ">CSSImportRule</a></code>, otherwise it returns <code>null</code>.]]></haxe_doc>
		</ownerRule>
		<rules public="1" set="null"><c path="js.html.CSSRuleList"/></rules>
		<addRule public="1" set="method"><f a="selector:style:?index">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addRule>
		<deleteRule public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteRule>
		<insertRule public="1" set="method"><f a="rule:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></insertRule>
		<removeRule public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></removeRule>
		<haxe_doc><![CDATA[<p>An object implementing the <code>CSSStyleSheet</code> interface represents a single <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> style sheet.</p>
<p>A CSS style sheet consists of CSS rules, each of which can be manipulated through an object that corresponds to that rule and that implements the <code><a title="en/DOM/cssRule" rel="internal" href="/api/js/html/CSSKeyframeRule">CSSRule</a></code> interface. The <code>CSSStyleSheet</code> itself lets you examine and modify its corresponding style sheet, including its list of rules.</p>
<p>In practice, every <code>CSSStyleSheet</code> also implements the more generic <code><a title="en/DOM/StyleSheet" rel="internal" href="/api/js/html/StyleSheet">StyleSheet</a></code> interface. A list of <code>CSSStyleSheet</code>-implementing objects corresponding to the style sheets for a given document can be reached by the <code><a title="en/DOM/document.styleSheets" rel="internal" href="/api/js/html/StyleSheetList">document.styleSheets</a></code> property, if the document is styled by an external CSS style sheet or an inline <code><a title="en/HTML/element/style" rel="internal" href="https://developer.mozilla.org/en/HTML/Element/style">style</a></code> element.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CSSStyleSheet">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSValue" params="" file="/usr/lib/haxe/std/js/html/CSSValue.hx" extern="1">
		<CSS_CUSTOM public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></CSS_CUSTOM>
		<CSS_INHERIT public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></CSS_INHERIT>
		<CSS_PRIMITIVE_VALUE public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></CSS_PRIMITIVE_VALUE>
		<CSS_VALUE_LIST public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></CSS_VALUE_LIST>
		<cssText public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</cssText>
		<cssValueType public="1" set="null"><x path="Int"/></cssValueType>
		<meta><m n=":native"><e>"CSSValue"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/usr/lib/haxe/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<height public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas#attr-height">height</a></code>
 HTML attribute, specifying the height of the coordinate space in CSS pixels.]]></haxe_doc>
		</height>
		<width public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas#attr-width">width</a></code>
 HTML attribute, specifying the width of the coordinate space in CSS pixels.]]></haxe_doc>
		</width>
		<getContext public="1" set="method"><f a="contextId">
	<c path="String"/>
	<d/>
</f></getContext>
		<toDataURL public="1" set="method"><f a="?type">
	<c path="String"/>
	<c path="String"/>
</f></toDataURL>
		<getContext2d public="1" get="inline" set="null" line="49">
			<f a=""><c path="js.html.CanvasRenderingContext2D"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>getContext("2d")</code>.]]></haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="51"><f a="?attribs">
	<t path="js.html.webgl.ContextAttributes"/>
	<c path="js.html.webgl.RenderingContext"/>
</f></getContextWebGL>
		<haxe_doc><![CDATA[DOM&nbsp;canvas elements expose the <code><a class="external" href="http://www.w3.org/TR/html5/the-canvas-element.html#htmlcanvaselement" rel="external nofollow" target="_blank" title="http://www.w3.org/TR/html5/the-canvas-element.html#htmlcanvaselement">HTMLCanvasElement</a></code> interface, which provides properties and methods for manipulating the layout and presentation of canvas elements. The <code>HTMLCanvasElement</code> interface inherits the properties and methods of the <code><a rel="custom" href="/api/js/html/Element">element</a></code>
 object interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLCanvasElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html._CanvasElement.CanvasUtil" params="" file="/usr/lib/haxe/std/js/html/CanvasElement.hx" private="1" module="js.html.CanvasElement"><getContextWebGL public="1" set="method" line="57" static="1"><f a="canvas:attribs">
	<c path="js.html.CanvasElement"/>
	<d/>
	<c path="js.html.webgl.RenderingContext"/>
</f></getContextWebGL></class>
	<class path="js.html.CanvasGradient" params="" file="/usr/lib/haxe/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method"><f a="offset:color">
	<x path="Float"/>
	<c path="String"/>
	<x path="Void"/>
</f></addColorStop>
		<haxe_doc><![CDATA[This is an opaque object representing a gradient and returned by <a title="en/DOM/CanvasRenderingContext2D" rel="internal" href="/api/js/html/CanvasRenderingContext2D">CanvasRenderingContext2D</a>'s <a title="en/DOM/CanvasRenderingContext2D.createLinearGradient" rel="internal" href="/api/js/html/CanvasRenderingContext2D">createLinearGradient</a> or <a title="en/DOM/CanvasRenderingContext2D.createRadialGradient" rel="internal" href="/api/js/html/CanvasRenderingContext2D">createRadialGradient</a> methods.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CanvasGradient">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/usr/lib/haxe/std/js/html/CanvasPattern.hx" extern="1">
		<haxe_doc><![CDATA[This is an opaque object created by <a title="en/DOM/CanvasRenderingContext2D" rel="internal" href="/api/js/html/CanvasRenderingContext2D">CanvasRenderingContext2D</a>'s <a title="en/DOM/CanvasRenderingContext2D.createPattern" rel="internal" href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D.createPattern" class="new ">createPattern</a> method (whether based on a image, canvas, or video).<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CanvasPattern">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext" params="" file="/usr/lib/haxe/std/js/html/CanvasRenderingContext.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<meta><m n=":native"><e>"CanvasRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/usr/lib/haxe/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<extends path="js.html.CanvasRenderingContext"/>
		<backingStorePixelRatio public="1" set="null"><x path="Float"/></backingStorePixelRatio>
		<fillStyle public="1">
			<d/>
			<haxe_doc><![CDATA[Color or style to use inside shapes. Default <code>#000</code> (black).]]></haxe_doc>
		</fillStyle>
		<font public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Default value <code>10px sans-serif</code>.]]></haxe_doc>
		</font>
		<globalAlpha public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[Alpha value that is applied to shapes and images before they are composited onto the canvas. Default <code>1.0</code> (opaque).]]></haxe_doc>
		</globalAlpha>
		<globalCompositeOperation public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[With <code>globalAplpha</code> applied this sets how shapes and images are drawn onto the existing bitmap. Possible values: <ul> <li><code>source-atop</code></li> <li><code>source-in</code></li> <li><code>source-out</code></li> <li><code>source-over</code> (default)</li> <li><code>destination-atop</code></li> <li><code>destination-in</code></li> <li><code>destination-out</code></li> <li><code>destination-over</code></li> <li><code>lighter</code></li> <li><code>xor</code></li> </ul>]]></haxe_doc>
		</globalCompositeOperation>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineCap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Type of endings on the end of lines. Possible values: <code>butt</code> (default), <code>round</code>, <code>square</code>]]></haxe_doc>
		</lineCap>
		<lineDash public="1"><c path="Array"><d/></c></lineDash>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<lineJoin public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Defines the type of corners where two lines meet. Possible values: <code>round</code>, <code>bevel</code>, <code>miter</code> (default)]]></haxe_doc>
		</lineJoin>
		<lineWidth public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[Width of lines. Default <code>1.0</code>]]></haxe_doc>
		</lineWidth>
		<miterLimit public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[Default <code>10</code>.]]></haxe_doc>
		</miterLimit>
		<shadowBlur public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[Specifies the blurring effect. Default <code>0</code>]]></haxe_doc>
		</shadowBlur>
		<shadowColor public="1">
			<c path="String"/>
			<haxe_doc>Color of the shadow. Default fully-transparent black.</haxe_doc>
		</shadowColor>
		<shadowOffsetX public="1">
			<x path="Float"/>
			<haxe_doc>Horizontal distance the shadow will be offset. Default 0.</haxe_doc>
		</shadowOffsetX>
		<shadowOffsetY public="1">
			<x path="Float"/>
			<haxe_doc>Vertical distance the shadow will be offset. Default 0.</haxe_doc>
		</shadowOffsetY>
		<strokeStyle public="1">
			<d/>
			<haxe_doc><![CDATA[Color or style to use for the lines around shapes. Default <code>#000</code> (black).]]></haxe_doc>
		</strokeStyle>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Possible values: <code>start</code> (default), <code>end</code>, <code>left</code>, <code>right</code> or <code>center</code>.]]></haxe_doc>
		</textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<arc public="1" set="method"><f a="x:y:radius:startAngle:endAngle:anticlockwise">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></arc>
		<arcTo public="1" set="method"><f a="x1:y1:x2:y2:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></arcTo>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<clearRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<clearShadow public="1" set="method"><f a=""><x path="Void"/></f></clearShadow>
		<clip public="1" set="method"><f a=""><x path="Void"/></f></clip>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<createImageData public="1" set="method">
			<f a="sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="imagedata">
		<c path="js.html.ImageData"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createPattern public="1" set="method">
			<f a="image:repetitionType">
				<c path="js.html.ImageElement"/>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc><![CDATA[<div id="section_31"><span id="Parameters_10"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>A DOM <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/element">element</a></code>
 to use as the source image for the pattern. This can be any element, although typically you'll use an <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Image" class="new">Image</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
.</dd> <dt><code>repetition</code></dt> <dd>?</dd>
</dl>
</div><div id="section_32"><span id="Return_value_3"></span><h6 class="editable">Return value</h6>
<p>A new DOM canvas pattern object for use in pattern-based operations.</p>
</div><div id="section_33"><span id="Exceptions_thrown"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>NS_ERROR_DOM_INVALID_STATE_ERR</code> 
<span title="(Firefox 10.0 / Thunderbird 10.0)
">Requires Gecko 10.0</span>
</dt> <dd>The specified <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
 element for the <code>image</code> parameter is zero-sized (that is, one or both of its dimensions are 0 pixels).</dd>
</dl>
</div> Throws DOMException.]]></haxe_doc>
			<overloads><createPattern public="1" set="method">
	<f a="canvas:repetitionType">
		<c path="js.html.CanvasElement"/>
		<c path="String"/>
		<c path="js.html.CanvasPattern"/>
	</f>
	<haxe_doc><![CDATA[<div id="section_31"><span id="Parameters_10"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>A DOM <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/element">element</a></code>
 to use as the source image for the pattern. This can be any element, although typically you'll use an <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Image" class="new">Image</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
.</dd> <dt><code>repetition</code></dt> <dd>?</dd>
</dl>
</div><div id="section_32"><span id="Return_value_3"></span><h6 class="editable">Return value</h6>
<p>A new DOM canvas pattern object for use in pattern-based operations.</p>
</div><div id="section_33"><span id="Exceptions_thrown"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>NS_ERROR_DOM_INVALID_STATE_ERR</code> 
<span title="(Firefox 10.0 / Thunderbird 10.0)
">Requires Gecko 10.0</span>
</dt> <dd>The specified <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
 element for the <code>image</code> parameter is zero-sized (that is, one or both of its dimensions are 0 pixels).</dd>
</dl>
</div> Throws DOMException.]]></haxe_doc>
</createPattern></overloads>
		</createPattern>
		<createRadialGradient public="1" set="method"><f a="x0:y0:r0:x1:y1:r1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createRadialGradient>
		<drawImage public="1" set="method">
			<f a="video:sx:sy:sw:sh:dx:dy:dw:dh">
				<c path="js.html.VideoElement"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:x:y">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:x:y:width:height">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="canvas:x:y">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="canvas:x:y:width:height">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="canvas:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="video:x:y">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="video:x:y:width:height">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.</p>

<div id="section_41"><span id="Parameters_13"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>image</code></dt> <dd>An element to draw into the context; the specification permits any image element (that is, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img">&lt;img&gt;</a></code>
, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
, and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
). Some browsers, including Firefox, let you use any arbitrary element.</dd> <dt><code>dx</code></dt> <dd>The X coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dy</code></dt> <dd>The Y coordinate in the destination canvas at which to place the top-left corner of the source <code>image</code>.</dd> <dt><code>dw</code></dt> <dd>The width to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</dd> <dt><code>dh</code></dt> <dd>The height to draw the <code>image</code> in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.</dd> <dt><code>sx</code></dt> <dd>The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sy</code></dt> <dd>The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.</dd> <dt><code>sw</code></dt> <dd>The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by <code>sx</code> and <code>sy</code> to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn.</dd> <dt><code>sh</code></dt> <dd>The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn.</dd>
</dl>
<p>The diagram below illustrates the meanings of the various parameters.</p>
<p><img alt="drawImage.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/5494/=drawImage.png"></p>
</div><div id="section_42"><span id="Exceptions_thrown_2"></span><h6 class="editable">Exceptions thrown</h6>
<dl> <dt><code>INDEX_SIZE_ERR</code></dt> <dd>If the canvas or source rectangle width or height is zero.</dd> <dt><code>INVALID_STATE_ERR</code></dt> <dd>The image has no image data.</dd> <dt><code>TYPE_MISMATCH_ERR</code></dt> <dd>The specified source element isn't supported. This is not thrown by Firefox, since any element may be used as a source image.</dd>
</dl>
</div><div id="section_43"><span id="Compatibility_notes"></span><h6 class="editable">Compatibility notes</h6>
<ul> <li>Prior to Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
, Firefox threw an exception if any of the coordinate values was non-finite or zero. As per the specification, this no longer happens.</li> <li>Support for flipping the image by using negative values for <code>sw</code> and <code>sh</code> was added in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)
.</li> <li>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
 now correctly supports CORS for drawing images across domains without <a title="en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F" rel="internal" href="https://developer.mozilla.org/en/CORS_Enabled_Image#What_is_a_.22tainted.22_canvas.3F">tainting the canvas</a>.</li>
</ul>
</div> Throws DOMException.]]></haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<drawImageFromRect public="1" set="method"><f a="image:?sx:?sy:?sw:?sh:?dx:?dy:?dw:?dh:?compositeOperation">
	<c path="js.html.ImageElement"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Void"/>
</f></drawImageFromRect>
		<fill public="1" set="method"><f a=""><x path="Void"/></f></fill>
		<fillRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<fillText public="1" set="method"><f a="text:x:y:?maxWidth">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillText>
		<getImageData public="1" set="method"><f a="sx:sy:sw:sh">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.ImageData"/>
</f></getImageData>
		<getImageDataHD public="1" set="method"><f a="sx:sy:sw:sh">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.ImageData"/>
</f></getImageDataHD>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<isPointInPath public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInPath>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<measureText public="1" set="method"><f a="text">
	<c path="String"/>
	<c path="js.html.TextMetrics"/>
</f></measureText>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<h6 class="editable">Compatibility notes</h6>
<ul> <li>Starting in Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0)
, non-finite values to any of these parameters causes the call to putImageData() to be silently ignored, rather than throwing an exception.</li>
</ul> Throws DOMException.]]></haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc><![CDATA[<h6 class="editable">Compatibility notes</h6>
<ul> <li>Starting in Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0)
, non-finite values to any of these parameters causes the call to putImageData() to be silently ignored, rather than throwing an exception.</li>
</ul> Throws DOMException.]]></haxe_doc>
</putImageData></overloads>
		</putImageData>
		<putImageDataHD public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><putImageDataHD public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</putImageDataHD></overloads>
		</putImageDataHD>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<rect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setAlpha public="1" set="method"><f a="alpha">
	<x path="Float"/>
	<x path="Void"/>
</f></setAlpha>
		<setCompositeOperation public="1" set="method"><f a="compositeOperation">
	<c path="String"/>
	<x path="Void"/>
</f></setCompositeOperation>
		<setFillColor public="1" set="method">
			<f a="c:m:y:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<overloads>
				<setFillColor public="1" set="method"><f a="color:?alpha">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFillColor>
				<setFillColor public="1" set="method"><f a="grayLevel:?alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFillColor>
				<setFillColor public="1" set="method"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFillColor>
			</overloads>
		</setFillColor>
		<setLineCap public="1" set="method"><f a="cap">
	<c path="String"/>
	<x path="Void"/>
</f></setLineCap>
		<setLineDash public="1" set="method"><f a="dash">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setLineDash>
		<setLineJoin public="1" set="method"><f a="join">
	<c path="String"/>
	<x path="Void"/>
</f></setLineJoin>
		<setLineWidth public="1" set="method"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></setLineWidth>
		<setMiterLimit public="1" set="method"><f a="limit">
	<x path="Float"/>
	<x path="Void"/>
</f></setMiterLimit>
		<setShadow public="1" set="method">
			<f a="width:height:blur:c:m:y:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<overloads>
				<setShadow public="1" set="method"><f a="width:height:blur:?color:?alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setShadow>
				<setShadow public="1" set="method"><f a="width:height:blur:grayLevel:?alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setShadow>
				<setShadow public="1" set="method"><f a="width:height:blur:r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setShadow>
			</overloads>
		</setShadow>
		<setStrokeColor public="1" set="method">
			<f a="c:m:y:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<overloads>
				<setStrokeColor public="1" set="method"><f a="color:?alpha">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setStrokeColor>
				<setStrokeColor public="1" set="method"><f a="grayLevel:?alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setStrokeColor>
				<setStrokeColor public="1" set="method"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setStrokeColor>
			</overloads>
		</setStrokeColor>
		<setTransform public="1" set="method"><f a="m11:m12:m21:m22:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTransform>
		<stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke>
		<strokeRect public="1" set="method"><f a="x:y:width:height:?lineWidth">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<strokeText public="1" set="method"><f a="text:x:y:?maxWidth">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeText>
		<transform public="1" set="method"><f a="m11:m12:m21:m22:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></transform>
		<translate public="1" set="method"><f a="tx:ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<haxe_doc><![CDATA[The bulk of the operations available at present with <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
 are available through this interface, returned by a call to <code>getContext()</code> on the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
 element, with "2d" as its argument.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<class path="js.html.ClientRect" params="" file="/usr/lib/haxe/std/js/html/ClientRect.hx" extern="1">
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[Y-coordinate, relative to the viewport origin, of the bottom of the rectangle box. <strong>Read only.</strong>]]></haxe_doc>
		</bottom>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[Height of the rectangle box (This is identical to <code>bottom</code> minus <code>top</code>). <strong>Read only.</strong>]]></haxe_doc>
		</height>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[X-coordinate, relative to the viewport origin, of the left of the rectangle box. <strong>Read only.</strong>]]></haxe_doc>
		</left>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[X-coordinate, relative to the viewport origin, of the right of the rectangle box. <strong>Read only.</strong>]]></haxe_doc>
		</right>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[Y-coordinate, relative to the viewport origin, of the top of the rectangle box. <strong>Read only.</strong>]]></haxe_doc>
		</top>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[Width of the rectangle box (This is identical to <code>right</code> minus <code>left</code>). <strong>Read only.</strong> 
<span title="(Firefox 3.5 / Thunderbird 3.0 / SeaMonkey 2.0)
">Requires Gecko 1.9.1</span>]]></haxe_doc>
		</width>
		<haxe_doc><![CDATA[<div>

<a rel="custom" href="http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsIDOMClientRect.idl"><code>dom/interfaces/base/nsIDOMClientRect.idl</code></a><span><a rel="internal" href="https://developer.mozilla.org/en/Interfaces/About_Scriptable_Interfaces" title="en/Interfaces/About_Scriptable_Interfaces">Scriptable</a></span></div><span>Represents a rectangular box. The type of box is specified by the method that returns such an object. It is returned by functions like <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/element.getBoundingClientRect">element.getBoundingClientRect</a></code>
.</span><div><div>1.0</div><div>11.0</div><div></div><div>Introduced</div><div>Gecko 1.9</div><div title="Introduced in Gecko 1.9 (Firefox 3)
"></div><div title="Last changed in Gecko 1.9.1 (Firefox 3)
"></div></div>
<div>Inherits from: <code><a rel="custom" href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsISupports">nsISupports</a></code>
<span>Last changed in Gecko 1.9.1 (Firefox 3.5 / Thunderbird 3.0 / SeaMonkey 2.0)
</span></div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIDOMClientRect">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"ClientRect"</e></m></meta>
	</class>
	<class path="js.html.ClientRectList" params="" file="/usr/lib/haxe/std/js/html/ClientRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.ClientRect"/>
</f></item>
		<meta><m n=":native"><e>"ClientRectList"</e></m></meta>
	</class>
	<class path="js.html.Clipboard" params="" file="/usr/lib/haxe/std/js/html/Clipboard.hx" extern="1">
		<dropEffect public="1"><c path="String"/></dropEffect>
		<effectAllowed public="1"><c path="String"/></effectAllowed>
		<files public="1" set="null"><c path="js.html.FileList"/></files>
		<items public="1" set="null"><c path="js.html.DataTransferItemList"/></items>
		<types public="1" set="null"><c path="Array"><d/></c></types>
		<clearData public="1" set="method"><f a="?type">
	<c path="String"/>
	<x path="Void"/>
</f></clearData>
		<getData public="1" set="method"><f a="type">
	<c path="String"/>
	<c path="String"/>
</f></getData>
		<setData public="1" set="method"><f a="type:data">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></setData>
		<setDragImage public="1" set="method"><f a="image:x:y">
	<c path="js.html.ImageElement"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setDragImage>
		<haxe_doc><![CDATA[<div>

<a rel="custom" href="http://mxr.mozilla.org/mozilla-central/source/widget/public/nsIClipboard.idl"><code>widget/public/nsIClipboard.idl</code></a><span><a rel="internal" href="https://developer.mozilla.org/en/Interfaces/About_Scriptable_Interfaces" title="en/Interfaces/About_Scriptable_Interfaces">Scriptable</a></span></div><span>This interface supports basic clipboard operations such as: setting, retrieving, emptying, matching and supporting clipboard data.</span><div>Inherits from: <code><a rel="custom" href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsISupports">nsISupports</a></code>
<span>Last changed in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)
</span></div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIClipboard">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Clipboard"</e></m></meta>
	</class>
	<class path="js.html.Comment" params="" file="/usr/lib/haxe/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<haxe_doc><![CDATA[<p>A comment is used to add notations within markup; although it is generally not displayed, it is still available to be read in the source view (in Firefox:&nbsp;View -&gt; Page Source).&nbsp; These are represented in HTML and XML as content between <code>&lt;!--</code> and&nbsp; <code>--&gt; . </code>In XML, the character sequence "--" cannot be used within a comment.</p>
<p>A comment has no special properties or methods of its own, but inherits those of <a title="En/DOM/CharacterData" rel="internal" href="/api/js/html/CharacterData">CharacterData</a> (which inherits from <a title="en/DOM/Node" rel="internal" href="/api/js/html/Node">Node</a>).</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Comment">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<class path="js.html.Console" params="" file="/usr/lib/haxe/std/js/html/Console.hx" extern="1">
		<memory public="1" set="null"><c path="js.html.MemoryInfo"/></memory>
		<profiles public="1" set="null"><c path="Array"><c path="js.html.ScriptProfile"/></c></profiles>
		<assert public="1" set="method"><f a="condition:?p1:?p2:?p3:?p4:?p5">
	<x path="Bool"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></assert>
		<clear public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></clear>
		<count public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></count>
		<debug public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></debug>
		<dir public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></dir>
		<dirxml public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></dirxml>
		<error public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></error>
		<group public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></group>
		<groupCollapsed public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></groupCollapsed>
		<groupEnd public="1" set="method"><f a=""><x path="Void"/></f></groupEnd>
		<info public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></info>
		<log public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></log>
		<markTimeline public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></markTimeline>
		<profile public="1" set="method"><f a="title">
	<c path="String"/>
	<x path="Void"/>
</f></profile>
		<profileEnd public="1" set="method"><f a="title">
	<c path="String"/>
	<x path="Void"/>
</f></profileEnd>
		<time public="1" set="method"><f a="title">
	<c path="String"/>
	<x path="Void"/>
</f></time>
		<timeEnd public="1" set="method"><f a="title:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></timeEnd>
		<timeStamp public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></timeStamp>
		<trace public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></trace>
		<warn public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></warn>
		<haxe_doc><![CDATA[<p>Beginning with Firefox 4, the old <a title="en/Error Console" rel="internal" href="https://developer.mozilla.org/en/Error_Console">Error Console</a> has been deprecated in favor of the new, improved Web&nbsp;Console. The Web Console is something of a heads-up display for the web, letting you view error messages and other logged information. In addition, there are methods you can call to output information to the console, making it a useful debugging aid, and you can evaluate JavaScript on the fly.</p>
<p><a title="webconsole.png" rel="internal" href="https://developer.mozilla.org/@api/deki/files/4748/=webconsole.png"><img alt="webconsole.png" class="internal default" src="https://developer.mozilla.org/@api/deki/files/4748/=webconsole.png"></a></p>
<p>The Web Console won't replace more advanced debugging tools like <a class="external" title="http://getfirebug.com/" rel="external" href="http://getfirebug.com/" target="_blank">Firebug</a>; what it does give you, however, is a way to let remote users of your site or web application gather and report console logs and other information to you. It also provides a lightweight way to debug content if you don't happen to have Firebug installed when something goes wrong.</p>
<div class="note"><strong>Note:</strong> The Error Console is still available; you can re-enable it by changing the <code>devtools.errorconsole.enabled</code> preference to <code>true</code> and restarting the browser.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Using_the_Web_Console">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Console"</e></m></meta>
	</class>
	<class path="js.html.ContentElement" params="" file="/usr/lib/haxe/std/js/html/ContentElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<resetStyleInheritance public="1"><x path="Bool"/></resetStyleInheritance>
		<select public="1"><c path="String"/></select>
		<getDistributedNodes public="1" set="method"><f a=""><c path="js.html.NodeList"/></f></getDistributedNodes>
		<meta><m n=":native"><e>"HTMLContentElement"</e></m></meta>
	</class>
	<class path="js.html.Coordinates" params="" file="/usr/lib/haxe/std/js/html/Coordinates.hx" extern="1">
		<accuracy public="1" set="null"><x path="Float"/></accuracy>
		<altitude public="1" set="null"><x path="Float"/></altitude>
		<altitudeAccuracy public="1" set="null"><x path="Float"/></altitudeAccuracy>
		<heading public="1" set="null"><x path="Float"/></heading>
		<latitude public="1" set="null"><x path="Float"/></latitude>
		<longitude public="1" set="null"><x path="Float"/></longitude>
		<speed public="1" set="null"><x path="Float"/></speed>
		<meta><m n=":native"><e>"Coordinates"</e></m></meta>
	</class>
	<class path="js.html.Crypto" params="" file="/usr/lib/haxe/std/js/html/Crypto.hx" extern="1">
		<getRandomValues public="1" set="method"><f a="array">
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></getRandomValues>
		<haxe_doc><![CDATA[Non-standard<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_crypto">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.DListElement" params="" file="/usr/lib/haxe/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Indicates that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[DOM&nbsp;definition list elements expose the <a title="http://www.w3.org/TR/html5/grouping-content.html#htmldlistelement" class=" external" rel="external nofollow" href="http://www.w3.org/TR/html5/grouping-content.html#htmldlistelement" target="_blank">HTMLDListElement</a> (or <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external nofollow" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-52368974" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-52368974" target="_blank"><code>HTMLDListElement</code></a>) interface, which provides special properties (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating definition list elements. In 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>, this interface inherits from HTMLElement, but defines no additional members.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLDListElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMApplicationCache" params="" file="/usr/lib/haxe/std/js/html/DOMApplicationCache.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<CHECKING public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></CHECKING>
		<DOWNLOADING public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></DOWNLOADING>
		<IDLE public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></IDLE>
		<OBSOLETE public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></OBSOLETE>
		<UNCACHED public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></UNCACHED>
		<UPDATEREADY public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></UPDATEREADY>
		<oncached public="1"><t path="js.html.EventListener"/></oncached>
		<onchecking public="1"><t path="js.html.EventListener"/></onchecking>
		<ondownloading public="1"><t path="js.html.EventListener"/></ondownloading>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<onnoupdate public="1"><t path="js.html.EventListener"/></onnoupdate>
		<onobsolete public="1"><t path="js.html.EventListener"/></onobsolete>
		<onprogress public="1"><t path="js.html.EventListener"/></onprogress>
		<onupdateready public="1"><t path="js.html.EventListener"/></onupdateready>
		<status public="1" set="null"><x path="Int"/></status>
		<abort public="1" set="method"><f a=""><x path="Void"/></f></abort>
		<swapCache public="1" set="method"><f a=""><x path="Void"/></f></swapCache>
		<update public="1" set="method"><f a=""><x path="Void"/></f></update>
		<meta><m n=":native"><e>"DOMApplicationCache"</e></m></meta>
	</class>
	<class path="js.html.DOMCoreException" params="" file="/usr/lib/haxe/std/js/html/DOMCoreException.hx" extern="1">
		<ABORT_ERR public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></ABORT_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></DATA_CLONE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></HIERARCHY_REQUEST_ERR>
		<INDEX_SIZE_ERR public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></INDEX_SIZE_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></INUSE_ATTRIBUTE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></INVALID_ACCESS_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></INVALID_CHARACTER_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" line="45" static="1"><x path="Int"/></INVALID_MODIFICATION_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" line="47" static="1"><x path="Int"/></INVALID_NODE_TYPE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" line="49" static="1"><x path="Int"/></INVALID_STATE_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" line="51" static="1"><x path="Int"/></NAMESPACE_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" line="53" static="1"><x path="Int"/></NETWORK_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" line="55" static="1"><x path="Int"/></NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" line="57" static="1"><x path="Int"/></NOT_SUPPORTED_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" line="59" static="1"><x path="Int"/></NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" line="61" static="1"><x path="Int"/></NO_MODIFICATION_ALLOWED_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" line="63" static="1"><x path="Int"/></QUOTA_EXCEEDED_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" line="65" static="1"><x path="Int"/></SECURITY_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" line="67" static="1"><x path="Int"/></SYNTAX_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" line="69" static="1"><x path="Int"/></TIMEOUT_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" line="71" static="1"><x path="Int"/></TYPE_MISMATCH_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" line="73" static="1"><x path="Int"/></URL_MISMATCH_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" line="75" static="1"><x path="Int"/></VALIDATION_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" line="77" static="1"><x path="Int"/></WRONG_DOCUMENT_ERR>
		<code public="1" set="null"><x path="Int"/></code>
		<message public="1" set="null"><c path="String"/></message>
		<name public="1" set="null"><c path="String"/></name>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMError" params="" file="/usr/lib/haxe/std/js/html/DOMError.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<meta><m n=":native"><e>"DOMError"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/usr/lib/haxe/std/js/html/DOMImplementation.hx" extern="1">
		<createCSSStyleSheet public="1" set="method"><f a="title:media">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.CSSStyleSheet"/>
</f></createCSSStyleSheet>
		<createDocument public="1" set="method"><f a="?namespaceURI:?qualifiedName:?doctype">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.DocumentType"/>
	<c path="js.html.Document"/>
</f></createDocument>
		<createDocumentType public="1" set="method"><f a="?qualifiedName:?publicId:?systemId">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.DocumentType"/>
</f></createDocumentType>
		<createHTMLDocument public="1" set="method"><f a="title">
	<c path="String"/>
	<c path="js.html.Document"/>
</f></createHTMLDocument>
		<hasFeature public="1" set="method"><f a="feature:?version">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasFeature>
		<haxe_doc><![CDATA[Provides methods which are not dependent on any particular DOM instances. Returned by <code><a title="En/DOM/Document.implementation" class="internal" rel="internal" href="https://developer.mozilla.org/en/DOM/document.implementation">document.implementation</a></code>.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/DOMImplementation">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMMimeType" params="" file="/usr/lib/haxe/std/js/html/DOMMimeType.hx" extern="1">
		<description public="1" set="null"><c path="String"/></description>
		<enabledPlugin public="1" set="null"><c path="js.html.DOMPlugin"/></enabledPlugin>
		<suffixes public="1" set="null"><c path="String"/></suffixes>
		<type public="1" set="null"><c path="String"/></type>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.DOMMimeTypeArray" params="" file="/usr/lib/haxe/std/js/html/DOMMimeTypeArray.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMMimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.DOMMimeType"/>
</f></namedItem>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.DOMPlugin" params="" file="/usr/lib/haxe/std/js/html/DOMPlugin.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A human readable description of the plugin. <strong>Read only.</strong>]]></haxe_doc>
		</description>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The filename of the plugin file. <strong>Read only.</strong>]]></haxe_doc>
		</filename>
		<length public="1" set="null"><x path="Int"/></length>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The name of the plugin. <strong>Read only.</strong>]]></haxe_doc>
		</name>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMMimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.DOMMimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The <code>Plugin</code> interface provides information about a browser plugin.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Plugin">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.DOMPluginArray" params="" file="/usr/lib/haxe/std/js/html/DOMPluginArray.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMPlugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.DOMPlugin"/>
</f></namedItem>
		<refresh public="1" set="method"><f a="reload">
	<x path="Bool"/>
	<x path="Void"/>
</f></refresh>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<class path="js.html.DOMSelection" params="" file="/usr/lib/haxe/std/js/html/DOMSelection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the node in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of characters that the selection's anchor is offset within the anchorNode.</haxe_doc>
		</anchorOffset>
		<baseNode public="1" set="null"><c path="js.html.Node"/></baseNode>
		<baseOffset public="1" set="null"><x path="Int"/></baseOffset>
		<extentNode public="1" set="null"><c path="js.html.Node"/></extentNode>
		<extentOffset public="1" set="null"><x path="Int"/></extentOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the node in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of characters that the selection's focus is offset within the focusNode.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<type public="1" set="null"><c path="String"/></type>
		<addRange public="1" set="method"><f a="range">
	<c path="js.html.Range"/>
	<x path="Void"/>
</f></addRange>
		<collapse public="1" set="method"><f a="node:index">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></collapse>
		<collapseToEnd public="1" set="method"><f a=""><x path="Void"/></f></collapseToEnd>
		<collapseToStart public="1" set="method"><f a=""><x path="Void"/></f></collapseToStart>
		<containsNode public="1" set="method"><f a="node:allowPartial">
	<c path="js.html.Node"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></containsNode>
		<deleteFromDocument public="1" set="method"><f a=""><x path="Void"/></f></deleteFromDocument>
		<empty public="1" set="method"><f a=""><x path="Void"/></f></empty>
		<extend public="1" set="method"><f a="node:offset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></extend>
		<getRangeAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Range"/>
</f></getRangeAt>
		<modify public="1" set="method"><f a="alter:direction:granularity">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></modify>
		<removeAllRanges public="1" set="method"><f a=""><x path="Void"/></f></removeAllRanges>
		<selectAllChildren public="1" set="method"><f a="node">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></selectAllChildren>
		<setBaseAndExtent public="1" set="method"><f a="baseNode:baseOffset:extentNode:extentOffset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setBaseAndExtent>
		<setPosition public="1" set="method"><f a="node:offset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPosition>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<haxe_doc><![CDATA[<p>Selection is the class of the object returned by <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.getSelection">window.getSelection()</a></code>
 and other methods. It represents the text selection in the greater page, possibly spanning multiple elements, when the user drags over static text and other parts of the page. For information about text selection in an individual text editing element, see <code><a rel="custom" href="/api/js/html/InputElement">Input</a></code>
, <code><a rel="custom" href="/api/js/html/TextAreaElement">TextArea</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/document.activeElement">document.activeElement</a></code>
 which typically return the parent object returned from <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.getSelection">window.getSelection()</a></code>
.</p>
<p>A selection object represents the <code><a rel="custom" href="/api/js/html/Range">ranges</a></code>
 that the user has selected. Typically, it holds only one range, accessed as follows:</p>

          <pre name="code" class="js">var selObj = window.getSelection();
var range  = selObj.getRangeAt(0);</pre>
        
<ul> <li><code>selObj</code> is a Selection object</li> <li><code>range</code> is a <a title="en/DOM/Range" rel="internal" href="/api/js/html/Range">Range</a> object</li>
</ul>
<p>Calling the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Selection/toString">Selection/toString()</a></code>
 method returns the text contained in the selection, e.g</p>

          <pre name="code" class="js">var selObj = window.getSelection();
window.alert(selObj);</pre>
        
<p>Note that using a selection object as the argument to <code>window.alert</code> will call the object's <code>toString</code> method.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Selection">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/usr/lib/haxe/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<add public="1" set="method"><f a="tokens">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<contains public="1" set="method"><f a="token">
	<c path="String"/>
	<x path="Bool"/>
</f></contains>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<remove public="1" set="method"><f a="tokens">
	<c path="String"/>
	<x path="Void"/>
</f></remove>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toggle public="1" set="method"><f a="token:?force">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></toggle>
		<haxe_doc><![CDATA[This type represents a set of space-separated tokens. Commonly returned by <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/element.classList">HTMLElement.classList</a></code>
, HTMLLinkElement.relList, HTMLAnchorElement.relList or HTMLAreaElement.relList. It is indexed beginning with 0 as with JavaScript arrays. DOMTokenList is always case-sensitive.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/DOMTokenList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DOMSettableTokenList" params="" file="/usr/lib/haxe/std/js/html/DOMSettableTokenList.hx" extern="1">
		<extends path="js.html.DOMTokenList"/>
		<value public="1"><c path="String"/></value>
		<meta><m n=":native"><e>"DOMSettableTokenList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/usr/lib/haxe/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<contains public="1" set="method"><f a="string">
	<c path="String"/>
	<x path="Bool"/>
</f></contains>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/usr/lib/haxe/std/js/html/DOMStringMap.hx" extern="1"><meta><m n=":native"><e>"DOMStringMap"</e></m></meta></class>
	<class path="js.html.DOMWindow" params="" file="/usr/lib/haxe/std/js/html/DOMWindow.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<PERSISTENT public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></PERSISTENT>
		<TEMPORARY public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></TEMPORARY>
		<applicationCache public="1" set="null">
			<c path="js.html.DOMApplicationCache"/>
			<haxe_doc><![CDATA[An <code><a rel="custom" href="https://developer.mozilla.org/en/nsIDOMOfflineResourceList">nsIDOMOfflineResourceList</a></code>
 object providing access to the offline resources for the window.]]></haxe_doc>
		</applicationCache>
		<clientInformation public="1" set="null"><c path="js.html.Navigator"/></clientInformation>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[<dd>This property indicates whether the current window is closed or not.</dd> <dt><a title="en/Components_object" rel="internal" href="https://developer.mozilla.org/en/Components_object">window.Components</a></dt> <dd>The entry point to many <a title="en/XPCOM" rel="internal" href="https://developer.mozilla.org/en/XPCOM">XPCOM</a> features. Some properties, e.g. <a title="en/Components.classes" rel="internal" href="https://developer.mozilla.org/en/Components.classes">classes</a>, are only available to sufficiently privileged code.</dd>]]></haxe_doc>
		</closed>
		<console public="1" set="null"><c path="js.html.Console"/></console>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<defaultStatus public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the status bar text for the given window.</haxe_doc>
		</defaultStatus>
		<defaultstatus public="1"><c path="String"/></defaultstatus>
		<devicePixelRatio public="1" set="null"><x path="Float"/></devicePixelRatio>
		<document public="1" set="null">
			<c path="js.html.Document"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<event public="1" set="null"><c path="js.html.Event"/></event>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<frames public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<innerHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<innerWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns the number of frames in the window. See also <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.frames">window.frames</a></code>
.]]></haxe_doc>
		</length>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it. Getter throws DOMException.</haxe_doc>
		</localStorage>
		<location public="1">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<locationbar public="1" set="null">
			<c path="js.html.BarInfo"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarInfo"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<notifications public="1" set="null"><c path="js.html.NotificationCenter"/></notifications>
		<offscreenBuffering public="1" set="null"><x path="Bool"/></offscreenBuffering>
		<onabort public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for abort events on the window.</haxe_doc>
		</onabort>
		<onanimationend public="1"><t path="js.html.EventListener"/></onanimationend>
		<onanimationiteration public="1"><t path="js.html.EventListener"/></onanimationiteration>
		<onanimationstart public="1"><t path="js.html.EventListener"/></onanimationstart>
		<onbeforeunload public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for before-unload events on the window.</haxe_doc>
		</onbeforeunload>
		<onblur public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for blur events on the window.</haxe_doc>
		</onblur>
		<oncanplay public="1"><t path="js.html.EventListener"/></oncanplay>
		<oncanplaythrough public="1"><t path="js.html.EventListener"/></oncanplaythrough>
		<onchange public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for change events on the window.</haxe_doc>
		</onchange>
		<onclick public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for click events on the window.</haxe_doc>
		</onclick>
		<oncontextmenu public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for right-click events on the window.</haxe_doc>
		</oncontextmenu>
		<ondblclick public="1"><t path="js.html.EventListener"/></ondblclick>
		<ondevicemotion public="1"><t path="js.html.EventListener"/></ondevicemotion>
		<ondeviceorientation public="1"><t path="js.html.EventListener"/></ondeviceorientation>
		<ondrag public="1"><t path="js.html.EventListener"/></ondrag>
		<ondragend public="1"><t path="js.html.EventListener"/></ondragend>
		<ondragenter public="1"><t path="js.html.EventListener"/></ondragenter>
		<ondragleave public="1"><t path="js.html.EventListener"/></ondragleave>
		<ondragover public="1"><t path="js.html.EventListener"/></ondragover>
		<ondragstart public="1"><t path="js.html.EventListener"/></ondragstart>
		<ondrop public="1"><t path="js.html.EventListener"/></ondrop>
		<ondurationchange public="1"><t path="js.html.EventListener"/></ondurationchange>
		<onemptied public="1"><t path="js.html.EventListener"/></onemptied>
		<onended public="1"><t path="js.html.EventListener"/></onended>
		<onerror public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for errors raised on the window.</haxe_doc>
		</onerror>
		<onfocus public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for focus events on the window.</haxe_doc>
		</onfocus>
		<onhashchange public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for hash change events on the window; called when the part of the URL after the hash mark ("#") changes.</haxe_doc>
		</onhashchange>
		<oninput public="1"><t path="js.html.EventListener"/></oninput>
		<oninvalid public="1"><t path="js.html.EventListener"/></oninvalid>
		<onkeydown public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for keydown events on the window.</haxe_doc>
		</onkeydown>
		<onkeypress public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for keypress events on the window.</haxe_doc>
		</onkeypress>
		<onkeyup public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for keyup events on the window.</haxe_doc>
		</onkeyup>
		<onload public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for window loading.</haxe_doc>
		</onload>
		<onloadeddata public="1"><t path="js.html.EventListener"/></onloadeddata>
		<onloadedmetadata public="1"><t path="js.html.EventListener"/></onloadedmetadata>
		<onloadstart public="1"><t path="js.html.EventListener"/></onloadstart>
		<onmessage public="1"><t path="js.html.EventListener"/></onmessage>
		<onmousedown public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for mousedown events on the window.</haxe_doc>
		</onmousedown>
		<onmousemove public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for mousemove events on the window.</haxe_doc>
		</onmousemove>
		<onmouseout public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for mouseout events on the window.</haxe_doc>
		</onmouseout>
		<onmouseover public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for mouseover events on the window.</haxe_doc>
		</onmouseover>
		<onmouseup public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for mouseup events on the window.</haxe_doc>
		</onmouseup>
		<onmousewheel public="1"><t path="js.html.EventListener"/></onmousewheel>
		<onoffline public="1"><t path="js.html.EventListener"/></onoffline>
		<ononline public="1"><t path="js.html.EventListener"/></ononline>
		<onpagehide public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for pagehide events on the window.</haxe_doc>
		</onpagehide>
		<onpageshow public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for pageshow events on the window.</haxe_doc>
		</onpageshow>
		<onpause public="1"><t path="js.html.EventListener"/></onpause>
		<onplay public="1"><t path="js.html.EventListener"/></onplay>
		<onplaying public="1"><t path="js.html.EventListener"/></onplaying>
		<onpopstate public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for popstate events, which are fired when navigating to a session history entry representing a state object.</haxe_doc>
		</onpopstate>
		<onprogress public="1"><t path="js.html.EventListener"/></onprogress>
		<onratechange public="1"><t path="js.html.EventListener"/></onratechange>
		<onreset public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for reset events on the window.</haxe_doc>
		</onreset>
		<onresize public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for window resizing.</haxe_doc>
		</onresize>
		<onscroll public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for window scrolling.</haxe_doc>
		</onscroll>
		<onsearch public="1"><t path="js.html.EventListener"/></onsearch>
		<onseeked public="1"><t path="js.html.EventListener"/></onseeked>
		<onseeking public="1"><t path="js.html.EventListener"/></onseeking>
		<onselect public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for window selection.</haxe_doc>
		</onselect>
		<onstalled public="1"><t path="js.html.EventListener"/></onstalled>
		<onstorage public="1"><t path="js.html.EventListener"/></onstorage>
		<onsubmit public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for submits on window forms.</haxe_doc>
		</onsubmit>
		<onsuspend public="1"><t path="js.html.EventListener"/></onsuspend>
		<ontimeupdate public="1"><t path="js.html.EventListener"/></ontimeupdate>
		<ontouchcancel public="1"><t path="js.html.EventListener"/></ontouchcancel>
		<ontouchend public="1"><t path="js.html.EventListener"/></ontouchend>
		<ontouchmove public="1"><t path="js.html.EventListener"/></ontouchmove>
		<ontouchstart public="1"><t path="js.html.EventListener"/></ontouchstart>
		<ontransitionend public="1"><t path="js.html.EventListener"/></ontransitionend>
		<onunload public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>An event handler property for unload events on the window.</haxe_doc>
		</onunload>
		<onvolumechange public="1"><t path="js.html.EventListener"/></onvolumechange>
		<onwaiting public="1"><t path="js.html.EventListener"/></onwaiting>
		<opener public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<outerHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<outerWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<pagePopupController public="1" set="null"><c path="js.html.PagePopupController"/></pagePopupController>
		<pageXOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[An alias for <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.scrollX">window.scrollX</a></code>
.]]></haxe_doc>
		</pageXOffset>
		<pageYOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[An alias for <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.scrollY">window.scrollY</a></code>]]></haxe_doc>
		</pageYOffset>
		<parent public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<performance public="1" set="null"><c path="js.html.Performance"/></performance>
		<personalbar public="1" set="null">
			<c path="js.html.BarInfo"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<screenLeft public="1" set="null"><x path="Int"/></screenLeft>
		<screenTop public="1" set="null"><x path="Int"/></screenTop>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<scrollX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<scrollY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<scrollbars public="1" set="null">
			<c path="js.html.BarInfo"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<self public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>A storage object for storing data within a single page session. Getter throws DOMException.</haxe_doc>
		</sessionStorage>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<statusbar public="1" set="null">
			<c path="js.html.BarInfo"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<storageInfo public="1" set="null"><c path="js.html.StorageInfo"/></storageInfo>
		<styleMedia public="1" set="null"><c path="js.html.StyleMedia"/></styleMedia>
		<toolbar public="1" set="null">
			<c path="js.html.BarInfo"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<top public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc><![CDATA[<dd>Returns a reference to the topmost window in the window hierarchy. This property is read only.</dd> <dt><code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.URL">window.URL</a></code>
 
<span title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Requires Gecko 2.0</span>
</dt> <dd>A DOM&nbsp;URL&nbsp;object, which provides the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.URL.createObjectURL">window.URL.createObjectURL()</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.URL.revokeObjectURL">window.URL.revokeObjectURL()</a></code>
 methods.</dd>]]></haxe_doc>
		</top>
		<window public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc><![CDATA[<dd>Returns a reference to the current window.</dd> <dt>window[0], window[1], etc.</dt> <dd>Returns a reference to the <code>window</code> object in the frames. See <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.frames">window.frames</a></code>
 for more details.</dd>]]></haxe_doc>
		</window>
		<alert public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></alert>
		<atob public="1" set="method"><f a="?string">
	<c path="String"/>
	<c path="String"/>
</f></atob>
		<blur public="1" set="method"><f a=""><x path="Void"/></f></blur>
		<btoa public="1" set="method"><f a="?string">
	<c path="String"/>
	<c path="String"/>
</f></btoa>
		<cancelAnimationFrame public="1" set="method">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><cancelAnimationFrame public="1" set="method"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></cancelAnimationFrame></overloads>
		</cancelAnimationFrame>
		<cancelRequestAnimationFrame public="1" set="method"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></cancelRequestAnimationFrame>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<clearInterval public="1" set="method"><f a="handle">
	<x path="Int"/>
	<x path="Void"/>
</f></clearInterval>
		<clearTimeout public="1" set="method"><f a="handle">
	<x path="Int"/>
	<x path="Void"/>
</f></clearTimeout>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<confirm public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Bool"/>
</f></confirm>
		<convertPointFromNodeToPage public="1" set="method"><f a="node:p">
	<c path="js.html.Node"/>
	<c path="js.html.Point"/>
	<c path="js.html.Point"/>
</f></convertPointFromNodeToPage>
		<convertPointFromPageToNode public="1" set="method"><f a="node:p">
	<c path="js.html.Node"/>
	<c path="js.html.Point"/>
	<c path="js.html.Point"/>
</f></convertPointFromPageToNode>
		<find public="1" set="method"><f a="string:caseSensitive:backwards:wrap:wholeWord:searchInFrames:showDialog">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></find>
		<focus public="1" set="method"><f a=""><x path="Void"/></f></focus>
		<getComputedStyle public="1" set="method"><f a="element:?pseudoElement">
	<c path="js.html.Element"/>
	<c path="String"/>
	<c path="js.html.CSSStyleDeclaration"/>
</f></getComputedStyle>
		<getMatchedCSSRules public="1" set="method"><f a="element:?pseudoElement">
	<c path="js.html.Element"/>
	<c path="String"/>
	<c path="js.html.CSSRuleList"/>
</f></getMatchedCSSRules>
		<getSelection public="1" set="method"><f a=""><c path="js.html.DOMSelection"/></f></getSelection>
		<matchMedia public="1" set="method"><f a="query">
	<c path="String"/>
	<c path="js.html.MediaQueryList"/>
</f></matchMedia>
		<moveBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveBy>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<open public="1" set="method"><f a="url:name:?options">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.DOMWindow"/>
</f></open>
		<openDatabase public="1" set="method"><f a="name:version:displayName:estimatedSize:?creationCallback">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<t path="js.html.sql.DatabaseCallback"/>
	<c path="js.html.sql.Database"/>
</f></openDatabase>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:messagePorts">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first, in a secure manner. Throws DOMException.</haxe_doc>
			<overloads><postMessage public="1" set="method">
	<f a="message:targetOrigin">
		<d/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first, in a secure manner. Throws DOMException.</haxe_doc>
</postMessage></overloads>
		</postMessage>
		<print public="1" set="method"><f a=""><x path="Void"/></f></print>
		<prompt public="1" set="method"><f a="message:?defaultValue">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></prompt>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<requestAnimationFrame public="1" set="method">
			<f a="callback_">
				<t path="js.html.RequestAnimationFrameCallback"/>
				<x path="Int"/>
			</f>
			<overloads><requestAnimationFrame public="1" set="method"><f a="callback_">
	<t path="js.html.RequestAnimationFrameCallback"/>
	<x path="Int"/>
</f></requestAnimationFrame></overloads>
		</requestAnimationFrame>
		<requestFileSystem public="1" set="method"><f a="type:size:successCallback:?errorCallback">
	<x path="Int"/>
	<x path="Int"/>
	<t path="js.html.fs.FileSystemCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></requestFileSystem>
		<resizeBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></resizeBy>
		<resizeTo public="1" set="method"><f a="width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></resizeTo>
		<resolveLocalFileSystemURL public="1" set="method"><f a="url:successCallback:?errorCallback">
	<c path="String"/>
	<t path="js.html.fs.EntryCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></resolveLocalFileSystemURL>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<scrollBy public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scrollBy>
		<scrollTo public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scrollTo>
		<setInterval public="1" set="method"><f a="handler:timeout">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Int"/>
</f></setInterval>
		<setTimeout public="1" set="method"><f a="handler:timeout">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Int"/>
</f></setTimeout>
		<showModalDialog public="1" set="method"><f a="url:?dialogArgs:?featureArgs">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<d/>
</f></showModalDialog>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<haxe_doc><![CDATA[<p>This section provides a brief reference for all of the methods, properties, and events available through the DOM <code>window</code> object. The <code>window</code> object implements the <code>Window</code> interface, which in turn inherits from the <code><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView" title="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView" target="_blank">AbstractView</a></code> interface. Some additional global functions, namespaces objects, and constructors, not typically associated with the window, but available on it, are listed in the <a title="https://developer.mozilla.org/en/JavaScript/Reference" rel="internal" href="https://developer.mozilla.org/en/JavaScript/Reference">JavaScript Reference</a>.</p>
<p>The <code>window</code> object represents the window itself. The <code>document</code> property of a <code>window</code> points to the <a title="en/DOM/document" rel="internal" href="/api/js/html/Document">DOM document</a> loaded in that window. A window for a given document can be obtained using the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/document.defaultView">document.defaultView</a></code>
 property.</p>
<p>In a tabbed browser, such as Firefox, each tab contains its own <code>window</code> object (and if you're writing an extension, the browser window itself is a separate window too - see <a title="en/Working_with_windows_in_chrome_code#Content_windows" rel="internal" href="https://developer.mozilla.org/en/Working_with_windows_in_chrome_code#Content_windows">Working with windows in chrome code</a> for more information). That is, the <code>window</code> object is not shared between tabs in the same window. Some methods, namely <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.resizeTo">window.resizeTo</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/window.resizeBy">window.resizeBy</a></code>
 apply to the whole window and not to the specific tab the <code>window</code> object belongs to. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/window">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/usr/lib/haxe/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>A collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[DOM Datalist objects expose the <a class=" external" title="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-button-element.html#the-datalist-element" rel="external" href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-button-element.html#the-datalist-element" target="_blank">HTMLDataListElement</a> interface, which provides special properties (beyond the <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) to manipulate <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/datalist">&lt;datalist&gt;</a></code>
 elements and their content.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLDataListElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItem" params="" file="/usr/lib/haxe/std/js/html/DataTransferItem.hx" extern="1">
		<kind public="1" set="null"><c path="String"/></kind>
		<type public="1" set="null"><c path="String"/></type>
		<getAsEntry public="1" set="method"><f a=""><c path="js.html.fs.Entry"/></f></getAsEntry>
		<getAsFile public="1" set="method"><f a=""><c path="js.html.Blob"/></f></getAsFile>
		<getAsString public="1" set="method"><f a="callback_">
	<t path="js.html.StringCallback"/>
	<x path="Void"/>
</f></getAsString>
		<meta><m n=":native"><e>"DataTransferItem"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItemList" params="" file="/usr/lib/haxe/std/js/html/DataTransferItemList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<add public="1" set="method">
			<f a="data:type">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><add public="1" set="method"><f a="file">
	<c path="js.html.File"/>
	<x path="Void"/>
</f></add></overloads>
		</add>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DataTransferItem"/>
</f></item>
		<meta><m n=":native"><e>"DataTransferItemList"</e></m></meta>
	</class>
	<class path="js.html.DetailsElement" params="" file="/usr/lib/haxe/std/js/html/DetailsElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>This Boolean attribute indicates whether the details will be shown to the user on page load. If omitted the details will be hidden.</haxe_doc>
		</open>
		<haxe_doc><![CDATA[The HTML <em>details</em> element (<code>&lt;details&gt;</code>) is used as a disclosure widget from which the user the retrieve additional information.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/details">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDetailsElement"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/usr/lib/haxe/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn't work in all browsers. <div class="note"><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it has been deprecated: the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/dir">&lt;dir&gt;</a></code>
 element should be styled using <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a>. To give a similar effect than the <span>compact</span> attribute, the <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property <a title="en/CSS/line-height" rel="internal" href="https://developer.mozilla.org/en/CSS/line-height">line-height</a> can be used with a value of <span>80%</span>.</div>]]></haxe_doc>
		</compact>
		<haxe_doc><![CDATA[Obsolete<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/dir">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<class path="js.html.DivElement" params="" file="/usr/lib/haxe/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Enumerated attribute indicating alignment of the element's contents with respect to the surrounding context.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[DOM&nbsp;div (document division) objects expose the <a title="http://www.w3.org/TR/html5/grouping-content.html#htmldivelement" class=" external" rel="external nofollow" href="http://www.w3.org/TR/html5/grouping-content.html#htmldivelement" target="_blank">HTMLDivElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external nofollow" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-22445964" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-22445964" target="_blank"><code>HTMLDivElement</code></a>) interface, which provides special properties (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating div elements. In 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>, this interface inherits from HTMLElement, but defines no additional members.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLDivElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/usr/lib/haxe/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string containing the URL of the current document.</haxe_doc>
		</URL>
		<activeElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the currently focused element</haxe_doc>
		</activeElement>
		<alinkColor public="1">
			<c path="String"/>
			<haxe_doc>Returns or sets the color of active links in the document body.</haxe_doc>
		</alinkColor>
		<all public="1"><c path="js.html.HTMLAllCollection"/></all>
		<anchors public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all of the anchors in the document.</haxe_doc>
		</anchors>
		<applets public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns an ordered list of the applets within a document.</haxe_doc>
		</applets>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the background color of the current document.</haxe_doc>
		</bgColor>
		<body public="1">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the BODY node of the current document. Setter throws DOMException.</haxe_doc>
		</body>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1"><c path="String"/></charset>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in Quirks or Strict mode.</haxe_doc>
		</compatMode>
		<cookie public="1">
			<c path="String"/>
			<haxe_doc>Returns a semicolon-separated list of the cookies for that document or sets a single cookie. Getter throws DOMException. Setter throws DOMException.</haxe_doc>
		</cookie>
		<currentFullScreenElement public="1" set="null"><c path="js.html.Element"/></currentFullScreenElement>
		<defaultCharset public="1" set="null"><c path="String"/></defaultCharset>
		<defaultView public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<designMode public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Gets/sets WYSYWIG editing capability of <a title="en/Midas" rel="internal" href="https://developer.mozilla.org/en/Midas">Midas</a>. It can only be used for HTML documents.]]></haxe_doc>
		</designMode>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document</haxe_doc>
		</dir>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the Element that is a direct child of document. For HTML documents, this is normally the HTML element.</haxe_doc>
		</documentElement>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location.</haxe_doc>
		</documentURI>
		<domain public="1">
			<c path="String"/>
			<haxe_doc>Returns the domain of the current document. Setter throws DOMException.</haxe_doc>
		</domain>
		<embeds public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the embedded OBJECTS within the current document.</haxe_doc>
		</embeds>
		<fgColor public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the foreground color, or text color, of the current document.</haxe_doc>
		</fgColor>
		<forms public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the FORM elements within the current document.</haxe_doc>
		</forms>
		<fullScreenKeyboardInputAllowed public="1" set="null"><x path="Bool"/></fullScreenKeyboardInputAllowed>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<head public="1" set="null">
			<c path="js.html.HeadElement"/>
			<haxe_doc>Returns the HEAD node of the current document.</haxe_doc>
		</head>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Gets/sets the height of the current document.</haxe_doc>
		</height>
		<hidden public="1" set="null"><x path="Bool"/></hidden>
		<images public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the images in the current document.</haxe_doc>
		</images>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the encoding used when the document was parsed.</haxe_doc>
		</inputEncoding>
		<isFullScreen public="1" set="null"><x path="Bool"/></isFullScreen>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<linkColor public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the color of hyperlinks in the document.</haxe_doc>
		</linkColor>
		<links public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all the hyperlinks in the document.</haxe_doc>
		</links>
		<location public="1">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<onabort public="1"><t path="js.html.EventListener"/></onabort>
		<onbeforecopy public="1"><t path="js.html.EventListener"/></onbeforecopy>
		<onbeforecut public="1"><t path="js.html.EventListener"/></onbeforecut>
		<onbeforepaste public="1"><t path="js.html.EventListener"/></onbeforepaste>
		<onblur public="1"><t path="js.html.EventListener"/></onblur>
		<onchange public="1"><t path="js.html.EventListener"/></onchange>
		<onclick public="1"><t path="js.html.EventListener"/></onclick>
		<oncontextmenu public="1"><t path="js.html.EventListener"/></oncontextmenu>
		<oncopy public="1"><t path="js.html.EventListener"/></oncopy>
		<oncut public="1"><t path="js.html.EventListener"/></oncut>
		<ondblclick public="1"><t path="js.html.EventListener"/></ondblclick>
		<ondrag public="1"><t path="js.html.EventListener"/></ondrag>
		<ondragend public="1"><t path="js.html.EventListener"/></ondragend>
		<ondragenter public="1"><t path="js.html.EventListener"/></ondragenter>
		<ondragleave public="1"><t path="js.html.EventListener"/></ondragleave>
		<ondragover public="1"><t path="js.html.EventListener"/></ondragover>
		<ondragstart public="1"><t path="js.html.EventListener"/></ondragstart>
		<ondrop public="1"><t path="js.html.EventListener"/></ondrop>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<onfocus public="1"><t path="js.html.EventListener"/></onfocus>
		<onfullscreenchange public="1"><t path="js.html.EventListener"/></onfullscreenchange>
		<onfullscreenerror public="1"><t path="js.html.EventListener"/></onfullscreenerror>
		<oninput public="1"><t path="js.html.EventListener"/></oninput>
		<oninvalid public="1"><t path="js.html.EventListener"/></oninvalid>
		<onkeydown public="1"><t path="js.html.EventListener"/></onkeydown>
		<onkeypress public="1"><t path="js.html.EventListener"/></onkeypress>
		<onkeyup public="1"><t path="js.html.EventListener"/></onkeyup>
		<onload public="1"><t path="js.html.EventListener"/></onload>
		<onmousedown public="1"><t path="js.html.EventListener"/></onmousedown>
		<onmousemove public="1"><t path="js.html.EventListener"/></onmousemove>
		<onmouseout public="1"><t path="js.html.EventListener"/></onmouseout>
		<onmouseover public="1"><t path="js.html.EventListener"/></onmouseover>
		<onmouseup public="1"><t path="js.html.EventListener"/></onmouseup>
		<onmousewheel public="1"><t path="js.html.EventListener"/></onmousewheel>
		<onpaste public="1"><t path="js.html.EventListener"/></onpaste>
		<onpointerlockchange public="1"><t path="js.html.EventListener"/></onpointerlockchange>
		<onpointerlockerror public="1"><t path="js.html.EventListener"/></onpointerlockerror>
		<onreadystatechange public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[<dl><dd>Returns the event handling code for the <code>readystatechange</code> event.</dd>
</dl>
<div class="geckoVersionNote"> <p>
</p><div class="geckoVersionHeading">Gecko 9.0 note<div>(Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
</div></div>
<p></p> <p>Starting in Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
, you can now use the syntax <code>if ("onabort" in document)</code> to determine whether or not a given event handler property exists. This is because event handler interfaces have been updated to be proper web IDL interfaces. See <a title="en/DOM/DOM event handlers" rel="internal" href="https://developer.mozilla.org/en/DOM/DOM_event_handlers">DOM event handlers</a> for details.</p>
</div>]]></haxe_doc>
		</onreadystatechange>
		<onreset public="1"><t path="js.html.EventListener"/></onreset>
		<onscroll public="1"><t path="js.html.EventListener"/></onscroll>
		<onsearch public="1"><t path="js.html.EventListener"/></onsearch>
		<onselect public="1"><t path="js.html.EventListener"/></onselect>
		<onselectionchange public="1"><t path="js.html.EventListener"/></onselectionchange>
		<onselectstart public="1"><t path="js.html.EventListener"/></onselectstart>
		<onsubmit public="1"><t path="js.html.EventListener"/></onsubmit>
		<ontouchcancel public="1"><t path="js.html.EventListener"/></ontouchcancel>
		<ontouchend public="1"><t path="js.html.EventListener"/></ontouchend>
		<ontouchmove public="1"><t path="js.html.EventListener"/></ontouchmove>
		<ontouchstart public="1"><t path="js.html.EventListener"/></ontouchstart>
		<plugins public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the available plugins.</haxe_doc>
		</plugins>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<preferredStylesheetSet public="1" set="null"><c path="String"/></preferredStylesheetSet>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document</haxe_doc>
		</readyState>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<scripts public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc><![CDATA[Returns all the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/script">&lt;script&gt;</a></code>
 elements on the document.]]></haxe_doc>
		</scripts>
		<selectedStylesheetSet public="1"><c path="String"/></selectedStylesheetSet>
		<styleSheets public="1" set="null">
			<c path="js.html.StyleSheetList"/>
			<haxe_doc>Returns a list of the stylesheet objects on the current document.</haxe_doc>
		</styleSheets>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Returns the title of the current document.</haxe_doc>
		</title>
		<visibilityState public="1" set="null"><c path="String"/></visibilityState>
		<vlinkColor public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the color of visited hyperlinks.</haxe_doc>
		</vlinkColor>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the width of the current document.</haxe_doc>
		</width>
		<xmlEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[Returns the encoding as determined by the XML declaration.<br> <div class="note">Firefox 10 and later don't implement it anymore.</div>]]></haxe_doc>
		</xmlEncoding>
		<xmlStandalone public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Returns <code>true</code> if the XML declaration specifies the document is standalone (<em>e.g.,</em> An external part of the DTD affects the document's content), else <code>false</code>. Setter throws DOMException.]]></haxe_doc>
		</xmlStandalone>
		<xmlVersion public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Returns the version number as specified in the XML declaration or <code>"1.0"</code> if the declaration is absent. Setter throws DOMException.]]></haxe_doc>
		</xmlVersion>
		<adoptNode public="1" set="method"><f a="source">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></adoptNode>
		<cancelFullScreen public="1" set="method"><f a=""><x path="Void"/></f></cancelFullScreen>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<caretRangeFromPoint public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Range"/>
</f></caretRangeFromPoint>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<createAttribute public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Attr"/>
</f></createAttribute>
		<createAttributeNS public="1" set="method"><f a="?namespaceURI:?qualifiedName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Attr"/>
</f></createAttributeNS>
		<createCDATASection public="1" set="method"><f a="data">
	<c path="String"/>
	<c path="js.html.CDATASection"/>
</f></createCDATASection>
		<createComment public="1" set="method"><f a="data">
	<c path="String"/>
	<c path="js.html.Comment"/>
</f></createComment>
		<createDocumentFragment public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></createDocumentFragment>
		<createElement public="1" set="method"><f a="?tagName">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></createElement>
		<createElementNS public="1" set="method"><f a="?namespaceURI:?qualifiedName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Element"/>
</f></createElementNS>
		<createEntityReference public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.EntityReference"/>
</f></createEntityReference>
		<createEvent public="1" set="method"><f a="eventType">
	<c path="String"/>
	<c path="js.html.Event"/>
</f></createEvent>
		<createExpression public="1" set="method"><f a="expression:resolver">
	<c path="String"/>
	<c path="js.html.XPathNSResolver"/>
	<c path="js.html.XPathExpression"/>
</f></createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.XPathNSResolver"/>
</f></createNSResolver>
		<createNodeIterator public="1" set="method"><f a="root:whatToShow:filter:expandEntityReferences">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<c path="js.html.NodeFilter"/>
	<x path="Bool"/>
	<c path="js.html.NodeIterator"/>
</f></createNodeIterator>
		<createProcessingInstruction public="1" set="method"><f a="target:data">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.ProcessingInstruction"/>
</f></createProcessingInstruction>
		<createRange public="1" set="method"><f a=""><c path="js.html.Range"/></f></createRange>
		<createTextNode public="1" set="method"><f a="data">
	<c path="String"/>
	<c path="js.html.Text"/>
</f></createTextNode>
		<createTouch public="1" set="method"><f a="window:target:identifier:pageX:pageY:screenX:screenY:radiusX:radiusY:rotationAngle:force">
	<c path="js.html.DOMWindow"/>
	<c path="js.html.EventTarget"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Touch"/>
</f></createTouch>
		<createTouchList public="1" set="method"><f a=""><c path="js.html.TouchList"/></f></createTouchList>
		<createTreeWalker public="1" set="method"><f a="root:whatToShow:filter:expandEntityReferences">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<c path="js.html.NodeFilter"/>
	<x path="Bool"/>
	<c path="js.html.TreeWalker"/>
</f></createTreeWalker>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<evaluate public="1" set="method"><f a="expression:contextNode:resolver:type:inResult">
	<c path="String"/>
	<c path="js.html.Node"/>
	<c path="js.html.XPathNSResolver"/>
	<x path="Int"/>
	<c path="js.html.XPathResult"/>
	<c path="js.html.XPathResult"/>
</f></evaluate>
		<execCommand public="1" set="method"><f a="command:userInterface:?value">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Bool"/>
</f></execCommand>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<exitPointerLock public="1" set="method"><f a=""><x path="Void"/></f></exitPointerLock>
		<getCSSCanvasContext public="1" set="method"><f a="contextId:name:width:height">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.CanvasRenderingContext"/>
</f></getCSSCanvasContext>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getElementsByClassName public="1" set="method"><f a="tagname">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByClassName>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<getElementsByTagName public="1" set="method"><f a="tagname">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByTagNameNS>
		<getOverrideStyle public="1" set="method"><f a="element:pseudoElement">
	<c path="js.html.Element"/>
	<c path="String"/>
	<c path="js.html.CSSStyleDeclaration"/>
</f></getOverrideStyle>
		<getSelection public="1" set="method"><f a=""><c path="js.html.DOMSelection"/></f></getSelection>
		<hasFocus public="1" set="method"><f a=""><x path="Bool"/></f></hasFocus>
		<importNode public="1" set="method"><f a="importedNode:?deep">
	<c path="js.html.Node"/>
	<x path="Bool"/>
	<c path="js.html.Node"/>
</f></importNode>
		<open public="1" set="method"><f a=""><x path="Void"/></f></open>
		<queryCommandEnabled public="1" set="method"><f a="command">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method"><f a="command">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandIndeterm>
		<queryCommandState public="1" set="method"><f a="command">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="command">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method"><f a="command">
	<c path="String"/>
	<c path="String"/>
</f></queryCommandValue>
		<querySelector public="1" set="method"><f a="selectors">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></querySelector>
		<querySelectorAll public="1" set="method"><f a="selectors">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></querySelectorAll>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<write public="1" set="method"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<writeln public="1" set="method"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></writeln>
		<createTableCellElement public="1" get="inline" set="null" line="398">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("td")</code>.]]></haxe_doc>
		</createTableCellElement>
		<createHRElement public="1" get="inline" set="null" line="400">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("hr")</code>.]]></haxe_doc>
		</createHRElement>
		<createMarqueeElement public="1" get="inline" set="null" line="402">
			<f a=""><c path="js.html.MarqueeElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("marquee")</code>.]]></haxe_doc>
		</createMarqueeElement>
		<createBaseFontElement public="1" get="inline" set="null" line="404">
			<f a=""><c path="js.html.BaseFontElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("basefont")</code>.]]></haxe_doc>
		</createBaseFontElement>
		<createSelectElement public="1" get="inline" set="null" line="406">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("select")</code>.]]></haxe_doc>
		</createSelectElement>
		<createMapElement public="1" get="inline" set="null" line="408">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("map")</code>.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="410">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("form")</code>.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="412">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("option")</code>.]]></haxe_doc>
		</createOptionElement>
		<createLabelElement public="1" get="inline" set="null" line="414">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("label")</code>.]]></haxe_doc>
		</createLabelElement>
		<createMetaElement public="1" get="inline" set="null" line="416">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("meta")</code>.]]></haxe_doc>
		</createMetaElement>
		<createImageElement public="1" get="inline" set="null" line="418">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("img")</code>.]]></haxe_doc>
		</createImageElement>
		<createDListElement public="1" get="inline" set="null" line="420">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("dl")</code>.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="422">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("frame")</code>.]]></haxe_doc>
		</createFrameElement>
		<createModElement public="1" get="inline" set="null" line="424">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("mod")</code>.]]></haxe_doc>
		</createModElement>
		<createUListElement public="1" get="inline" set="null" line="426">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("ul")</code>.]]></haxe_doc>
		</createUListElement>
		<createOutputElement public="1" get="inline" set="null" line="428">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("output")</code>.]]></haxe_doc>
		</createOutputElement>
		<createOListElement public="1" get="inline" set="null" line="430">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("ol")</code>.]]></haxe_doc>
		</createOListElement>
		<createShadowElement public="1" get="inline" set="null" line="432">
			<f a=""><c path="js.html.ShadowElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("shadow")</code>.]]></haxe_doc>
		</createShadowElement>
		<createLIElement public="1" get="inline" set="null" line="434">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("li")</code>.]]></haxe_doc>
		</createLIElement>
		<createDataListElement public="1" get="inline" set="null" line="436">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("datalist")</code>.]]></haxe_doc>
		</createDataListElement>
		<createParamElement public="1" get="inline" set="null" line="438">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("param")</code>.]]></haxe_doc>
		</createParamElement>
		<createFontElement public="1" get="inline" set="null" line="440">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("font")</code>.]]></haxe_doc>
		</createFontElement>
		<createTrackElement public="1" get="inline" set="null" line="442">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("track")</code>.]]></haxe_doc>
		</createTrackElement>
		<createAppletElement public="1" get="inline" set="null" line="444">
			<f a=""><c path="js.html.AppletElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("applet")</code>.]]></haxe_doc>
		</createAppletElement>
		<createAreaElement public="1" get="inline" set="null" line="446">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("area")</code>.]]></haxe_doc>
		</createAreaElement>
		<createLinkElement public="1" get="inline" set="null" line="448">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("link")</code>.]]></haxe_doc>
		</createLinkElement>
		<createDivElement public="1" get="inline" set="null" line="450">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("div")</code>.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="452">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("title")</code>.]]></haxe_doc>
		</createTitleElement>
		<createStyleElement public="1" get="inline" set="null" line="454">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("style")</code>.]]></haxe_doc>
		</createStyleElement>
		<createProgressElement public="1" get="inline" set="null" line="456">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("progress")</code>.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="458">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("button")</code>.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="460">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("fieldset")</code>.]]></haxe_doc>
		</createFieldSetElement>
		<createAnchorElement public="1" get="inline" set="null" line="462">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("a")</code>.]]></haxe_doc>
		</createAnchorElement>
		<createIFrameElement public="1" get="inline" set="null" line="464">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("iframe")</code>.]]></haxe_doc>
		</createIFrameElement>
		<createSpanElement public="1" get="inline" set="null" line="466">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("span")</code>.]]></haxe_doc>
		</createSpanElement>
		<createDetailsElement public="1" get="inline" set="null" line="468">
			<f a=""><c path="js.html.DetailsElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("details")</code>.]]></haxe_doc>
		</createDetailsElement>
		<createBodyElement public="1" get="inline" set="null" line="470">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("body")</code>.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="472">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("input")</code>.]]></haxe_doc>
		</createInputElement>
		<createEmbedElement public="1" get="inline" set="null" line="474">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("embed")</code>.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="476">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("meter")</code>.]]></haxe_doc>
		</createMeterElement>
		<createPreElement public="1" get="inline" set="null" line="478">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("pre")</code>.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="480">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("thead")</code>.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="482">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("head")</code>.]]></haxe_doc>
		</createHeadElement>
		<createBaseElement public="1" get="inline" set="null" line="484">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("base")</code>.]]></haxe_doc>
		</createBaseElement>
		<createOptGroupElement public="1" get="inline" set="null" line="486">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("optgroup")</code>.]]></haxe_doc>
		</createOptGroupElement>
		<createQuoteElement public="1" get="inline" set="null" line="488">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("quote")</code>.]]></haxe_doc>
		</createQuoteElement>
		<createAudioElement public="1" get="inline" set="null" line="490">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("audio")</code>.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="492">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("video")</code>.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="494">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("legend")</code>.]]></haxe_doc>
		</createLegendElement>
		<createMenuElement public="1" get="inline" set="null" line="496">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("menu")</code>.]]></haxe_doc>
		</createMenuElement>
		<createFrameSetElement public="1" get="inline" set="null" line="498">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("frameset")</code>.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="500">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("canvas")</code>.]]></haxe_doc>
		</createCanvasElement>
		<createKeygenElement public="1" get="inline" set="null" line="502">
			<f a=""><c path="js.html.KeygenElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("keygen")</code>.]]></haxe_doc>
		</createKeygenElement>
		<createTableColElement public="1" get="inline" set="null" line="504">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("col")</code>.]]></haxe_doc>
		</createTableColElement>
		<createDirectoryElement public="1" get="inline" set="null" line="506">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("dir")</code>.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="508">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("table")</code>.]]></haxe_doc>
		</createTableElement>
		<createTableRowElement public="1" get="inline" set="null" line="510">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("tr")</code>.]]></haxe_doc>
		</createTableRowElement>
		<createScriptElement public="1" get="inline" set="null" line="512">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("script")</code>.]]></haxe_doc>
		</createScriptElement>
		<createSourceElement public="1" get="inline" set="null" line="514">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("source")</code>.]]></haxe_doc>
		</createSourceElement>
		<createParagraphElement public="1" get="inline" set="null" line="516">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("p")</code>.]]></haxe_doc>
		</createParagraphElement>
		<createContentElement public="1" get="inline" set="null" line="518">
			<f a=""><c path="js.html.ContentElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("content")</code>.]]></haxe_doc>
		</createContentElement>
		<createBRElement public="1" get="inline" set="null" line="520">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("br")</code>.]]></haxe_doc>
		</createBRElement>
		<createHtmlElement public="1" get="inline" set="null" line="522">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("html")</code>.]]></haxe_doc>
		</createHtmlElement>
		<createTextAreaElement public="1" get="inline" set="null" line="524">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("textarea")</code>.]]></haxe_doc>
		</createTextAreaElement>
		<createMediaElement public="1" get="inline" set="null" line="526">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("media")</code>.]]></haxe_doc>
		</createMediaElement>
		<createObjectElement public="1" get="inline" set="null" line="528">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("object")</code>.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="530">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[A typed shortcut for <code>createElement("caption")</code>.]]></haxe_doc>
		</createTableCaptionElement>
		<haxe_doc><![CDATA[<p>Each web page loaded in the browser has its own <strong>document</strong> object. This object serves as an entry point to the web page's content (the <a title="en/Using_the_W3C_DOM_Level_1_Core" rel="internal" href="https://developer.mozilla.org/en/Using_the_W3C_DOM_Level_1_Core">DOM tree</a>, including elements such as <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/body">&lt;body&gt;</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/table">&lt;table&gt;</a></code>
) and provides functionality global to the document (such as obtaining the page's URL and creating new elements in the document).</p>
<p>A document object can be obtained from various APIs:</p>
<ul> <li>Most commonly, you work with the document the script is running in by using <code>document</code> in document's <a title="en/HTML/Element/Script" rel="internal" href="/api/js/html/ScriptElement">scripts</a>. (The same document can also be referred to as <a title="window.document" rel="internal" href="https://developer.mozilla.org/en/DOM/window.document"><code>window.document</code></a>.)</li> <li>The document of an iframe via the iframe's <code><a title="en/DOM/HTMLIFrameElement#Properties" rel="internal" href="https://developer.mozilla.org/en/DOM/HTMLIFrameElement#Properties">contentDocument</a></code> property.</li> <li>The <a title="en/XMLHttpRequest#Attributes" rel="internal" href="https://developer.mozilla.org/en/nsIXMLHttpRequest#Attributes"><code>responseXML</code> of an <code>XMLHttpRequest</code> object</a>.</li> <li>The document, that given node or element belongs to, can be retrieved using the node's <code><a title="en/DOM/Node.ownerDocument" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.ownerDocument">ownerDocument</a></code> property.</li> <li>...and more.</li>
</ul>
<p>Depending on the kind of the document (e.g. <a title="en/HTML" rel="internal" href="https://developer.mozilla.org/en/HTML">HTML</a> or <a title="en/XML" rel="internal" href="https://developer.mozilla.org/en/XML">XML</a>) different APIs may be available on the document object. This theoretical availability of APIs is usually described in terms of <em>implementing interfaces</em> defined in the relevant W3C DOM specifications:</p>
<ul> <li>All document objects implement the DOM Core <a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document" title="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document" target="_blank"><code>Document</code></a> and <code><a title="en/DOM/Node" rel="internal" href="/api/js/html/Node">Node</a></code> interfaces, meaning that the "core" properties and methods are available for all kinds of documents.</li> <li>In addition to the generalized DOM Core document interface, HTML documents also implement the <code><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268" target="_blank">HTMLDocument</a></code> interface, which is a more specialized interface for dealing with HTML documents (e.g., <a title="en/DOM/document.cookie" rel="internal" href="https://developer.mozilla.org/en/DOM/document.cookie">document.cookie</a>, <a title="en/DOM/document.alinkColor" rel="internal" href="https://developer.mozilla.org/en/DOM/document.alinkColor">document.alinkColor</a>).</li> <li><a title="en/XUL" rel="internal" href="https://developer.mozilla.org/en/XUL">XUL</a> documents (available to Mozilla add-on and application developers) implement their own additions to the core Document functionality.</li>
</ul>
<p>Methods or properties listed here that are part of a more specialized interface have an asterisk (*) next to them and have additional information in the&nbsp; Availability column.</p>
<p>Note that some APIs listed below are not available in all browsers for various reasons:</p>
<ul> <li><strong>Obsolete</strong>: on its way of being removed from supporting browsers.</li> <li><strong>Non-standard</strong>: either an experimental feature not (yet?) agreed upon by all vendors, or a feature targeted specifically at the code running in a specific browser (e.g. Mozilla has a few DOM APIs created for its add-ons and application development).</li> <li>Part of a completed or an emerging standard, but not (yet?) implemented in all browsers or implemented in the newest versions of the browsers.</li>
</ul>
<p>Detailed browser compatibility tables are located at the pages describing each property or method.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/document">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/usr/lib/haxe/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<querySelector public="1" set="method"><f a="selectors">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></querySelector>
		<querySelectorAll public="1" set="method"><f a="selectors">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></querySelectorAll>
		<haxe_doc><![CDATA[<p>DocumentFragment has no properties or methods of its own, but inherits from <a title="En/DOM/Node" class="internal" rel="internal" href="https://developer.mozilla.org/En/DOM/Node"><code>Node</code></a>. </p>
<p>A <code><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-B63ED1A3" title="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-B63ED1A3" target="_blank">DocumentFragment</a></code> is a minimal document object that has no parent. It is used as a light-weight version of document to store well-formed or potentially non-well-formed fragments of XML.</p>
<p>See <a title="En/DOM/Node" class="internal" rel="internal" href="https://developer.mozilla.org/En/DOM/Node"><code>Node</code></a> for a listing of its properties, constants and methods.</p>
<p>Various other methods can take a document fragment as an argument (e.g., any <code><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247" title="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247" target="_blank">Node</a></code> interface methods such as <code><a title="En/DOM/Node.appendChild" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.appendChild">appendChild</a></code> and <code><a title="En/DOM/Node.insertBefore" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.insertBefore">insertBefore</a></code>), in which case the children of the fragment are appended or inserted, not the fragment itself.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/DocumentFragment">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentType" params="" file="/usr/lib/haxe/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<entities public="1" set="null"><c path="js.html.NamedNodeMap"/></entities>
		<internalSubset public="1" set="null"><c path="String"/></internalSubset>
		<name public="1" set="null"><c path="String"/></name>
		<notations public="1" set="null"><c path="js.html.NamedNodeMap"/></notations>
		<publicId public="1" set="null"><c path="String"/></publicId>
		<systemId public="1" set="null"><c path="String"/></systemId>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[<p><span>NOTE:&nbsp;This interface is not fully supported in Mozilla at present, including for indicating internalSubset information which Gecko generally does otherwise support.</span></p>
<p><code>DocumentType</code> inherits <a title="en/DOM/Node" rel="internal" href="/api/js/html/Node">Node</a>'s properties, methods, and constants as well as the following properties of its own:</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/DocumentType">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<class path="js.html.EmbedElement" params="" file="/usr/lib/haxe/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<height public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/embed#attr-height">height</a></code>
 HTML&nbsp;attribute, containing the displayed height of the resource.]]></haxe_doc>
		</height>
		<name public="1"><c path="String"/></name>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/embed#attr-src">src</a></code>
 HTML&nbsp;attribute, containing the address of the resource.]]></haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/embed#attr-type">type</a></code>
 HTML&nbsp;attribute, containing the type of the resource.]]></haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/embed#attr-width">width</a></code>
 HTML&nbsp;attribute, containing the displayed width of the resource.]]></haxe_doc>
		</width>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.svg.Document"/></f></getSVGDocument>
		<haxe_doc><![CDATA[<strong>Note:</strong>&nbsp;This topic describes the HTMLEmbedElement interface as defined in the HTML5 standard. It does not address earlier, non-standardized version of the interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLEmbedElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<class path="js.html.EntityReference" params="" file="/usr/lib/haxe/std/js/html/EntityReference.hx" extern="1">
		<extends path="js.html.Node"/>
		<haxe_doc><![CDATA[<p><span>NOTE:&nbsp;This is not implemented in Mozilla</span></p>
<p>Read-only reference to an entity reference in the DOM tree. Has no properties or methods of its own but inherits from <a class="internal" title="En/DOM/Node" rel="internal" href="/api/js/html/Node"><code>Node</code></a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/EntityReference">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"EntityReference"</e></m></meta>
	</class>
	<class path="js.html.Event" params="" file="/usr/lib/haxe/std/js/html/Event.hx" extern="1">
		<AT_TARGET public="1" get="inline" set="null" line="32" static="1"><x path="Int"/></AT_TARGET>
		<BLUR public="1" get="inline" set="null" line="34" static="1"><x path="Int"/></BLUR>
		<BUBBLING_PHASE public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></BUBBLING_PHASE>
		<CAPTURING_PHASE public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></CAPTURING_PHASE>
		<CHANGE public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></CHANGE>
		<CLICK public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></CLICK>
		<DBLCLICK public="1" get="inline" set="null" line="44" static="1"><x path="Int"/></DBLCLICK>
		<DRAGDROP public="1" get="inline" set="null" line="46" static="1"><x path="Int"/></DRAGDROP>
		<FOCUS public="1" get="inline" set="null" line="48" static="1"><x path="Int"/></FOCUS>
		<KEYDOWN public="1" get="inline" set="null" line="50" static="1"><x path="Int"/></KEYDOWN>
		<KEYPRESS public="1" get="inline" set="null" line="52" static="1"><x path="Int"/></KEYPRESS>
		<KEYUP public="1" get="inline" set="null" line="54" static="1"><x path="Int"/></KEYUP>
		<MOUSEDOWN public="1" get="inline" set="null" line="56" static="1"><x path="Int"/></MOUSEDOWN>
		<MOUSEDRAG public="1" get="inline" set="null" line="58" static="1"><x path="Int"/></MOUSEDRAG>
		<MOUSEMOVE public="1" get="inline" set="null" line="60" static="1"><x path="Int"/></MOUSEMOVE>
		<MOUSEOUT public="1" get="inline" set="null" line="62" static="1"><x path="Int"/></MOUSEOUT>
		<MOUSEOVER public="1" get="inline" set="null" line="64" static="1"><x path="Int"/></MOUSEOVER>
		<MOUSEUP public="1" get="inline" set="null" line="66" static="1"><x path="Int"/></MOUSEUP>
		<NONE public="1" get="inline" set="null" line="68" static="1"><x path="Int"/></NONE>
		<SELECT public="1" get="inline" set="null" line="70" static="1"><x path="Int"/></SELECT>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the bubbling of the event has been canceled or not.</haxe_doc>
		</cancelBubble>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<clipboardData public="1" set="null"><c path="js.html.Clipboard"/></clipboardData>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event.</haxe_doc>
		</currentTarget>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Indicates whether or not <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/event.preventDefault">event.preventDefault()</a></code>
 has been called on the event.]]></haxe_doc>
		</defaultPrevented>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<returnValue public="1"><x path="Bool"/></returnValue>
		<srcElement public="1" set="null"><c path="js.html.EventTarget"/></srcElement>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<timeStamp public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The time that the event was created.</haxe_doc>
		</timeStamp>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<initEvent public="1" set="method"><f a="eventTypeArg:canBubbleArg:cancelableArg">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></initEvent>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<new public="1" set="method"><f a="type:?canBubble:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[<p>This chapter describes the DOM Event Model. The <a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event" title="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event" target="_blank">Event</a> interface itself is described, as well as the interfaces for event registration on nodes in the DOM, and <a title="en/DOM/element.addEventListener" rel="internal" href="https://developer.mozilla.org/en/DOM/element.addEventListener">event listeners</a>, and several longer examples that show how the various event interfaces relate to one another.</p>
<p>There is an excellent diagram that clearly explains the three phases of event flow through the DOM in the <a class="external" title="http://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture" rel="external" href="http://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture" target="_blank">DOM Level 3 Events draft</a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/event">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<typedef path="js.html.EventListener" params="" file="/usr/lib/haxe/std/js/html/EventListener.hx"><f a="">
	<d/>
	<x path="Void"/>
</f></typedef>
	<class path="js.html.FieldSetElement" params="" file="/usr/lib/haxe/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/fieldset#attr-disabled">disabled</a></code>
 HTML&nbsp;attribute, indicating whether the user can interact with the control.]]></haxe_doc>
		</disabled>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>The elements belonging to this field set.</haxe_doc>
		</elements>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[The containing form element, if this element is in a form. Otherwise, the element the <a title="en/HTML/Element/fieldset#attr-name" rel="internal" href="https://developer.mozilla.org/en/HTML/Element/fieldset#attr-name">name content attribute</a> points to 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>. (<code>null</code> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span>.)]]></haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/fieldset#attr-name">name</a></code>
 HTML&nbsp;attribute, containing the name of the field set, used for submitting the form.]]></haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[Must be the string <code>fieldset</code>.]]></haxe_doc>
		</type>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element&nbsp; is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>The validity states that this element is in.</haxe_doc>
		</validity>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Always false because <code>fieldset</code> objects are never candidates for constraint validation.]]></haxe_doc>
		</willValidate>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[DOM&nbsp;<code>fieldset</code> elements expose the <a class=" external" title="http://dev.w3.org/html5/spec/forms.html#htmlfieldsetelement" rel="external" href="http://dev.w3.org/html5/spec/forms.html#htmlfieldsetelement" target="_blank">HTMLFieldSetElement</a>&nbsp; (
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-7365882" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-7365882" target="_blank">HTMLFieldSetElement</a>) interface, which provides special properties and methods (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of field-set elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLFieldSetElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/usr/lib/haxe/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<lastModifiedDate public="1" set="null"><c path="Date"/></lastModifiedDate>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The name of the file referenced by the <code>File</code> object. <strong>Read only.</strong> 
<span title="(Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0)
">Requires Gecko 1.9.2</span>]]></haxe_doc>
		</name>
		<relativePath public="1" set="null"><c path="String"/></relativePath>
		<haxe_doc><![CDATA[<p>The <code>File</code> object provides information about -- and access to the contents of -- files. These are generally retrieved from a <code><a rel="custom" href="/api/js/html/FileList">FileList</a></code>
 object returned as a result of a user selecting files using the <code>input</code> element, or from a drag and drop operation's <a title="En/DragDrop/DataTransfer" rel="internal" href="https://developer.mozilla.org/En/DragDrop/DataTransfer"><code>DataTransfer</code></a> object.</p>
<div class="geckoVersionNote">
<p>
</p><div class="geckoVersionHeading">Gecko 2.0 note<div>(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
</div></div>
<p></p>
<p>Starting in Gecko 2.0&nbsp;(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
, the File object inherits from the <code><a rel="custom" href="/api/js/html/Blob">Blob</a></code>
&nbsp;interface, which provides methods and properties providing further information about the file.</p>
</div>
<p>The file reference can be saved when the form is submitted while the user is offline, so that the data can be retrieved and uploaded when the Internet connection is restored.</p>
<div class="note"><strong>Note:</strong> The <code>File</code> object as implemented by Gecko offers several non-standard methods for reading the contents of the file. These should <em>not</em> be used, as they will prevent your web application from being used in other browsers, as well as in future versions of Gecko, which will likely remove these methods.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/File">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<class path="js.html.FileList" params="" file="/usr/lib/haxe/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A read-only value indicating the number of files in the list.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[<p>An object of this type is returned by the <code>files</code> property of the HTML&nbsp;input element; this lets you access the list of files selected with the <code>&lt;input type="file"&gt;</code> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the <a title="En/DragDrop/DataTransfer" rel="internal" href="https://developer.mozilla.org/En/DragDrop/DataTransfer"><code>DataTransfer</code></a> object for details on this usage.</p>
<p>

</p><div><p>Gecko 1.9.2 note</p><p>Prior to Gecko 1.9.2, the input element only supported a single file being selected at a time, meaning that the FileList would contain only one file. Starting with Gecko 1.9.2, if the input element's multiple attribute is true, the FileList may contain multiple files.</p></div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/FileList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<class path="js.html.Float32Array" params="" file="/usr/lib/haxe/std/js/html/Float32Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of each array element.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of entries in the array. <strong>Read only.</strong>]]></haxe_doc>
		</length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.html.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
				</set>
			</overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Float32Array <a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array()">Float32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Float32Array</code> object.</p>
<pre>Float32Array Float32Array(
&nbsp; unsigned long length
);

Float32Array Float32Array(
&nbsp; <em>TypedArray</em> array
);

Float32Array Float32Array(
&nbsp; sequence&lt;type&gt; array
);

Float32Array Float32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <span>Uint8</span><code>Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Float32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Float32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Float32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Float32Array <a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array()">Float32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Float32Array</code> object.</p>
<pre>Float32Array Float32Array(
&nbsp; unsigned long length
);

Float32Array Float32Array(
&nbsp; <em>TypedArray</em> array
);

Float32Array Float32Array(
&nbsp; sequence&lt;type&gt; array
);

Float32Array Float32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <span>Uint8</span><code>Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Float32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Float32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Float32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Float"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Float32Array <a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array()">Float32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Float32Array</code> object.</p>
<pre>Float32Array Float32Array(
&nbsp; unsigned long length
);

Float32Array Float32Array(
&nbsp; <em>TypedArray</em> array
);

Float32Array Float32Array(
&nbsp; sequence&lt;type&gt; array
);

Float32Array Float32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <span>Uint8</span><code>Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Float32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Float32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Float32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Float32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Float32Array <a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array()">Float32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Float32Array </code><code><a title="en/JavaScript typed arrays/Float32Array#Float32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array#Float32Array%28%29">Float32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Float32Array</code> object.</p>
<pre>Float32Array Float32Array(
&nbsp; unsigned long length
);

Float32Array Float32Array(
&nbsp; <em>TypedArray</em> array
);

Float32Array Float32Array(
&nbsp; sequence&lt;type&gt; array
);

Float32Array Float32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <span>Uint8</span><code>Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Float32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Float32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Float32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[<p>The <code>Float32Array</code> type represents an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type).</p>
<p>Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Float32Array">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.html.FontElement" params="" file="/usr/lib/haxe/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>This attribute sets the text color using either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>This attribute contains a comma-sperated list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.</haxe_doc>
		</face>
		<size public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute specifies the font size as either a numeric or relative value. Numeric values range from <span>1</span> to <span>7</span> with <span>1</span> being the smallest and <span>3</span> the default. It can be defined using a relative value, like <span>+2</span> or <span>-3</span>, which set it relative to the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/basefont#attr-size">size</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/basefont">&lt;basefont&gt;</a></code>
 element, or relative to <span>3</span>, the default value, if none does exist.]]></haxe_doc>
		</size>
		<haxe_doc><![CDATA[Obsolete<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/font">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FormElement" params="" file="/usr/lib/haxe/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-accept-charset">accept-charset</a></code>
&nbsp;HTML&nbsp;attribute, containing a list of character encodings that the server accepts.]]></haxe_doc>
		</acceptCharset>
		<action public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-action">action</a></code>
&nbsp;HTML&nbsp;attribute, containing the URI&nbsp;of a program that processes the information submitted by the form.]]></haxe_doc>
		</action>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-autocomplete">autocomplete</a></code>
 HTML&nbsp;attribute, containing a string that indicates whether the controls in this form can have their values automatically populated by the browser.]]></haxe_doc>
		</autocomplete>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>All the form controls belonging to this form element.</haxe_doc>
		</elements>
		<encoding public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Synonym for <strong>enctype</strong>.]]></haxe_doc>
		</encoding>
		<enctype public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-enctype">enctype</a></code>
&nbsp;HTML&nbsp;attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set.]]></haxe_doc>
		</enctype>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of controls in the form.</haxe_doc>
		</length>
		<method public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-method">method</a></code>
&nbsp;HTML&nbsp;attribute, indicating the HTTP&nbsp;method used to submit the form. Only specified values can be set.]]></haxe_doc>
		</method>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-name">name</a></code>
&nbsp;HTML&nbsp;attribute, containing the name of the form.]]></haxe_doc>
		</name>
		<noValidate public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-novalidate">novalidate</a></code>
 HTML attribute, indicating that the form should not be validated.]]></haxe_doc>
		</noValidate>
		<target public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-target">target</a></code>
 HTML attribute, indicating where to display the results received from submitting the form.]]></haxe_doc>
		</target>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<submit public="1" set="method"><f a=""><x path="Void"/></f></submit>
		<haxe_doc><![CDATA[<p><code>FORM</code> elements share all of the properties and methods of other HTML elements described in the <a title="en/DOM/element" rel="internal" href="/api/js/html/Element">element</a> section.</p>
<p>This interface provides methods to create and modify <code>FORM</code> elements using the DOM.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLFormElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/usr/lib/haxe/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<contentDocument public="1" set="null"><c path="js.html.Document"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.DOMWindow"/></contentWindow>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<height public="1" set="null"><x path="Int"/></height>
		<location public="1"><c path="String"/></location>
		<longDesc public="1"><c path="String"/></longDesc>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<name public="1">
			<c path="String"/>
			<haxe_doc>This attribute is used to labeling frames. Without labeling all links will open in the frame that they are in.</haxe_doc>
		</name>
		<noResize public="1"><x path="Bool"/></noResize>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>This attribute defines existence of scrollbar. If this attribute is not used, browser put a scrollbar when necessary. There are two choices; "yes" for showing a scrollbar even when it is not necessary and "no" for do not showing a scrollbar even when it is necessary.</haxe_doc>
		</scrolling>
		<src public="1">
			<c path="String"/>
			<haxe_doc>This attribute is specify document which will be displayed by frame.</haxe_doc>
		</src>
		<width public="1" set="null"><x path="Int"/></width>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.svg.Document"/></f></getSVGDocument>
		<haxe_doc><![CDATA[<p><code>&lt;frame&gt;</code> is an HTML element which defines a particular area in which another HTML document can be displayed. A frame should be used within a <code><a rel="custom" href="/api/js/html/FrameSetElement">&lt;frameset&gt;</a></code>
.</p>
<p>Using the <code>&lt;frame&gt;</code> element is not encouraged because of certain disadvantages such as performance problems and lack of accessibility for users with screen readers. Instead of the <code>&lt;frame&gt;</code> element, <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/iframe">&lt;iframe&gt;</a></code>
&nbsp;may be preferred.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/frame">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/usr/lib/haxe/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1"><c path="String"/></cols>
		<onbeforeunload public="1"><t path="js.html.EventListener"/></onbeforeunload>
		<onhashchange public="1"><t path="js.html.EventListener"/></onhashchange>
		<onmessage public="1"><t path="js.html.EventListener"/></onmessage>
		<onoffline public="1"><t path="js.html.EventListener"/></onoffline>
		<ononline public="1"><t path="js.html.EventListener"/></ononline>
		<onpopstate public="1"><t path="js.html.EventListener"/></onpopstate>
		<onresize public="1"><t path="js.html.EventListener"/></onresize>
		<onstorage public="1"><t path="js.html.EventListener"/></onstorage>
		<onunload public="1"><t path="js.html.EventListener"/></onunload>
		<rows public="1"><c path="String"/></rows>
		<haxe_doc><![CDATA[<code>&lt;frameset&gt;</code> is an HTML element which is used to contain <code><a rel="custom" href="/api/js/html/FrameElement">&lt;frame&gt;</a></code>
 elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/frameset">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<class path="js.html.Gamepad" params="" file="/usr/lib/haxe/std/js/html/Gamepad.hx" extern="1">
		<axes public="1" set="null"><c path="Array"><x path="Float"/></c></axes>
		<buttons public="1" set="null"><c path="Array"><x path="Float"/></c></buttons>
		<id public="1" set="null"><c path="String"/></id>
		<index public="1" set="null"><x path="Int"/></index>
		<timestamp public="1" set="null"><x path="Int"/></timestamp>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadList" params="" file="/usr/lib/haxe/std/js/html/GamepadList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Gamepad"/>
</f></item>
		<meta><m n=":native"><e>"GamepadList"</e></m></meta>
	</class>
	<class path="js.html.Geolocation" params="" file="/usr/lib/haxe/std/js/html/Geolocation.hx" extern="1">
		<clearWatch public="1" set="method"><f a="watchId">
	<x path="Int"/>
	<x path="Void"/>
</f></clearWatch>
		<getCurrentPosition public="1" set="method"><f a="successCallback:?errorCallback:?options">
	<t path="js.html.PositionCallback"/>
	<t path="js.html.PositionErrorCallback"/>
	<d/>
	<x path="Void"/>
</f></getCurrentPosition>
		<watchPosition public="1" set="method"><f a="successCallback:?errorCallback:?options">
	<t path="js.html.PositionCallback"/>
	<t path="js.html.PositionErrorCallback"/>
	<d/>
	<x path="Int"/>
</f></watchPosition>
		<meta><m n=":native"><e>"Geolocation"</e></m></meta>
	</class>
	<class path="js.html.Geoposition" params="" file="/usr/lib/haxe/std/js/html/Geoposition.hx" extern="1">
		<coords public="1" set="null"><c path="js.html.Coordinates"/></coords>
		<timestamp public="1" set="null"><x path="Int"/></timestamp>
		<meta><m n=":native"><e>"Geoposition"</e></m></meta>
	</class>
	<class path="js.html.HRElement" params="" file="/usr/lib/haxe/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Enumerated attribute indicating alignment of the rule with respect to the surrounding context.</haxe_doc>
		</align>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1">
			<c path="String"/>
			<haxe_doc>The height of the rule.</haxe_doc>
		</size>
		<width public="1">
			<c path="String"/>
			<haxe_doc>The width of the rule on the page.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[DOM <code>hr</code> elements expose the <a target="_blank" rel="external nofollow" class=" external" title="http://www.w3.org/TR/html5/grouping-content.html#htmlhrelement" href="http://www.w3.org/TR/html5/grouping-content.html#htmlhrelement">HTMLHRElement</a> (or <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a target="_blank" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-68228811" rel="external nofollow" class=" external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-68228811"><code>HTMLHRElement</code></a>) interface, which provides special properties (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating <code>hr</code> elements. In <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML/HTML5">HTML 5</a></span>, this interface inherits from HTMLElement, but defines no additional members.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLHRElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/usr/lib/haxe/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Node"/>
</f></namedItem>
		<tags public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></tags>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/usr/lib/haxe/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of items in the collection. <strong>Read only</strong>.]]></haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Node"/>
</f></namedItem>
		<haxe_doc><![CDATA[<p><code>HTMLCollection</code> is an interface representing a generic collection of elements (in document order) and offers methods and properties for traversing the list.</p>
<div class="note"><strong>Note:</strong> This interface is called <code>HTMLCollection</code> for historical reasons (before DOM4, collections implementing this interface could only have HTML elements as their items).</div>
<p><code>HTMLCollection</code>s in the HTML DOM are live; they are automatically updated when the underlying document is changed.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLCollection">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/usr/lib/haxe/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method"><f a="option:?index">
	<c path="js.html.OptionElement"/>
	<x path="Int"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></remove>
		<haxe_doc><![CDATA[HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order)&nbsp;and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of <a title="En/DOM/select" rel="internal" href="/api/js/html/SelectElement">select</a>.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLOptionsCollection">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HeadElement" params="" file="/usr/lib/haxe/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<profile public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The URIs of one or more metadata profiles (white space separated). 

<span class="deprecatedInlineTemplate" title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Deprecated since Gecko 2.0</span>

 

<span title="(Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)
">Obsolete since Gecko 7.0</span>]]></haxe_doc>
		</profile>
		<haxe_doc><![CDATA[The DOM <code>head</code> element exposes the <a title="http://www.w3.org/TR/html5/semantics.html#htmlheadelement" class=" external" rel="external" href="http://www.w3.org/TR/html5/semantics.html#htmlheadelement" target="_blank">HTMLHeadElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span>&nbsp; <a class=" external" target="_blank" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-77253168" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-77253168">HTMLHeadElement</a>) interface, which contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the <code><a rel="custom" href="/api/js/html/Element">element</a></code>
 section. In 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>, this interface inherits from HTMLElement, but defines no additional members.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLHeadElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.History" params="" file="/usr/lib/haxe/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Read-only. Returns the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns <code>1</code>.]]></haxe_doc>
		</length>
		<state public="1" set="null">
			<d/>
			<haxe_doc><![CDATA[Returns the state at the top of the history stack. This is a way to look at the state without having to wait for a <code>popstate</code> event. <strong>Read only.</strong>]]></haxe_doc>
		</state>
		<back public="1" set="method"><f a=""><x path="Void"/></f></back>
		<forward public="1" set="method"><f a=""><x path="Void"/></f></forward>
		<go public="1" set="method"><f a="distance">
	<x path="Int"/>
	<x path="Void"/>
</f></go>
		<pushState public="1" set="method"><f a="data:title:?url">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></pushState>
		<replaceState public="1" set="method"><f a="data:title:?url">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceState>
		<haxe_doc><![CDATA[Returns a reference to the <code>History</code> object, which provides an interface for manipulating the browser <em>session history</em> (pages visited in the tab or frame that the current page is loaded in).<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/window.history">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<class path="js.html.HtmlElement" params="" file="/usr/lib/haxe/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<manifest public="1"><c path="String"/></manifest>
		<version public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Version of the HTML&nbsp;Document Type Definition that governs this document.]]></haxe_doc>
		</version>
		<haxe_doc><![CDATA[<p>The <code>html</code> object exposes the <a class=" external" title="http://www.w3.org/TR/html5/semantics.html#htmlhtmlelement" rel="external" href="http://www.w3.org/TR/html5/semantics.html#htmlhtmlelement" target="_blank">HTMLHtmlElement</a> (
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a target="_blank" class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-33759296" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-33759296">HTMLHtmlElement</a>) interface and serves as the root node for a given HTML&nbsp;document.&nbsp; This object inherits the properties and methods described in the <a title="en/DOM/element" class="internal" rel="internal" href="/api/js/html/Element">element</a> section.&nbsp; In 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>, this interface inherits from HTMLElement, but provides no other members.</p>
<p>You can retrieve the <code>html</code> object for a document by obtaining the value of the <a class="internal" title="en/DOM/document.documentElement" rel="internal" href="https://developer.mozilla.org/en/DOM/document.documentElement"><code>document.documentElement</code></a> property.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/En/DOM/Html">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/usr/lib/haxe/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<contentDocument public="1" set="null">
			<c path="js.html.Document"/>
			<haxe_doc>The active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.DOMWindow"/>
			<haxe_doc>The window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<height public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/iframe#attr-height">height</a></code>
 HTML&nbsp;attribute, indicating the height of the frame.]]></haxe_doc>
		</height>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Width of the frame margin.</haxe_doc>
		</marginWidth>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/iframe#attr-name">name</a></code>
 HTML&nbsp;attribute, containing a name by which to refer to the frame.]]></haxe_doc>
		</name>
		<sandbox public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/iframe#attr-sandbox">sandbox</a></code>
 HTML&nbsp;attribute, indicating extra restrictions on the behavior of the nested content.]]></haxe_doc>
		</sandbox>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/iframe#attr-src">src</a></code>
 HTML&nbsp;attribute, containing the address of the content to be embedded.]]></haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>The content to display in the frame.</haxe_doc>
		</srcdoc>
		<width public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/iframe#attr-width">width</a></code>
&nbsp;HTML&nbsp;attribute, indicating the width of the frame.]]></haxe_doc>
		</width>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.svg.Document"/></f></getSVGDocument>
		<haxe_doc><![CDATA[DOM iframe objects expose the <a class="external" href="http://www.w3.org/TR/html5/the-iframe-element.html#htmliframeelement" rel="external nofollow" target="_blank" title="http://www.w3.org/TR/html5/the-iframe-element.html#htmliframeelement">HTMLIFrameElement</a> (or <span><a href="https://developer.mozilla.org/en/HTML" rel="custom nofollow">HTML 4</a></span> <a class="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-50708718" rel="external nofollow" target="_blank" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-50708718"><code>HTMLIFrameElement</code></a>) interface, which provides special properties and methods (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of inline frame elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLIFrameElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageData" params="" file="/usr/lib/haxe/std/js/html/ImageData.hx" extern="1">
		<data public="1" set="null"><c path="js.html.Uint8ClampedArray"/></data>
		<height public="1" set="null"><x path="Int"/></height>
		<width public="1" set="null"><x path="Int"/></width>
		<haxe_doc><![CDATA[Used with the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/canvas">&lt;canvas&gt;</a></code>
 element. Returned by <a title="en/DOM/CanvasRenderingContext2D" rel="internal" href="/api/js/html/CanvasRenderingContext2D">CanvasRenderingContext2D</a>'s <a title="en/DOM/CanvasRenderingContext2D.createImageData" rel="internal" href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D.createImageData" class="new ">createImageData</a> and <a title="en/DOM/CanvasRenderingContext2D.getImageData" rel="internal" href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D.getImageData" class="new ">getImageData</a> (and accepted as first argument in <a title="en/DOM/CanvasRenderingContext2D.putImageData" rel="internal" href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D.putImageData" class="new ">putImageData</a>)<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/ImageData">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"ImageData"</e></m></meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/usr/lib/haxe/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Indicates the alignment of the image with respect to the surrounding context.</haxe_doc>
		</align>
		<alt public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img#attr-alt">alt</a></code>
 HTML attribute, indicating fallback context for the image.]]></haxe_doc>
		</alt>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Width of the border around the image.</haxe_doc>
		</border>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[True if the browser has fetched the image, and it is in a <a title="en/HTML/Element/Img#Image Format" rel="internal" href="https://developer.mozilla.org/En/HTML/Element/Img#Image_Format">supported image type</a> that was decoded without errors.]]></haxe_doc>
		</complete>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The CORS setting for this image element. See <a title="en/HTML/CORS settings attributes" rel="internal" href="https://developer.mozilla.org/en/HTML/CORS_settings_attributes">CORS&nbsp;settings attributes</a> for details.]]></haxe_doc>
		</crossOrigin>
		<height public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img#attr-height">height</a></code>
 HTML attribute, indicating the rendered height of the image in CSS&nbsp;pixels.]]></haxe_doc>
		</height>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Space to the left and right of the image.</haxe_doc>
		</hspace>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img#attr-ismap">ismap</a></code>
 HTML attribute, indicating that the image is part of a server-side image map.]]></haxe_doc>
		</isMap>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>URI of a long description of the image.</haxe_doc>
		</longDesc>
		<lowsrc public="1">
			<c path="String"/>
			<haxe_doc>A reference to a low-quality (but faster to load) copy of the image.</haxe_doc>
		</lowsrc>
		<name public="1"><c path="String"/></name>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Intrinsic height of the image in CSS&nbsp;pixels, if it is available; otherwise, 0.]]></haxe_doc>
		</naturalHeight>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Intrinsic width of the image in CSS&nbsp;pixels, if it is available; otherwise, 0.]]></haxe_doc>
		</naturalWidth>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element#attr-src">src</a></code>
 HTML attribute, containing the URL of the image.]]></haxe_doc>
		</src>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img#attr-usemap">usemap</a></code>
 HTML attribute, containing a partial URL of a map element.]]></haxe_doc>
		</useMap>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Space above and below the image.</haxe_doc>
		</vspace>
		<width public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/img#attr-width">width</a></code>
 HTML attribute, indicating the rendered width of the image in CSS&nbsp;pixels.]]></haxe_doc>
		</width>
		<x public="1" set="null"><x path="Int"/></x>
		<y public="1" set="null"><x path="Int"/></y>
		<haxe_doc><![CDATA[DOM image objects expose the <a title="http://www.w3.org/TR/html5/embedded-content-1.html#htmlimageelement" class=" external" rel="external" href="http://www.w3.org/TR/html5/embedded-content-1.html#htmlimageelement" target="_blank">HTMLImageElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-17701901" class=" external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-17701901" target="_blank"><code>HTMLImageElement</code></a>) interface, which provides special properties and methods (beyond the regular <code><a rel="custom" href="/api/js/html/Element">element</a></code>
 object interface they also have available to them by inheritance) for manipulating the layout and presentation of input elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLImageElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/usr/lib/haxe/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-accept">accept</a></code>
 HTML&nbsp;attribute, containing comma-separated list of file types accepted by the server when <strong>type</strong> is <code>file</code>.]]></haxe_doc>
		</accept>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Alignment of the element.

<span title="">Obsolete</span>&nbsp;in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</align>
		<alt public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-alt">alt</a></code>
&nbsp;HTML attribute, containing alternative text to use when <strong>type</strong> is <code>image.</code>]]></haxe_doc>
		</alt>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the {{htmlattrxref("autocomplete", "input)}} HTML attribute, indicating whether the value of the control can be automatically completed by the browser. Ignored if the value of the <strong>type</strong> attribute is <span>hidden</span>, <span>checkbox</span>, <span>radio</span>, <span>file</span>, or a button type (<span>button</span>, <span>submit</span>, <span>reset</span>, <span>image</span>). Possible values are: <ul> <li><span>off</span>: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry.</li> <li><span>on</span>: The browser can automatically complete the value based on values that the user has entered during previous uses.</li> </ul>]]></haxe_doc>
		</autocomplete>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-autofocus">autofocus</a></code>
 HTML&nbsp;attribute, which specifies that a form control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form element in a document can have the <strong>autofocus</strong> attribute. It cannot be applied if the <strong>type</strong> attribute is set to <code>hidden</code> (that is, you cannot automatically set focus to a hidden control).]]></haxe_doc>
		</autofocus>
		<checked public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The current state of the element when <strong>type</strong> is <code>checkbox</code> or <code>radio</code>.]]></haxe_doc>
		</checked>
		<defaultChecked public="1">
			<x path="Bool"/>
			<haxe_doc>The default state of a radio button or checkbox as originally specified in HTML that created this object.</haxe_doc>
		</defaultChecked>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>The default value as originally specified in HTML that created this object.</haxe_doc>
		</defaultValue>
		<dirName public="1"><c path="String"/></dirName>
		<directory public="1"><x path="Bool"/></directory>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-disabled">disabled</a></code>
 HTML attribute, indicating that the control is not available for interaction.]]></haxe_doc>
		</disabled>
		<entries public="1" set="null"><c path="js.html.fs.EntryArray"/></entries>
		<files public="1">
			<c path="js.html.FileList"/>
			<haxe_doc>A list of selected files.</haxe_doc>
		</files>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[<p>The containing form element, if this element is in a form. If this element is not contained in a form element:</p> <ul> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> this can be the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-id">id</a></code>
 attribute of any <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element in the same document. Even if the attribute is set on <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input">&lt;input&gt;</a></code>
, this property will be <code>null</code>, if it isn't the id of a <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element.</li> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> this must be <code>null</code>.</li> </ul>]]></haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-formaction">formaction</a></code>
 HTML attribute, containing the URI&nbsp;of a program that processes information submitted by the element. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-action">action</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-formmethod">formmethod</a></code>
&nbsp;HTML&nbsp;attribute, containing the HTTP&nbsp;method that the browser uses to submit the form. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-method">method</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-formnovalidate">formnovalidate</a></code>
&nbsp;HTML&nbsp;attribute, indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-novalidate">novalidate</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-formtarget">formtarget</a></code>
 HTML&nbsp;attribute, containing a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-target">target</a></code>
 attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element that owns this element.]]></haxe_doc>
		</formTarget>
		<grammar public="1"><x path="Bool"/></grammar>
		<height public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-height">height</a></code>
 HTML attribute, which defines the height of the image displayed for the button, if the value of <strong>type</strong> is <span>image</span>.]]></haxe_doc>
		</height>
		<incremental public="1"><x path="Bool"/></incremental>
		<indeterminate public="1">
			<x path="Bool"/>
			<haxe_doc>Indicates that a checkbox is neither on nor off.</haxe_doc>
		</indeterminate>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc><![CDATA[A list of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/label">&lt;label&gt;</a></code>
 elements that are labels for this element.]]></haxe_doc>
		</labels>
		<list public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc><![CDATA[Identifies a list of pre-defined options to suggest to the user. The value must be the <strong>id</strong> of a <code><a class="new" href="https://developer.mozilla.org/en/HTML/Element/datalist" rel="internal">&lt;datalist&gt;</a></code> element in the same document. The browser displays only options that are valid values for this input element. This attribute is ignored when the <strong>type</strong> attribute's value is <span>hidden</span>, <span>checkbox</span>, <span>radio</span>, <span>file</span>, or a button type.]]></haxe_doc>
		</list>
		<max public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-max">max</a></code>
 HTML&nbsp;attribute, containing the maximum (numeric or date-time) value for this item, which must not be less than its minimum (<strong>min</strong> attribute) value.]]></haxe_doc>
		</max>
		<maxLength public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[<p>Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-maxlength">maxlength</a></code>
&nbsp;HTML attribute, containing the maximum length of text (in Unicode code points) that the value can be changed to. The constraint is evaluated only when the value is changed</p> <div class="note"><strong>Note:</strong> If you set <code>maxlength</code> to a negative value programmatically, an exception will be thrown.</div> Setter throws DOMException.]]></haxe_doc>
		</maxLength>
		<min public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-min">min</a></code>
 HTML&nbsp;attribute, containing the minimum (numeric or date-time) value for this item, which must not be greater than its maximum (<strong>max</strong> attribute) value.]]></haxe_doc>
		</min>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-multiple">multiple</a></code>
 HTML&nbsp;attribute, indicating whether more than one value is possible (e.g., multiple files).]]></haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-name">name</a></code>
 HTML&nbsp;attribute, containing a name that identifies the element when submitting the form.]]></haxe_doc>
		</name>
		<onspeechchange public="1"><t path="js.html.EventListener"/></onspeechchange>
		<pattern public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-pattern">pattern</a></code>
 HTML&nbsp;attribute, containing a regular expression that the control's value is checked against. The pattern must match the entire value, not just some subset. Use the <strong>title</strong> attribute to describe the pattern to help the user. This attribute applies when the value of the <strong>type</strong> attribute is <span>text</span>, <span>search</span>, <span>tel</span>, <span>url</span> or <span>email</span>; otherwise it is ignored.]]></haxe_doc>
		</pattern>
		<placeholder public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-placeholder">placeholder</a></code>
 HTML&nbsp;attribute, containing a hint to the user of what can be entered in the control. The placeholder text must not contain carriage returns or line-feeds. This attribute applies when the value of the <strong>type</strong> attribute is <span>text</span>, <span>search</span>, <span>tel</span>, <span>url</span> or <span>email</span>; otherwise it is ignored.]]></haxe_doc>
		</placeholder>
		<readOnly public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[<p>Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-readonly">readonly</a></code>
 HTML&nbsp;attribute, indicating that the user cannot modify the value of the control.</p> <p><span><a href="https://developer.mozilla.org/en/HTML/HTML5" rel="custom nofollow">HTML 5</a></span> This is ignored if the value of the <strong>type</strong> attribute is <span>hidden</span>, <span>range</span>, <span>color</span>, <span>checkbox</span>, <span>radio</span>, <span>file</span>, or a button type.</p>]]></haxe_doc>
		</readOnly>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-required">required</a></code>
 HTML&nbsp;attribute, indicating that the user must fill in a value before submitting a form.]]></haxe_doc>
		</required>
		<selectionDirection public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The direction in which selection occurred. This is "forward" if selection was performed in the start-to-end direction of the current locale, or "backward" for the opposite direction. This can also be "none"&nbsp;if the direction is unknown."]]></haxe_doc>
		</selectionDirection>
		<selectionEnd public="1">
			<x path="Int"/>
			<haxe_doc>The index of the end of selected text.</haxe_doc>
		</selectionEnd>
		<selectionStart public="1">
			<x path="Int"/>
			<haxe_doc>The index of the beginning of selected text.</haxe_doc>
		</selectionStart>
		<size public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-size">size</a></code>
 HTML&nbsp;attribute, containing size of the control. This value is in pixels unless the value of <strong>type</strong> is <span>text</span> or <span>password</span>, in which case, it is an integer number of characters. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> Applies only when <strong>type</strong> is set to <span>text</span>, <span>search</span>, <span>tel</span>, <span>url</span>, <span>email</span>, or <span>password</span>; otherwise it is ignored. Setter throws DOMException.]]></haxe_doc>
		</size>
		<speech public="1"><x path="Bool"/></speech>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-src">src</a></code>
 HTML&nbsp;attribute, which specifies a URI for the location of an image to display on the graphical submit button, if the value of <strong>type</strong> is <span>image</span>; otherwise it is ignored.]]></haxe_doc>
		</src>
		<step public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-step">step</a></code>
 HTML&nbsp;attribute, which works with<strong> min</strong> and <strong>max</strong> to limit the increments at which a numeric or date-time value can be set. It can be the string <span>any</span> or a positive floating point number. If this is not set to <span>any</span>, the control accepts only values at multiples of the step value greater than the minimum.]]></haxe_doc>
		</step>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-type">type</a></code>
 HTML&nbsp;attribute, indicating the type of control to display. See 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-type">type</a></code>
 attribute of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input">&lt;input&gt;</a></code>
 for possible values.]]></haxe_doc>
		</type>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[A client-side image map. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</useMap>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc><![CDATA[The validity states that this element is in.&nbsp;]]></haxe_doc>
		</validity>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Current value in the control. Setter throws DOMException.</haxe_doc>
		</value>
		<valueAsDate public="1">
			<c path="Date"/>
			<haxe_doc><![CDATA[The value of the element, interpreted as a date, or <code>null</code> if conversion is not possible. Setter throws DOMException.]]></haxe_doc>
		</valueAsDate>
		<valueAsNumber public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<p>The value of the element, interpreted as one of the following in order:</p> <ol> <li>a time value</li> <li>a number</li> <li><code>null</code> if conversion is not possible</li> </ol> Setter throws DOMException.]]></haxe_doc>
		</valueAsNumber>
		<width public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-width">width</a></code>
 HTML&nbsp;attribute, which defines the width of the image displayed for the button, if the value of <strong>type</strong> is <span>image</span>.]]></haxe_doc>
		</width>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the element is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:selectionMode">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method"><f a="start:end:?direction">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></setSelectionRange>
		<stepDown public="1" set="method"><f a="?n">
	<x path="Int"/>
	<x path="Void"/>
</f></stepDown>
		<stepUp public="1" set="method"><f a="?n">
	<x path="Int"/>
	<x path="Void"/>
</f></stepUp>
		<haxe_doc><![CDATA[DOM <code>Input</code> objects expose the <a title="http://dev.w3.org/html5/spec/the-input-element.html#htmlinputelement" class=" external" rel="external" href="http://dev.w3.org/html5/spec/the-input-element.html#htmlinputelement" target="_blank">HTMLInputElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-6043025" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-6043025" target="_blank"><code>HTMLInputElement</code></a>) interface, which provides special properties and methods (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of input elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLInputElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<class path="js.html.Int32Array" params="" file="/usr/lib/haxe/std/js/html/Int32Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of each array element.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of entries in the array. <strong>Read only.</strong>]]></haxe_doc>
		</length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="js.html.Int32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
				</set>
			</overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Int32Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Int32Array <a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array()">Int32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Int32Array</code> object.</p>
<pre>Int32Array Int32Array(
&nbsp; unsigned long length
);

Int32Array Int32Array(
&nbsp; <em>TypedArray</em> array
);

Int32Array Int32Array(
&nbsp; sequence&lt;type&gt; array
);

Int32Array Int32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int16Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Int32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Int32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Int32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Int32Array <a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array()">Int32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Int32Array</code> object.</p>
<pre>Int32Array Int32Array(
&nbsp; unsigned long length
);

Int32Array Int32Array(
&nbsp; <em>TypedArray</em> array
);

Int32Array Int32Array(
&nbsp; sequence&lt;type&gt; array
);

Int32Array Int32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int16Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Int32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Int32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Int32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Int32Array <a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array()">Int32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Int32Array</code> object.</p>
<pre>Int32Array Int32Array(
&nbsp; unsigned long length
);

Int32Array Int32Array(
&nbsp; <em>TypedArray</em> array
);

Int32Array Int32Array(
&nbsp; sequence&lt;type&gt; array
);

Int32Array Int32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int16Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Int32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Int32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Int32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Int32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Int32Array <a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array()">Int32Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Int32Array </code><code><a title="en/JavaScript typed arrays/Int32Array#Int32Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array#Int32Array%28%29">Int32Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new <code>Int32Array</code> object.</p>
<pre>Int32Array Int32Array(
&nbsp; unsigned long length
);

Int32Array Int32Array(
&nbsp; <em>TypedArray</em> array
);

Int32Array Int32Array(
&nbsp; sequence&lt;type&gt; array
);

Int32Array Int32Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int16Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Int32Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Int32Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Int32Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[<p>The <code>Int32Array</code> type represents an array of twos-complement 32-bit signed integers.</p>
<p>Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Int32Array">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.html.KeygenElement" params="" file="/usr/lib/haxe/std/js/html/KeygenElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/keygen#attr-autofocus">autofocus</a></code>
&nbsp;HTML attribute, indicating that the form control should have input focus when the page loads.]]></haxe_doc>
		</autofocus>
		<challenge public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/keygen#attr-challenge">challenge</a></code>
 HTML&nbsp;attribute, containing a challenge string that is packaged with the submitted key.]]></haxe_doc>
		</challenge>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/keygen#attr-disabled">disabled</a></code>
&nbsp;HTML attribute, indicating that the control is not available for interaction.]]></haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[Indicates the control's form owner, reflecting the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/keygen#attr-form">form</a></code>
&nbsp;HTML&nbsp;attribute if it is defined.]]></haxe_doc>
		</form>
		<keytype public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/keygen#attr-keytype">keytype</a></code>
 HTML&nbsp;attribute, containing the type of key used.]]></haxe_doc>
		</keytype>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A list of label elements associated with this keygen element.</haxe_doc>
		</labels>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/keygen#attr-name">name</a></code>
 HTML attribute, containing the name for the control that is submitted with form data.]]></haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[Must be the value <code>keygen</code>.]]></haxe_doc>
		</type>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>The validity states that this element is in.</haxe_doc>
		</validity>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Always false because <code>keygen</code> objects are never candidates for constraint validation.]]></haxe_doc>
		</willValidate>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[<strong>Note:</strong>&nbsp;This page describes the Keygen Element interface as specified, not as currently implemented by Gecko. See <a rel="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=101019" class="external" title="">
bug 101019</a>
 for details and status.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLKeygenElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLKeygenElement"</e></m></meta>
	</class>
	<class path="js.html.LIElement" params="" file="/usr/lib/haxe/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This character attributes indicates the numbering type: <ul> <li><code>a</code>: lowercase letters</li> <li><code>A</code>: uppercase letters</li> <li><code>i</code>: lowercase Roman numerals</li> <li><code>I</code>: uppercase Roman numerals</li> <li><code>1</code>: numbers</li> </ul> This type overrides the one used by its parent <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/ol">&lt;ol&gt;</a></code>
 element, if any.<br> <div class="note"><strong>Usage note:</strong> This attribute has been deprecated: use the CSS <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
 property instead.</div>]]></haxe_doc>
		</type>
		<value public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[This integer attributes indicates the current ordinal value of the item in the list as defined by the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/ol">&lt;ol&gt;</a></code>
 element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The <strong>value</strong> attribute has no meaning for unordered lists (<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/ul">&lt;ul&gt;</a></code>
) or for menus (<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/menu">&lt;menu&gt;</a></code>
). <div class="note"><strong>Note</strong>: This attribute was deprecated in HTML4, but reintroduced in HTML5.</div> <div class="geckoVersionNote"> <p>
</p><div class="geckoVersionHeading">Gecko 9.0 note<div>(Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
</div></div>
<p></p> <p>Prior to <span title="(Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
">Gecko&nbsp;9.0</span>, negative values were incorrectly converted to 0. Starting in <span title="(Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
">Gecko&nbsp;9.0</span> all integer values are correctly parsed.</p> </div>]]></haxe_doc>
		</value>
		<haxe_doc><![CDATA[The <em>HTML List item element</em> (<code>&lt;li&gt;</code>) is used to represent a list item. It should be contained in an ordered list (<code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
), an unordered list (<code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
) or a menu (<code><a rel="custom" href="/api/js/html/MenuElement">&lt;menu&gt;</a></code>
), where it represents a single entity in that list. In menus and unordered lists, list items are ordinarily displayed using bullet points. In order lists, they are usually displayed with some ascending counter on the left such as a number or letter<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/li">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/usr/lib/haxe/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The labeled control.</haxe_doc>
		</control>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>The form owner of this label.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The ID of the labeled control. Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/label#attr-for">for</a></code>
 attribute.]]></haxe_doc>
		</htmlFor>
		<haxe_doc><![CDATA[DOM Label objects inherit all of the properties and methods of DOM <a title="en/DOM/element" rel="internal" href="/api/js/html/Element">element</a>, and also expose the <a title="http://dev.w3.org/html5/spec/forms.html#htmllabelelement" class=" external" rel="external" href="http://dev.w3.org/html5/spec/forms.html#htmllabelelement" target="_blank">HTMLLabelElement</a>(or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-13691394" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-13691394" target="_blank">HTMLLabelElement</a>) interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLLabelElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/usr/lib/haxe/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Alignment relative to the form set. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>, 

<span class="deprecatedInlineTemplate" title="">Deprecated</span>

 in 
<span>HTML 4.01</span>]]></haxe_doc>
		</align>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[The form that this legend belongs to. If the legend has a fieldset element as its parent, then this attribute returns the same value as the <strong>form</strong> attribute on the parent fieldset element. Otherwise, it returns null.]]></haxe_doc>
		</form>
		<haxe_doc><![CDATA[DOM&nbsp;Legend objects inherit all of the properties and methods of DOM <a href="https://developer.mozilla.org/en/DOM/HTMLElement" title="en/DOM/HTMLElement" rel="internal">HTMLElement</a>, and also expose the <a title="http://www.w3.org/TR/html5/forms.html#htmllegendelement" class=" external" rel="external nofollow" href="http://www.w3.org/TR/html5/forms.html#htmllegendelement" target="_blank">HTMLLegendElement</a> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> (or <a class=" external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-21482039" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-21482039" target="_blank">HTMLLegendElement</a> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span>) interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLLegendElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<class path="js.html.LinkElement" params="" file="/usr/lib/haxe/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<charset public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute defines the character encoding of the linked resource. The value is a space- and/or comma-delimited list of character sets as defined in <a class="external" title="http://tools.ietf.org/html/rfc2045" rel="external" href="http://tools.ietf.org/html/rfc2045" target="_blank">RFC 2045</a>. The default value is ISO-8859-1. <div class="note"><strong>Usage note: </strong>This attribute is obsolete in HTML5 and <span>must</span><strong> not be used by authors</strong>. To achieve its effect, use the <span>Content-Type:</span> HTTP header on the linked resource.</div>]]></haxe_doc>
		</charset>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This attribute is used to disable a link relationship. In conjunction with scripting, this attribute could be used to turn on and off various style sheet relationships. <div class="note"> <p><strong>Note: </strong>While there is no <code>disabled</code> attribute in the HTML standard, there <strong>is</strong> a <code>disabled</code> attribute on the <code>HTMLLinkElement</code> DOM object.</p> <p>The use of&nbsp;<code>disabled</code> as an HTML attribute is non-standard and only used by some Microsoft browsers. <span>Do not use it</span>. To achieve a similar effect, use one of the following techniques:</p> <ul> <li>If the <code>disabled</code> attribute has been added directly to the element on the page, do not include the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/link">&lt;link&gt;</a></code>
 element instead;</li> <li>Set the <code>disabled</code> <strong>property</strong> of the DOM object via scripting.</li> </ul> </div>]]></haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute specifies the <a title="https://developer.mozilla.org/en/URIs_and_URLs" rel="internal" href="https://developer.mozilla.org/en/URIs_and_URLs">URL</a> of the linked resource. A URL might be absolute or relative.]]></haxe_doc>
		</href>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are determined by <a class="external" title="http://www.ietf.org/rfc/bcp/bcp47.txt" rel="external" href="http://www.ietf.org/rfc/bcp/bcp47.txt" target="_blank">BCP47</a> for HTML5 and by <a class="external" title="http://www.ietf.org/rfc/rfc1766.txt" rel="external" href="http://www.ietf.org/rfc/rfc1766.txt" target="_blank">RFC1766</a> for HTML 4. Use this attribute only if the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/a#attr-href">href</a></code>
 attribute is present.]]></haxe_doc>
		</hreflang>
		<media public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute specifies the media which the linked resource applies to. Its value must be a <a title="En/CSS/Media queries" rel="internal" href="https://developer.mozilla.org/en/CSS/Media_queries">media query</a>. This attribute is mainly useful when linking to external stylesheets by allowing the user agent to pick the best adapted one for the device it runs on.<br> <div class="note"><strong>Usage note:&nbsp;</strong> <p>&nbsp;</p> <ul> <li>In HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., <a title="https://developer.mozilla.org/en/CSS/@media" rel="internal" href="https://developer.mozilla.org/en/CSS/@media">media types and groups</a>, where defined and allowed as values for this attribute, such as <span>print</span>, <span>screen</span>, <span>aural</span>, <span>braille.</span> HTML5 extended this to any kind of <a title="En/CSS/Media queries" rel="internal" href="https://developer.mozilla.org/en/CSS/Media_queries">media queries</a>, which are a superset of the allowed values of HTML 4.</li> <li>Browsers not supporting the <a title="En/CSS/Media queries" rel="internal" href="https://developer.mozilla.org/en/CSS/Media_queries">CSS3 Media Queries</a> won't necessary recognized the adequate link; do not forget to set fallback links,&nbsp; the restricted set of media queries defined in HTML 4.</li> </ul> </div>]]></haxe_doc>
		</media>
		<rel public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of the <a title="en/HTML/Link types" rel="internal" href="https://developer.mozilla.org/en/HTML/Link_types">link types values</a>. The most common use of this attribute is to specify a link to an external style sheet:&nbsp;the <strong>rel</strong> attribute is set to <code>stylesheet</code>, and the <strong>href</strong> attribute is set to the URL of an external style sheet to format the page. WebTV also supports the use of the value <code>next</code> for <strong>rel</strong> to preload the next page in a document series.]]></haxe_doc>
		</rel>
		<rev public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The value of this attribute shows the relationship of the current document to the linked document, as defined by the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/link#attr-href">href</a></code>
 attribute. The attribute thus defines the reverse relationship compared to the value of the <strong>rel</strong> attribute. <a title="en/HTML/Link types" rel="internal" href="https://developer.mozilla.org/en/HTML/Link_types">Link types values</a> for the attribute are similar to the possible values for 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/link#attr-rel">rel</a></code>
.<br> <div class="note"><strong>Usage note: </strong>This attribute is obsolete in HTML5. <strong>Do not use it</strong>. To achieve its effect, use the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/link#attr-rel">rel</a></code>
 attribute with the opposite <a title="en/HTML/Link types" rel="internal" href="https://developer.mozilla.org/en/HTML/Link_types">link types values</a>, e.g. <span>made</span> should be replaced by <span>author</span>. Also this attribute doesn't mean <em>revision</em> and must not be used with a version number, which is unfortunately the case on numerous sites.</div>]]></haxe_doc>
		</rev>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<sizes public="1">
			<c path="js.html.DOMSettableTokenList"/>
			<haxe_doc><![CDATA[This attribute defines the sizes of the icons for visual media contained in the resource. It must be present only if the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/link#attr-rel">rel</a></code>
 contains the <span>icon</span> <a title="en/HTML/Link types" rel="internal" href="https://developer.mozilla.org/en/HTML/Link_types">link types value</a>. It may have the following values: <ul> <li><span>any</span>, meaning that the icon can be scaled to any size as it is in a vectorial format, like <span>image/svg</span>.</li> <li>a white-space separated list of sizes, each in the format <span><em>&lt;width in pixels&gt;</em>x<em>&lt;height in pixels&gt;</em></span> or <span><em>&lt;width in pixels&gt;</em>X<em>&lt;height in pixels&gt;</em></span>. Each of these sizes must be contained in the resource.</li> </ul> <div class="note"><strong>Usage note:&nbsp;</strong> <p>&nbsp;</p> <ul> <li>Most icon format are only able to store one single icon; therefore most of the time the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element#attr-sizes">sizes</a></code>
 contains only one entry. Among the major browsers, only the Apple's ICNS format allows the storage of multiple icons, and this format is only supported in WebKit.</li> <li>Apple's iOS does not support this attribute, hence Apple's iPhone and iPad use special, non-standard <a title="en/HTML/Link types" rel="internal" href="https://developer.mozilla.org/en/HTML/Link_types">link types values</a> to define icon to be used as Web Clip or start-up placeholder: <span>apple-touch-icon</span> and <span>apple-touch-startup-icon</span>.</li> </ul> </div>]]></haxe_doc>
		</sizes>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Defines the frame or window name that has the defined linking relationship or that will show the rendering of any linked resource.</haxe_doc>
		</target>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as <strong>text/html</strong>, <strong>text/css</strong>, and so on. The common use of this attribute is to define the type of style sheet linked and the most common current value is <strong>text/css</strong>, which indicates a Cascading Style Sheet format.]]></haxe_doc>
		</type>
		<haxe_doc><![CDATA[The <em>HTML Link Element</em> (&lt;link&gt;) specifies relationships between the current document and other documents. Possible uses for this element include defining a relational framework for navigation and linking the document to a style sheet.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/link">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.Location" params="" file="/usr/lib/haxe/std/js/html/Location.hx" extern="1">
		<ancestorOrigins public="1" set="null"><c path="js.html.DOMStringList"/></ancestorOrigins>
		<hash public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[the part of the URL that follows the # symbol, including the # symbol.<br> You can listen for the <a title="en/DOM/window.onhashchange" rel="internal" href="https://developer.mozilla.org/en/DOM/window.onhashchange">hashchange event</a> to get notified of changes to the hash in supporting browsers.]]></haxe_doc>
		</hash>
		<host public="1">
			<c path="String"/>
			<haxe_doc>the host name and port number.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>the host name (without the port number or square brackets).</haxe_doc>
		</hostname>
		<href public="1">
			<c path="String"/>
			<haxe_doc>the entire URL.</haxe_doc>
		</href>
		<origin public="1" set="null"><c path="String"/></origin>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>the path (relative to the host).</haxe_doc>
		</pathname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>the port number of the URL.</haxe_doc>
		</port>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>the protocol of the URL.</haxe_doc>
		</protocol>
		<search public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[the part of the URL that follows the&nbsp;? symbol, including the&nbsp;? symbol.]]></haxe_doc>
		</search>
		<assign public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></assign>
		<reload public="1" set="method"><f a=""><x path="Void"/></f></reload>
		<replace public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></replace>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<haxe_doc><![CDATA[Returns a <a href="#Location_object"> <code>Location</code> object</a>, which contains information about the URL of the document and provides methods for changing that URL. You can also assign to this property to load another URL.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/window.location">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/usr/lib/haxe/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<areas public="1" set="null"><c path="js.html.HTMLCollection"/></areas>
		<name public="1"><c path="String"/></name>
		<haxe_doc><![CDATA[The HTML <em>Map</em> element (<code>&lt;map&gt;</code>) is used with <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/area">&lt;area&gt;</a></code>
 elements to define a image map.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/map">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MarqueeElement" params="" file="/usr/lib/haxe/std/js/html/MarqueeElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<behavior public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Sets how the text is scrolled within the marquee. Possible values are <code>scroll</code>, <code>slide</code> and <code>alternate</code>. If no value is specified, the default value is <code>scroll</code>.]]></haxe_doc>
		</behavior>
		<bgColor public="1"><c path="String"/></bgColor>
		<direction public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Sets the direction of the scrolling within the marquee. Possible values are <code>left</code>, <code>right</code>, <code>up</code> and <code>down</code>. If no value is specified, the default value is <code>left</code>.]]></haxe_doc>
		</direction>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Sets the height in pixels or percentage value.</haxe_doc>
		</height>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Sets the horizontal margin</haxe_doc>
		</hspace>
		<loop public="1">
			<x path="Int"/>
			<haxe_doc>Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously. Setter throws DOMException.</haxe_doc>
		</loop>
		<scrollAmount public="1">
			<x path="Int"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</scrollAmount>
		<scrollDelay public="1">
			<x path="Int"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</scrollDelay>
		<trueSpeed public="1"><x path="Bool"/></trueSpeed>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Sets the vertical margin in pixels or percentage value.</haxe_doc>
		</vspace>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Sets the width in pixels or percentage value.</haxe_doc>
		</width>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<haxe_doc><![CDATA[Non-standard<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/marquee">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMarqueeElement"</e></m></meta>
	</class>
	<class path="js.html.MediaController" params="" file="/usr/lib/haxe/std/js/html/MediaController.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<buffered public="1" set="null"><c path="js.html.TimeRanges"/></buffered>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</currentTime>
		<defaultPlaybackRate public="1"><x path="Float"/></defaultPlaybackRate>
		<duration public="1" set="null"><x path="Float"/></duration>
		<muted public="1"><x path="Bool"/></muted>
		<paused public="1" set="null"><x path="Bool"/></paused>
		<playbackRate public="1"><x path="Float"/></playbackRate>
		<played public="1" set="null"><c path="js.html.TimeRanges"/></played>
		<seekable public="1" set="null"><c path="js.html.TimeRanges"/></seekable>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</volume>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"MediaController"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/usr/lib/haxe/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></MEDIA_ERR_ABORTED>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></MEDIA_ERR_DECODE>
		<MEDIA_ERR_ENCRYPTED public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></MEDIA_ERR_ENCRYPTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></MEDIA_ERR_NETWORK>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null"><x path="Int"/></code>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<class path="js.html.MediaList" params="" file="/usr/lib/haxe/std/js/html/MediaList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<mediaText public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</mediaText>
		<appendMedium public="1" set="method"><f a="newMedium">
	<c path="String"/>
	<x path="Void"/>
</f></appendMedium>
		<deleteMedium public="1" set="method"><f a="oldMedium">
	<c path="String"/>
	<x path="Void"/>
</f></deleteMedium>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/usr/lib/haxe/std/js/html/MediaQueryList.hx" extern="1">
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[<code>true</code> if the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/document">document</a></code>
 currently matches the media query list; otherwise <code>false</code>. <strong>Read only.</strong>]]></haxe_doc>
		</matches>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc>The serialized media query list.</haxe_doc>
		</media>
		<addListener public="1" set="method"><f a="listener">
	<t path="js.html.MediaQueryListListener"/>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<t path="js.html.MediaQueryListListener"/>
	<x path="Void"/>
</f></removeListener>
		<haxe_doc><![CDATA[<div><strong>DRAFT</strong>
<div>This page is not complete.</div>
</div>

<p></p>
<p>A <code>MediaQueryList</code> object maintains a list of <a title="En/CSS/Media queries" rel="internal" href="https://developer.mozilla.org/En/CSS/Media_queries">media queries</a> on a <code><a rel="custom" href="/api/js/html/Document">document</a></code>
, and handles sending notifications to listeners when the media queries on the document change.</p>
<p>This makes it possible to observe a document to detect when its media queries change, instead of polling the values periodically, if you need to programmatically detect changes to the values of media queries on a document.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/MediaQueryList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<typedef path="js.html.MediaQueryListListener" params="" file="/usr/lib/haxe/std/js/html/MediaQueryListListener.hx">
		<f a="">
			<c path="js.html.MediaQueryList"/>
			<x path="Void"/>
		</f>
		<haxe_doc><![CDATA[<div><strong>DRAFT</strong>
<div>This page is not complete.</div>
</div>

<p></p>
<p>A <code>MediaQueryList</code> object maintains a list of <a title="En/CSS/Media queries" rel="internal" href="https://developer.mozilla.org/En/CSS/Media_queries">media queries</a> on a <code><a rel="custom" href="/api/js/html/Document">document</a></code>
, and handles sending notifications to listeners when the media queries on the document change.</p>
<p>This makes it possible to observe a document to detect when its media queries change, instead of polling the values periodically, if you need to programmatically detect changes to the values of media queries on a document.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/MediaQueryListListener">MDN</a>.]]></haxe_doc>
	</typedef>
	<class path="js.html.MemoryInfo" params="" file="/usr/lib/haxe/std/js/html/MemoryInfo.hx" extern="1">
		<jsHeapSizeLimit public="1" set="null"><x path="Int"/></jsHeapSizeLimit>
		<totalJSHeapSize public="1" set="null"><x path="Int"/></totalJSHeapSize>
		<usedJSHeapSize public="1" set="null"><x path="Int"/></usedJSHeapSize>
		<meta><m n=":native"><e>"MemoryInfo"</e></m></meta>
	</class>
	<class path="js.html.MenuElement" params="" file="/usr/lib/haxe/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<haxe_doc><![CDATA[<p>The HTML <em>menu</em> element (<code>&lt;menu&gt;</code>) represents an unordered list of menu choices, or commands.</p>
<p>There is no limitation to the depth and nesting of lists defined with the <code><a rel="custom" href="/api/js/html/MenuElement">&lt;menu&gt;</a></code>
, <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 and <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 elements.</p>
<div class="note"><strong>Usage note: </strong> The <code><a rel="custom" href="/api/js/html/MenuElement">&lt;menu&gt;</a></code>
 and <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 both represent an unordered list of items. They differ in the way that the <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 element only contains items to display while the <code><a rel="custom" href="/api/js/html/MenuElement">&lt;menu&gt;</a></code>
 element contains interactive items, to act on.</div>
<div class="note"><strong>Note</strong>: This element was deprecated in HTML4, but reintroduced in HTML5.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/menu">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/usr/lib/haxe/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Gets or sets the value of meta-data property.</haxe_doc>
		</content>
		<httpEquiv public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Gets or sets the name of an HTTP&nbsp;response header to define for a document.]]></haxe_doc>
		</httpEquiv>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets or sets the name of a meta-data property to define for a document.</haxe_doc>
		</name>
		<scheme public="1">
			<c path="String"/>
			<haxe_doc>Gets or sets the name of a scheme used to interpret the value of a meta-data property.</haxe_doc>
		</scheme>
		<haxe_doc><![CDATA[The meta objects expose the <a class=" external" target="_blank" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-37041454" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-37041454">HTMLMetaElement</a> interface which contains descriptive metadata about a document.&nbsp; This object inherits all of the properties and methods described in the <a class="internal" rel="internal" href="/api/js/html/Element">element</a> section.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLMetaElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/usr/lib/haxe/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<high public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The lower numeric bound of the high end of the measured range. This must be less than the maximum value (<strong>max</strong> attribute), and it also must be greater than the low value and minimum value (<strong>low</strong> attribute and <strong>min</strong> attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the <strong>high</strong> value is equal to the maximum value. Setter throws DOMException.]]></haxe_doc>
		</high>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<low public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (<strong>min</strong> attribute), and it also must be less than the high value and maximum value (<strong>high</strong> attribute and <strong>max</strong> attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the <strong>low</strong> value is equal to the minimum value. Setter throws DOMException.]]></haxe_doc>
		</low>
		<max public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The upper numeric bound of the measured range. This must be greater than the minimum value (<strong>min</strong> attribute), if specified. If unspecified, the maximum value is 1. Setter throws DOMException.]]></haxe_doc>
		</max>
		<min public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The lower numeric bound of the measured range. This must be less than the maximum value (<strong>max</strong> attribute), if specified. If unspecified, the minimum value is 0. Setter throws DOMException.]]></haxe_doc>
		</min>
		<optimum public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[This attribute indicates the optimal numeric value. It must be within the range (as defined by the <strong>min</strong> attribute and <strong>max</strong> attribute). When used with the <strong>low</strong> attribute and <strong>high</strong> attribute, it gives an indication where along the range is considered preferable. For example, if it is between the <strong>min</strong> attribute and the <strong>low</strong> attribute, then the lower range is considered preferred. Setter throws DOMException.]]></haxe_doc>
		</optimum>
		<value public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The current numeric value. This must be between the minimum and maximum values (<strong>min</strong> attribute and <strong>max</strong> attribute) if they are specified. If unspecified or malformed, the value is 0. If specified, but not within the range given by the <strong>min</strong> attribute and <strong>max</strong> attribute, the value is equal to the nearest end of the range. Setter throws DOMException.]]></haxe_doc>
		</value>
		<haxe_doc><![CDATA[<p>The HTML <em>meter</em> element (<code>&lt;meter&gt;</code>) represents either a scalar value within a known range or a fractional value.</p>
<div class="note"><strong>Usage note: </strong>Unless the <strong>value</strong> attribute is between 0 and 1 (inclusive), the <strong>min</strong> attribute and <strong>max</strong> attribute should define the range so that the <strong>value</strong> attribute's value is within it.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/meter">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/usr/lib/haxe/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/del#attr-cite">cite</a></code>
 HTML attribute, containing a URI of a resource explaining the change.]]></haxe_doc>
		</cite>
		<dateTime public="1"><c path="String"/></dateTime>
		<haxe_doc><![CDATA[DOM mod (modification)&nbsp;objects expose the <a title="http://www.w3.org/TR/html5/edits.html#htmlmodelement" class=" external" rel="external nofollow" href="http://www.w3.org/TR/html5/edits.html#htmlmodelement" target="_blank">HTMLModElement</a> (or <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external nofollow" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-79359609" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-79359609" target="_blank"><code>HTMLModElement</code></a>) interface, which provides special properties (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating modification elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLModElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<class path="js.html.NamedNodeMap" params="" file="/usr/lib/haxe/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getNamedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Node"/>
</f></getNamedItem>
		<getNamedItemNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Node"/>
</f></getNamedItemNS>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item>
		<removeNamedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Node"/>
</f></removeNamedItem>
		<removeNamedItemNS public="1" set="method"><f a="?namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Node"/>
</f></removeNamedItemNS>
		<setNamedItem public="1" set="method"><f a="node">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></setNamedItem>
		<setNamedItemNS public="1" set="method"><f a="node">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></setNamedItemNS>
		<haxe_doc><![CDATA[A collection of nodes returned by <a title="En/DOM/Element.attributes" class="internal" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.attributes"><code>Element.attributes</code></a> (also potentially for <code><a title="En/DOM/DocumentType.entities" rel="internal" href="https://developer.mozilla.org/En/DOM/DocumentType.entities" class="new internal">DocumentType.entities</a></code>, <code><a title="En/DOM/DocumentType.notations" rel="internal" href="https://developer.mozilla.org/En/DOM/DocumentType.notations" class="new internal">DocumentType.notations</a></code>). <code>NamedNodeMap</code>s are not in any particular order (unlike <code><a title="En/DOM/NodeList" class="internal" rel="internal" href="/api/js/html/NodeList">NodeList</a></code>), although they may be accessed by an index as in an array (they may also be accessed with the <code>item</code>() method). A NamedNodeMap object are live and will thus be auto-updated if changes are made to their contents internally or elsewhere.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/NamedNodeMap">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/usr/lib/haxe/std/js/html/Navigator.hx" extern="1">
		<appCodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the internal "code" name of the current browser. Do not rely on this property to return the correct value.</haxe_doc>
		</appCodeName>
		<appName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the official name of the browser. Do not rely on this property to return the correct value.</haxe_doc>
		</appName>
		<appVersion public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the version of the browser as a string. Do not rely on this property to return the correct value.</haxe_doc>
		</appVersion>
		<battery public="1" set="null"><c path="js.html.BatteryManager"/></battery>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether cookies are enabled in the browser or not.</haxe_doc>
		</cookieEnabled>
		<geolocation public="1" set="null"><c path="js.html.Geolocation"/></geolocation>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string representing the language version of the browser.</haxe_doc>
		</language>
		<mimeTypes public="1" set="null">
			<c path="js.html.DOMMimeTypeArray"/>
			<haxe_doc>Returns a list of the MIME types supported by the browser.</haxe_doc>
		</mimeTypes>
		<onLine public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether the browser is working online.</haxe_doc>
		</onLine>
		<platform public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string representing the platform of the browser.</haxe_doc>
		</platform>
		<plugins public="1" set="null">
			<c path="js.html.DOMPluginArray"/>
			<haxe_doc>Returns an array of the plugins installed in the browser.</haxe_doc>
		</plugins>
		<product public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the product name of the current browser. (e.g. "Gecko")</haxe_doc>
		</product>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g. "20060909")</haxe_doc>
		</productSub>
		<userAgent public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the user agent string for the current browser.</haxe_doc>
		</userAgent>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g. "Netscape6")</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1")</haxe_doc>
		</vendorSub>
		<getGamepads public="1" set="method"><f a=""><c path="js.html.GamepadList"/></f></getGamepads>
		<getStorageUpdates public="1" set="method"><f a=""><x path="Void"/></f></getStorageUpdates>
		<getUserMedia public="1" set="method"><f a="options:successCallback:?errorCallback">
	<d/>
	<t path="js.html.rtc.NavigatorUserMediaSuccessCallback"/>
	<t path="js.html.rtc.NavigatorUserMediaErrorCallback"/>
	<x path="Void"/>
</f></getUserMedia>
		<javaEnabled public="1" set="method"><f a=""><x path="Bool"/></f></javaEnabled>
		<haxe_doc><![CDATA[Returns a reference to the navigator object, which can be queried for information about the application running the script.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/window.navigator">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<class path="js.html.NodeFilter" params="" file="/usr/lib/haxe/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" line="31" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Value returned by the <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/NodeFilter.acceptNode" class="new">NodeFilter.acceptNode()</a></code>
 method when a node should be accepted.]]></haxe_doc>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" line="37" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Value to be returned by the <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/NodeFilter.acceptNode" class="new">NodeFilter.acceptNode()</a></code>
 method when a node should be rejected. The children of rejected nodes are not visited by the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/NodeIterator">NodeIterator</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/TreeWalker">TreeWalker</a></code>
 object; this value is treated as "skip this node and all its children".]]></haxe_doc>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" line="43" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Value to be returned by <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/NodeFilter.acceptNode" class="new">NodeFilter.acceptNode()</a></code>
 for nodes to be skipped by the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/NodeIterator">NodeIterator</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/TreeWalker">TreeWalker</a></code>
 object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".]]></haxe_doc>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" line="46" static="1">
			<x path="Int"/>
			<haxe_doc>Shows all nodes.</haxe_doc>
		</SHOW_ALL>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" line="53" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows attribute <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Attr">Attr</a></code>
 nodes. This is meaningful only when creating a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/NodeIterator">NodeIterator</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/TreeWalker">TreeWalker</a></code>
 with an <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Attr">Attr</a></code>
 node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.]]></haxe_doc>
		</SHOW_ATTRIBUTE>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" line="57" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/CDATASection">CDATASection</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_CDATA_SECTION>
		<SHOW_COMMENT public="1" get="inline" set="null" line="61" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Comment">Comment</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" line="65" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Document">Document</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" line="69" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DocumentFragment">DocumentFragment</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" line="73" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DocumentType">DocumentType</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_ELEMENT public="1" get="inline" set="null" line="77" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Element">Element</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_ELEMENT>
		<SHOW_ENTITY public="1" get="inline" set="null" line="85" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Entity">Entity</a></code>
&nbsp;nodes. This is meaningful only when creating a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/NodeIterator">NodeIterator</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/TreeWalker">TreeWalker</a></code>
 with an <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Entity">Entity</a></code>
 node as its root; in this case, it means that the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Entity">Entity</a></code>
 node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.]]></haxe_doc>
		</SHOW_ENTITY>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" line="89" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/EntityReference">EntityReference</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_NOTATION public="1" get="inline" set="null" line="97" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Notation">Notation</a></code>
 nodes. This is meaningful only when creating a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/NodeIterator">NodeIterator</a></code>
 or <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/TreeWalker">TreeWalker</a></code>
 with a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Notation">Notation</a></code>
 node as its root; in this case, it means that the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Notation">Notation</a></code>
 node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.]]></haxe_doc>
		</SHOW_NOTATION>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" line="101" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/ProcessingInstruction">ProcessingInstruction</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_TEXT public="1" get="inline" set="null" line="105" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Shows <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Text">Text</a></code>
&nbsp;nodes.]]></haxe_doc>
		</SHOW_TEXT>
		<acceptNode public="1" set="method"><f a="n">
	<c path="js.html.Node"/>
	<x path="Int"/>
</f></acceptNode>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/usr/lib/haxe/std/js/html/NodeIterator.hx" extern="1">
		<expandEntityReferences public="1" set="null"><x path="Bool"/></expandEntityReferences>
		<filter public="1" set="null"><c path="js.html.NodeFilter"/></filter>
		<pointerBeforeReferenceNode public="1" set="null"><x path="Bool"/></pointerBeforeReferenceNode>
		<referenceNode public="1" set="null"><c path="js.html.Node"/></referenceNode>
		<root public="1" set="null"><c path="js.html.Node"/></root>
		<whatToShow public="1" set="null"><x path="Int"/></whatToShow>
		<detach public="1" set="method"><f a=""><x path="Void"/></f></detach>
		<nextNode public="1" set="method"><f a=""><c path="js.html.Node"/></f></nextNode>
		<previousNode public="1" set="method"><f a=""><c path="js.html.Node"/></f></previousNode>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/usr/lib/haxe/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the number of elements in the NodeList.&nbsp;]]></haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item>
		<haxe_doc><![CDATA[NodeList objects are collections of nodes returned by <a title="document.getElementsByTagName" rel="internal" href="https://developer.mozilla.org/en/DOM/document.getElementsByTagName"><code>getElementsByTagName</code></a>, <a title="document.getElementsByTagNameNS" rel="internal" href="https://developer.mozilla.org/en/DOM/document.getElementsByTagNameNS"><code>getElementsByTagNameNS</code></a>, <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Node.childNodes">Node.childNodes</a></code>
, <a title="document.querySelectorAll" rel="internal" href="https://developer.mozilla.org/En/DOM/Document.querySelectorAll">querySelectorAll</a>, <a title="document.getElementsByClassName" rel="internal" href="https://developer.mozilla.org/en/DOM/document.getElementsByClassName"><code>getElementsByClassName</code></a>, etc.NodeList objects are collections of nodes returned by <a title="document.getElementsByTagName" rel="internal" href="https://developer.mozilla.org/en/DOM/document.getElementsByTagName"><code>getElementsByTagName</code></a>, <a title="document.getElementsByTagNameNS" rel="internal" href="https://developer.mozilla.org/en/DOM/document.getElementsByTagNameNS"><code>getElementsByTagNameNS</code></a>, <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Node.childNodes">Node.childNodes</a></code>
, <a title="document.querySelectorAll" rel="internal" href="https://developer.mozilla.org/En/DOM/Document.querySelectorAll">querySelectorAll</a>, <a title="document.getElementsByClassName" rel="internal" href="https://developer.mozilla.org/en/DOM/document.getElementsByClassName"><code>getElementsByClassName</code></a>, etc.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/En/DOM/NodeList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/usr/lib/haxe/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<requestPermission public="1" set="method" static="1"><f a="callback_">
	<t path="js.html.NotificationPermissionCallback"/>
	<x path="Void"/>
</f></requestPermission>
		<dir public="1"><c path="String"/></dir>
		<onclick public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[&nbsp;A function to call when the notification is clicked.]]></haxe_doc>
		</onclick>
		<onclose public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[&nbsp;A function to call when the notification is dismissed.]]></haxe_doc>
		</onclose>
		<ondisplay public="1"><t path="js.html.EventListener"/></ondisplay>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<onshow public="1"><t path="js.html.EventListener"/></onshow>
		<permission public="1" set="null"><c path="String"/></permission>
		<replaceId public="1"><c path="String"/></replaceId>
		<tag public="1"><c path="String"/></tag>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<show public="1" set="method"><f a=""><x path="Void"/></f></show>
		<new public="1" set="method"><f a="title:options">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[<div class="geckoMinversionHeaderTemplate"><p>Mobile Only in Gecko 2.0</p><p>Available only in Firefox Mobile as of Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
</p></div>

<div><p>Non-standard</p></div><p></p>
<p>The notification object, which you create using the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/navigator.mozNotification">navigator.mozNotification</a></code>
&nbsp;object's <code>createNotification()</code>&nbsp;method, is used to configure and display desktop notifications to the user.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/notification">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<class path="js.html.NotificationCenter" params="" file="/usr/lib/haxe/std/js/html/NotificationCenter.hx" extern="1">
		<checkPermission public="1" set="method"><f a=""><x path="Int"/></f></checkPermission>
		<createHTMLNotification public="1" set="method"><f a="url">
	<c path="String"/>
	<c path="js.html.Notification"/>
</f></createHTMLNotification>
		<createNotification public="1" set="method"><f a="iconUrl:title:body">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Notification"/>
</f></createNotification>
		<requestPermission public="1" set="method"><f a="callback_">
	<t path="js.html.VoidCallback"/>
	<x path="Void"/>
</f></requestPermission>
		<meta><m n=":native"><e>"NotificationCenter"</e></m></meta>
	</class>
	<typedef path="js.html.NotificationPermissionCallback" params="" file="/usr/lib/haxe/std/js/html/NotificationPermissionCallback.hx"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.OListElement" params="" file="/usr/lib/haxe/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn't work in all browsers. <div class="note"><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it has been deprecated: the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/ol">&lt;ol&gt;</a></code>
 element should be styled using <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a>. To give a similar effect than the <span>compact</span> attribute, the <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/line-height">line-height</a></code>
 can be used with a value of <span>80%</span>.</div>]]></haxe_doc>
		</compact>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>This Boolean attribute specifies that the items of the item are specified in the reverse order, i.e. that the least important one is listed first. Browsers, by default, numbered the items in the reverse order too.</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[This integer attribute specifies the start value for numbering the individual list items. Although the ordering type of list elements might be Roman numerals, such as XXXI, or letters, the value of start is always represented as a number. To start numbering elements from the letter "C", use <code>&lt;ol start="3"&gt;</code>. <div class="note"><strong>Note</strong>: that attribute was deprecated in HTML4, but reintroduced in HTML5.</div>]]></haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Indicates the numbering type: <ul> <li><span><code>'a'</code></span> indicates lowercase letters,</li> <li><span id="1284454877507S">&nbsp;</span><span><code>'<span id="1284454878023E">&nbsp;</span>A'</code></span> indicates uppercase letters,</li> <li><span><code>'i'</code></span> indicates lowercase Roman numerals,</li> <li><span><code>'I'</code></span> indicates uppercase Roman numerals,</li> <li>and <span><code>'1'</code></span> indicates numbers.</li> </ul> <p>The type set is used for the entire list unless a different 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/li#attr-type">type</a></code>
 attribute is used within an enclosed <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/li">&lt;li&gt;</a></code>
 element.</p> <div class="note"><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it has been deprecated: use the <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
 property instead.</div>]]></haxe_doc>
		</type>
		<haxe_doc><![CDATA[<p>The HTML <em>ordered list</em> element (<code>&lt;ol&gt;</code>) represents an ordered list of items. Typically, ordered-list items are displayed with a preceding numbering, which can be of any form, like numerals, letters or Romans numerals or even simple bullets. This numbered style is not defined in the HTML description of the page, but in its associated CSS, using the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
 property.</p>
<p>There is no limitation to the depth and imbrication of lists defined with the <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 and <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 elements.</p>
<div class="note"><strong>Usage note: </strong> The <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 and <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 both represent a list of items. They differ in the way that, with the <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 element, the order is meaningful. As a rule of thumb to determine which one to use, try changing the order of the list items; if the meaning is changed, the <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 element should be used, else the <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 is adequate.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/ol">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/usr/lib/haxe/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Alignment of the object relative to its context. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-archive">archive</a></code>
&nbsp;HTML attribute, containing a list of archives for resources for this object. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</archive>
		<border public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-border">border</a></code>
&nbsp;HTML attribute, specifying the width of a border around the object. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</border>
		<code public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</code>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-codebase">codebase</a></code>
&nbsp;HTML attribute, specifying the base path to use to resolve relative URIs. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-codetype">codetype</a></code>
&nbsp;HTML attribute, specifying the content type of the data. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</codeType>
		<contentDocument public="1" set="null">
			<c path="js.html.Document"/>
			<haxe_doc>The active document of the object element's nested browsing context, if any; otherwise null.</haxe_doc>
		</contentDocument>
		<data public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-data">data</a></code>
 HTML&nbsp;attribute, specifying the address of a resource's data.]]></haxe_doc>
		</data>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-declare">declare</a></code>
 HTML&nbsp;attribute, indicating that this is a declaration, not an instantiation, of the object. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</declare>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>The object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<height public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the {{htmlattrxref("height", "object)}}&nbsp;HTML attribute, specifying the displayed height of the resource in CSS pixels.]]></haxe_doc>
		</height>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Horizontal space in pixels around the control. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</hspace>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-name">name</a></code>
&nbsp;HTML attribute, specifying the name of the object (
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span>, or of a browsing context (
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</name>
		<standby public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-standby">standby</a></code>
 HTML&nbsp;attribute, specifying a message to display while the object loads. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</standby>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the {{htmlattrxref("type", "object)}}&nbsp;HTML attribute, specifying the MIME type of the resource.]]></haxe_doc>
		</type>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the {{htmlattrxref("usemap", "object)}}&nbsp;HTML attribute, specifying a {{HTMLElement("map")}} element to use.]]></haxe_doc>
		</useMap>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>The validity states that this element is in.</haxe_doc>
		</validity>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Horizontal space in pixels around the control. 

<span title="">Obsolete</span> in 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>.]]></haxe_doc>
		</vspace>
		<width public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object#attr-width">width</a></code>
&nbsp;HTML attribute, specifying the displayed width of the resource in CSS pixels.]]></haxe_doc>
		</width>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Indicates whether the element is a candidate for constraint validation. Always false for <code>object</code> objects.]]></haxe_doc>
		</willValidate>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.svg.Document"/></f></getSVGDocument>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[DOM <code>Object</code> objects expose the <a title="http://dev.w3.org/html5/spec/the-iframe-element.html#htmlobjectelement" class=" external" rel="external nofollow" href="http://dev.w3.org/html5/spec/the-iframe-element.html#htmlobjectelement" target="_blank">HTMLObjectElement</a> (or <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external nofollow" href="http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html#ID-9893177" title="http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html#ID-9893177" target="_blank">HTMLObjectElement</a>) interface, which provides special properties and methods (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of Object element, representing external resources.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLObjectElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<class path="js.html.OptGroupElement" params="" file="/usr/lib/haxe/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won't received any browsing events, like mouse clicks or focus-related ones.</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[In a web form, the HTML <em>optgroup</em> element (&lt;optgroup&gt;) creates a grouping of options within a <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select">&lt;select&gt;</a></code>
 element.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/optgroup">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/usr/lib/haxe/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<defaultSelected public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option#attr-selected">selected</a></code>
 HTML attribute. which indicates whether the option is selected by default.]]></haxe_doc>
		</defaultSelected>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option#attr-disabled">disabled</a></code>
 HTML&nbsp;attribute, which indicates that the option is unavailable to be selected. An option can also be disabled if it is a child of an <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/optgroup">&lt;optgroup&gt;</a></code>
 element that is disabled.]]></haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[If the option is a descendent of a <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select">&lt;select&gt;</a></code>
 element, then this property has the same value as the <code>form</code> property of the corresponding {{DomXref("HTMLSelectElement") object; otherwise, it is null.]]></haxe_doc>
		</form>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, the value is 0.</haxe_doc>
		</index>
		<label public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option#attr-label">label</a></code>
 HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content.]]></haxe_doc>
		</label>
		<selected public="1">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the option is selected.</haxe_doc>
		</selected>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Contains the text content of the element. Setter throws DOMException.</haxe_doc>
		</text>
		<value public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option#attr-value">value</a></code>
 HTML attribute, if it exists; otherwise reflects value of the <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/textContent" class="new">textContent</a></code>
&nbsp;IDL&nbsp;attribute.]]></haxe_doc>
		</value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[<p>DOM&nbsp;<em>option</em> elements elements share all of the properties and methods of other HTML elements described in the <a title="en/DOM/element" rel="internal" href="/api/js/html/Element">element</a> section. They also have the specialized interface <a title="http://dev.w3.org/html5/spec/the-button-element.html#htmloptionelement" class=" external" rel="external" href="http://dev.w3.org/html5/spec/the-button-element.html#htmloptionelement" target="_blank">HTMLOptionElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class="external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-70901257" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-70901257" target="_blank">HTMLOptionElement</a>).</p>
<p>No methods are defined on this interface.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLOptionElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<class path="js.html.OutputElement" params="" file="/usr/lib/haxe/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>The default value of the element, initially the empty string.</haxe_doc>
		</defaultValue>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[Indicates the control's form owner, reflecting the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/output#attr-form">form</a></code>
&nbsp;HTML&nbsp;attribute if it is defined.]]></haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="js.html.DOMSettableTokenList"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/output#attr-for">for</a></code>
 HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated <strong>value</strong>.]]></haxe_doc>
		</htmlFor>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A list of label elements associated with this output element.</haxe_doc>
		</labels>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/output#attr-name">name</a></code>
 HTML attribute, containing the name for the control that is submitted with form data.]]></haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[Must be the string <code>output</code>.]]></haxe_doc>
		</type>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>The validity states that this element is in.</haxe_doc>
		</validity>
		<value public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The value of the contents of the elements. Behaves like the <strong><a title="En/DOM/Node.textContent" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.textContent">textContent</a></strong> property.]]></haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[<p>      in Gecko 2.0. Indicates whether the element is a candidate for constraint validation. It is false if any conditions bar it from constraint validation. (See <a rel="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=604673" class="external" title="">
bug 604673</a>
.)</p> <p>The standard behavior is to always return false because <code>output</code> objects are never candidates for constraint validation.</p>]]></haxe_doc>
		</willValidate>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.PagePopupController" params="" file="/usr/lib/haxe/std/js/html/PagePopupController.hx" extern="1">
		<formatMonth public="1" set="method"><f a="year:zeroBaseMonth">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></formatMonth>
		<localizeNumberString public="1" set="method"><f a="numberString">
	<c path="String"/>
	<c path="String"/>
</f></localizeNumberString>
		<setValueAndClosePopup public="1" set="method"><f a="numberValue:stringValue">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></setValueAndClosePopup>
		<meta><m n=":native"><e>"PagePopupController"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/usr/lib/haxe/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Enumerated attribute indicating alignment of the element's contents with respect to the surrounding context.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[DOM p (paragraph) objects expose the <a title="http://www.w3.org/TR/html5/grouping-content.html#htmlparagraphelement" class=" external" rel="external nofollow" href="http://www.w3.org/TR/html5/grouping-content.html#htmlparagraphelement" target="_blank">HTMLParagraphElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external nofollow" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-84675076" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-84675076" target="_blank"><code>HTMLParagraphElement</code></a>) interface, which provides special properties (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating div elements. In 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>, this interface inherits from HTMLElement, but defines no additional members.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Document_Object_Model_(DOM)/HTMLParagraphElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/usr/lib/haxe/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Name of the parameter.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Only used if the <code>valuetype</code> is set to "ref". Specifies the type of values found at the URI specified by value.]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Value of the parameter.</haxe_doc>
		</value>
		<valueType public="1"><c path="String"/></valueType>
		<haxe_doc><![CDATA[<strong>Parameter </strong>element which defines parameters for <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object">&lt;object&gt;</a></code>
.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/param">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/usr/lib/haxe/std/js/html/Performance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<memory public="1" set="null"><c path="js.html.MemoryInfo"/></memory>
		<navigation public="1" set="null"><c path="js.html.PerformanceNavigation"/></navigation>
		<timing public="1" set="null"><c path="js.html.PerformanceTiming"/></timing>
		<now public="1" set="method"><f a=""><x path="Float"/></f></now>
		<haxe_doc><![CDATA[The articles linked to from here will help you improve performance, whether you're developing core Mozilla code or an add-on.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Performance">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/usr/lib/haxe/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></TYPE_BACK_FORWARD>
		<TYPE_NAVIGATE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></TYPE_RELOAD>
		<TYPE_RESERVED public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></TYPE_RESERVED>
		<redirectCount public="1" set="null"><x path="Int"/></redirectCount>
		<type public="1" set="null"><x path="Int"/></type>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/usr/lib/haxe/std/js/html/PerformanceTiming.hx" extern="1">
		<connectEnd public="1" set="null"><x path="Int"/></connectEnd>
		<connectStart public="1" set="null"><x path="Int"/></connectStart>
		<domComplete public="1" set="null"><x path="Int"/></domComplete>
		<domContentLoadedEventEnd public="1" set="null"><x path="Int"/></domContentLoadedEventEnd>
		<domContentLoadedEventStart public="1" set="null"><x path="Int"/></domContentLoadedEventStart>
		<domInteractive public="1" set="null"><x path="Int"/></domInteractive>
		<domLoading public="1" set="null"><x path="Int"/></domLoading>
		<domainLookupEnd public="1" set="null"><x path="Int"/></domainLookupEnd>
		<domainLookupStart public="1" set="null"><x path="Int"/></domainLookupStart>
		<fetchStart public="1" set="null"><x path="Int"/></fetchStart>
		<loadEventEnd public="1" set="null"><x path="Int"/></loadEventEnd>
		<loadEventStart public="1" set="null"><x path="Int"/></loadEventStart>
		<navigationStart public="1" set="null"><x path="Int"/></navigationStart>
		<redirectEnd public="1" set="null"><x path="Int"/></redirectEnd>
		<redirectStart public="1" set="null"><x path="Int"/></redirectStart>
		<requestStart public="1" set="null"><x path="Int"/></requestStart>
		<responseEnd public="1" set="null"><x path="Int"/></responseEnd>
		<responseStart public="1" set="null"><x path="Int"/></responseStart>
		<secureConnectionStart public="1" set="null"><x path="Int"/></secureConnectionStart>
		<unloadEventEnd public="1" set="null"><x path="Int"/></unloadEventEnd>
		<unloadEventStart public="1" set="null"><x path="Int"/></unloadEventStart>
		<meta><m n=":native"><e>"PerformanceTiming"</e></m></meta>
	</class>
	<class path="js.html.Point" params="" file="/usr/lib/haxe/std/js/html/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<new public="1" set="method">
			<f a="?arg0:?arg1">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<p>Creates a new <code>Point</code> object.</p>
<pre>let p = new Point(x, y);
</pre>
<p>The new point, <code>p</code>, has the specified X&nbsp;and Y&nbsp;coordinates.</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[The <code>Point</code> class offers methods for performing common geometry operations on two dimensional points.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_code_modules/Geometry.jsm/Point">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Point"</e></m></meta>
	</class>
	<typedef path="js.html.PositionCallback" params="" file="/usr/lib/haxe/std/js/html/PositionCallback.hx"><f a="">
	<c path="js.html.Geoposition"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.PositionError" params="" file="/usr/lib/haxe/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></TIMEOUT>
		<code public="1" set="null"><x path="Int"/></code>
		<message public="1" set="null"><c path="String"/></message>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionErrorCallback" params="" file="/usr/lib/haxe/std/js/html/PositionErrorCallback.hx"><f a="">
	<c path="js.html.PositionError"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.PreElement" params="" file="/usr/lib/haxe/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1"><x path="Int"/></width>
		<wrap public="1"><x path="Bool"/></wrap>
		<haxe_doc><![CDATA[This element represents preformatted text. Text within this element is typically displayed in a non-proportional font exactly as it is laid out in the file. Whitespaces inside this element are displayed as typed.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/pre">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/usr/lib/haxe/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</data>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<target public="1" set="null"><c path="String"/></target>
		<haxe_doc><![CDATA[<p>A processing instruction provides an opportunity for application-specific instructions to be embedded within XML and which can be ignored by XML processors which do not support processing their instructions (outside of their having a place in the DOM).</p>
<p>A Processing instruction is distinct from a <a title="en/XML/XML_Declaration" rel="internal" href="https://developer.mozilla.org/en/XML/XML_Declaration" class="new ">XML Declaration</a> which is used for other information about the document such as encoding and which appear (if it does) as the first item in the document.</p>
<p>User-defined processing instructions cannot begin with 'xml', as these are reserved (e.g., as used in &lt;?<a title="en/XML/xml-stylesheet" rel="internal" href="https://developer.mozilla.org/en/XML/xml-stylesheet" class="new ">xml-stylesheet</a>&nbsp;?&gt;).</p>
<p>Also inherits methods and properties from <a class="internal" title="En/DOM/Node" rel="internal" href="/api/js/html/Node"><code>Node</code></a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/ProcessingInstruction">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/usr/lib/haxe/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<max public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[This attribute describes how much work the task indicated by the <code>progress</code> element requires. Setter throws DOMException.]]></haxe_doc>
		</max>
		<position public="1" set="null"><x path="Float"/></position>
		<value public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<dl><dd>This attribute specifies how much of the task that has been completed. If there is no <code>value</code> attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take.</dd>
</dl>
<p>You can use the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/orient">orient</a></code>
 property to specify whether the progress bar should be rendered horizontally (the default) or vertically. The <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/%3Aindeterminate">:indeterminate</a></code>
 pseudo-class can be used to match against indeterminate progress bars.</p> Setter throws DOMException.]]></haxe_doc>
		</value>
		<haxe_doc><![CDATA[The HTML <em>progress</em> (<code>&lt;progress&gt;</code>) element is used to view the completion progress of a task. While the specifics of how it's displayed is left up to the browser developer, it's typically displayed as a progress bar.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/progress">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/usr/lib/haxe/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/blockquote#attr-cite">cite</a></code>
 HTML attribute, containing a URL for the source of the quotation.]]></haxe_doc>
		</cite>
		<haxe_doc><![CDATA[DOM quote objects expose the <a class=" external" title="http://www.w3.org/TR/html5/grouping-content.html#htmlquoteelement" rel="external" href="http://www.w3.org/TR/html5/grouping-content.html#htmlquoteelement" target="_blank">HTMLQuoteElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-70319763" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-70319763" target="_blank"><code>HTMLQuoteElement</code></a>) interface, which provides special properties&nbsp; (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating quote elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLQuoteElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/usr/lib/haxe/std/js/html/Range.hx" extern="1">
		<END_TO_END public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></END_TO_END>
		<END_TO_START public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></END_TO_START>
		<NODE_AFTER public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></NODE_AFTER>
		<NODE_BEFORE public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></NODE_BEFORE>
		<NODE_BEFORE_AND_AFTER public="1" get="inline" set="null" line="44" static="1"><x path="Int"/></NODE_BEFORE_AND_AFTER>
		<NODE_INSIDE public="1" get="inline" set="null" line="46" static="1"><x path="Int"/></NODE_INSIDE>
		<START_TO_END public="1" get="inline" set="null" line="48" static="1"><x path="Int"/></START_TO_END>
		<START_TO_START public="1" get="inline" set="null" line="50" static="1"><x path="Int"/></START_TO_START>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Returns a&nbsp;<code>boolean</code>&nbsp;indicating whether the range's start and end points are at the same position. Getter throws DOMException.]]></haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc><![CDATA[Returns the deepest&nbsp;<code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Node">Node</a></code>
&nbsp;that contains the startContainer and endContainer Nodes. Getter throws DOMException.]]></haxe_doc>
		</commonAncestorContainer>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc><![CDATA[Returns the&nbsp;<code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Node">Node</a></code>
&nbsp;within which the Range ends. Getter throws DOMException.]]></haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the endContainer the Range ends. Getter throws DOMException.</haxe_doc>
		</endOffset>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc><![CDATA[Returns the&nbsp;<code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Node">Node</a></code>
&nbsp;within which the Range starts. Getter throws DOMException.]]></haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the startContainer the Range starts. Getter throws DOMException.</haxe_doc>
		</startOffset>
		<cloneContents public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></cloneContents>
		<cloneRange public="1" set="method"><f a=""><c path="js.html.Range"/></f></cloneRange>
		<collapse public="1" set="method"><f a="toStart">
	<x path="Bool"/>
	<x path="Void"/>
</f></collapse>
		<compareBoundaryPoints public="1" set="method"><f a="how:sourceRange">
	<x path="Int"/>
	<c path="js.html.Range"/>
	<x path="Int"/>
</f></compareBoundaryPoints>
		<compareNode public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Int"/>
</f></compareNode>
		<comparePoint public="1" set="method"><f a="refNode:offset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Int"/>
</f></comparePoint>
		<createContextualFragment public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.html.DocumentFragment"/>
</f></createContextualFragment>
		<deleteContents public="1" set="method"><f a=""><x path="Void"/></f></deleteContents>
		<detach public="1" set="method"><f a=""><x path="Void"/></f></detach>
		<expand public="1" set="method"><f a="unit">
	<c path="String"/>
	<x path="Void"/>
</f></expand>
		<extractContents public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></extractContents>
		<getBoundingClientRect public="1" set="method"><f a=""><c path="js.html.ClientRect"/></f></getBoundingClientRect>
		<getClientRects public="1" set="method"><f a=""><c path="js.html.ClientRectList"/></f></getClientRects>
		<insertNode public="1" set="method"><f a="newNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></insertNode>
		<intersectsNode public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Bool"/>
</f></intersectsNode>
		<isPointInRange public="1" set="method"><f a="refNode:offset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isPointInRange>
		<selectNode public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></selectNode>
		<selectNodeContents public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></selectNodeContents>
		<setEnd public="1" set="method"><f a="refNode:offset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setEnd>
		<setEndAfter public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></setEndAfter>
		<setEndBefore public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></setEndBefore>
		<setStart public="1" set="method"><f a="refNode:offset">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setStart>
		<setStartAfter public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></setStartAfter>
		<setStartBefore public="1" set="method"><f a="refNode">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></setStartBefore>
		<surroundContents public="1" set="method"><f a="newParent">
	<c path="js.html.Node"/>
	<x path="Void"/>
</f></surroundContents>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<haxe_doc><![CDATA[<p>The <code>Range</code> object represents a fragment of a document that can contain nodes and parts of text nodes in a given document.</p>
<p>A range can be created using the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Document.createRange">Document.createRange</a></code>
&nbsp;method of the&nbsp;<code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Document">Document</a></code>
&nbsp;object. Range objects can also be retrieved by using the <code><a rel="internal" href="https://developer.mozilla.org/Article_not_found?uri=en/DOM/Selection.getRangeAt" class="new">Selection.getRangeAt</a></code>
&nbsp;method of the&nbsp;<code><a rel="custom" href="/api/js/html/DOMSelection">Selection</a></code>
&nbsp;object.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/range">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<typedef path="js.html.RequestAnimationFrameCallback" params="" file="/usr/lib/haxe/std/js/html/RequestAnimationFrameCallback.hx"><f a="">
	<x path="Float"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.Screen" params="" file="/usr/lib/haxe/std/js/html/Screen.hx" extern="1">
		<availHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.</haxe_doc>
		</availHeight>
		<availLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the first available pixel available from the left side of the screen.</haxe_doc>
		</availLeft>
		<availTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.</haxe_doc>
		</availTop>
		<availWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of horizontal space in pixels available to the window.</haxe_doc>
		</availWidth>
		<colorDepth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the color depth of the screen.</haxe_doc>
		</colorDepth>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the height of the screen in pixels.</haxe_doc>
		</height>
		<pixelDepth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Gets the bit depth of the screen.</haxe_doc>
		</pixelDepth>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the width of the screen.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[Returns a reference to the screen object associated with the window.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/window.screen">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/usr/lib/haxe/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<async public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Set this Boolean attribute to indicate that the browser should, if possible, execute the script asynchronously. It has no effect on inline scripts (i.e., scripts that don't have the <strong>src</strong> attribute). In older browsers that don't support the <strong>async</strong> attribute, parser-inserted scripts block the parser; script-inserted scripts execute asynchronously in IE and WebKit, but synchronously in Opera and pre-4.0 Firefox. In Firefox 4.0, the <code>async</code> DOM&nbsp;property defaults to <code>true</code> for script-created scripts, so the default behavior matches the behavior of IE&nbsp;and WebKit. To request script-inserted external scripts be executed in the insertion order in browsers where the <code>document.createElement("script").async</code> evaluates to <code>true</code> (such as Firefox 4.0), set <code>.async=false</code> on the scripts you want to maintain order. Never call <code>document.write()</code> from an <code>async</code> script. In Gecko 1.9.2, calling <code>document.write()</code> has an unpredictable effect. In Gecko 2.0, calling <code>document.write()</code> from an <code>async</code> script has no effect (other than printing a warning to the error console).]]></haxe_doc>
		</async>
		<charset public="1"><c path="String"/></charset>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<defer public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed. Since this feature hasn't yet been implemented by all other major browsers, authors should not assume that the script’s execution will actually be deferred. Never call <code>document.write()</code> from a <code>defer</code> script (since Gecko 1.9.2, this will blow away the document). The <code>defer</code> attribute shouldn't be used on scripts that don't have the <code>src</code> attribute. Since Gecko 1.9.2, the <code>defer</code> attribute is ignored on scripts that don't have the <code>src</code> attribute. However, in Gecko 1.9.1 even inline scripts are deferred if the <code>defer</code> attribute is set.]]></haxe_doc>
		</defer>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute specifies the <abbr>URI</abbr> of an external script; this can be used as an alternative to embedding a script directly within a document. <code>script</code> elements with an <code>src</code> attribute specified should not have a script embedded within its tags.]]></haxe_doc>
		</src>
		<text public="1"><c path="String"/></text>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute identifies the scripting language of code embedded within a <code>script</code> element or referenced via the element’s <code>src</code> attribute. This is specified as a <abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr> type; examples of supported <abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr> types include <code>text/javascript</code>, <code>text/ecmascript</code>, <code>application/javascript</code>, and <code>application/ecmascript</code>. If this attribute is absent, the script is treated as JavaScript.]]></haxe_doc>
		</type>
		<haxe_doc><![CDATA[<p>The <code>script</code> element is used to embed or reference an executable script within an <abbr>HTML</abbr> or <abbr>XHTML</abbr> document.</p>
<p>Scripts without <code>async</code> or <code>defer</code> attributes are fetched and executed immediately, before the browser continues to parse the page.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/En/HTML/Element/Script">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<class path="js.html.ScriptProfile" params="" file="/usr/lib/haxe/std/js/html/ScriptProfile.hx" extern="1">
		<head public="1" set="null"><c path="js.html.ScriptProfileNode"/></head>
		<title public="1" set="null"><c path="String"/></title>
		<uid public="1" set="null"><x path="Int"/></uid>
		<meta><m n=":native"><e>"ScriptProfile"</e></m></meta>
	</class>
	<class path="js.html.ScriptProfileNode" params="" file="/usr/lib/haxe/std/js/html/ScriptProfileNode.hx" extern="1">
		<callUID public="1" set="null"><x path="Int"/></callUID>
		<functionName public="1" set="null"><c path="String"/></functionName>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<numberOfCalls public="1" set="null"><x path="Int"/></numberOfCalls>
		<selfTime public="1" set="null"><x path="Float"/></selfTime>
		<totalTime public="1" set="null"><x path="Float"/></totalTime>
		<url public="1" set="null"><c path="String"/></url>
		<visible public="1" set="null"><x path="Bool"/></visible>
		<children public="1" set="method"><f a=""><c path="Array"><c path="js.html.ScriptProfileNode"/></c></f></children>
		<meta><m n=":native"><e>"ScriptProfileNode"</e></m></meta>
	</class>
	<class path="js.html.SelectElement" params="" file="/usr/lib/haxe/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select#attr-autofocus">autofocus</a></code>
 HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> 
<span title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Requires Gecko 2.0</span>]]></haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select#attr-disabled">disabled</a></code>
 HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.]]></haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[The form that this element is associated with. If this element is a descendant of a form element, then this attribute is the ID of that form element. If the element is not a descendant of a form element, then: <ul> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> The attribute can be the ID of any form element in the same document.</li> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> The attribute is null.</li> </ul> <strong>Read only.</strong>]]></haxe_doc>
		</form>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A list of label elements associated with this select element.</haxe_doc>
		</labels>
		<length public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option">&lt;option&gt;</a></code>
 elements in this <code>select</code> element. Setter throws DOMException.]]></haxe_doc>
		</length>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select#attr-multiple">multiple</a></code>
 HTML attribute, whichindicates whether multiple items can be selected.]]></haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select#attr-name">name</a></code>
 HTML attribute, containing the name of this control used by servers and DOM search functions.]]></haxe_doc>
		</name>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc><![CDATA[The set of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option">&lt;option&gt;</a></code>
 elements contained by this element. <strong>Read only.</strong>]]></haxe_doc>
		</options>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select#attr-required">required</a></code>
 HTML attribute, which indicates whether the user is required to select a value before submitting the form. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> 
<span title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Requires Gecko 2.0</span>]]></haxe_doc>
		</required>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[The index of the first selected <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/option">&lt;option&gt;</a></code>
 element.]]></haxe_doc>
		</selectedIndex>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc><![CDATA[The set of options that are selected. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span>]]></haxe_doc>
		</selectedOptions>
		<size public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/select#attr-size">size</a></code>
 HTML attribute, which contains the number of visible items in the control. The default is 1, 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> unless <strong>multiple</strong> is true, in which case it is 4.]]></haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The form control's type. When <strong>multiple</strong> is true, it returns <code>select-multiple</code>; otherwise, it returns <code>select-one</code>.<strong>Read only.</strong>]]></haxe_doc>
		</type>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.<strong>Read only.</strong> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> 
<span title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Requires Gecko 2.0</span>]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc><![CDATA[The validity states that this control is in. <strong>Read only.</strong> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> 
<span title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Requires Gecko 2.0</span>]]></haxe_doc>
		</validity>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The value of this form control, that is, of the first selected option.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation. <strong>Read only.</strong> 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> 
<span title="(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)
">Requires Gecko 2.0</span>]]></haxe_doc>
		</willValidate>
		<add public="1" set="method"><f a="element:before">
	<c path="js.html.Element"/>
	<c path="js.html.Element"/>
	<x path="Void"/>
</f></add>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Node"/>
</f></namedItem>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[<code>DOM select</code> elements share all of the properties and methods of other HTML elements described in the <code><a rel="custom" href="/api/js/html/Element">element</a></code>
 section. They also have the specialized interface <a class="external" title="http://dev.w3.org/html5/spec/the-button-element.html#htmlselectelement" rel="external" href="http://dev.w3.org/html5/spec/the-button-element.html#htmlselectelement" target="_blank">HTMLSelectElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class="external" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-94282980" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-94282980" target="_blank">HTMLSelectElement</a>).<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLSelectElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.ShadowElement" params="" file="/usr/lib/haxe/std/js/html/ShadowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<resetStyleInheritance public="1"><x path="Bool"/></resetStyleInheritance>
		<meta><m n=":native"><e>"HTMLShadowElement"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/usr/lib/haxe/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<media public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/source#attr-media">media</a></code>
 HTML&nbsp;attribute, containing the intended type of the media resource.]]></haxe_doc>
		</media>
		<src public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/source#attr-src">src</a></code>
 HTML&nbsp;attribute, containing the URL&nbsp;for the media resource.]]></haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/source#attr-type">type</a></code>
 HTML&nbsp;attribute, containing the type of the media resource.]]></haxe_doc>
		</type>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/usr/lib/haxe/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[This HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the <strong>class</strong> or <strong>id</strong> attributes), or because they share attribute values, such as <strong>lang</strong>. It should be used only when no other semantic element is appropriate. &lt;span&gt; is very much like a <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/div">&lt;div&gt;</a></code>
 element, but <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/div">&lt;div&gt;</a></code>
 is a block-level element whereas a &lt;span&gt; is an inline element.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/span">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/usr/lib/haxe/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Getter throws DOMException.</haxe_doc>
		</length>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getItem public="1" set="method"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getItem>
		<key public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></key>
		<removeItem public="1" set="method"><f a="key">
	<c path="String"/>
	<x path="Void"/>
</f></removeItem>
		<setItem public="1" set="method"><f a="key:data">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setItem>
		<haxe_doc><![CDATA[<p><strong>Storage</strong> is a <a class="external" rel="external" href="http://www.sqlite.org/" title="http://www.sqlite.org/" target="_blank">SQLite</a> database API. It is available to trusted callers, meaning extensions and Firefox components only.</p>
<p>The API is currently "unfrozen", which means it is subject to change at any time; in fact, it has changed somewhat with each release of Firefox since it was introduced, and will likely continue to do so for a while.</p>
<div class="note"><strong>Note:</strong> Storage is not the same as the <a title="en/DOM/Storage" rel="internal" href="https://developer.mozilla.org/en/DOM/Storage">DOM:Storage</a> feature which can be used by web pages to store persistent data or the <a title="en/Session_store_API" rel="internal" href="https://developer.mozilla.org/en/Session_store_API">Session store API</a> (an <a title="en/XPCOM" rel="internal" href="https://developer.mozilla.org/en/XPCOM">XPCOM</a> storage utility for use by extensions).</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Storage">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<class path="js.html.StorageInfo" params="" file="/usr/lib/haxe/std/js/html/StorageInfo.hx" extern="1">
		<PERSISTENT public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></PERSISTENT>
		<TEMPORARY public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></TEMPORARY>
		<queryUsageAndQuota public="1" set="method"><f a="storageType:?usageCallback:?errorCallback">
	<x path="Int"/>
	<t path="js.html.StorageInfoUsageCallback"/>
	<t path="js.html.StorageInfoErrorCallback"/>
	<x path="Void"/>
</f></queryUsageAndQuota>
		<requestQuota public="1" set="method"><f a="storageType:newQuotaInBytes:?quotaCallback:?errorCallback">
	<x path="Int"/>
	<x path="Int"/>
	<t path="js.html.StorageInfoQuotaCallback"/>
	<t path="js.html.StorageInfoErrorCallback"/>
	<x path="Void"/>
</f></requestQuota>
		<meta><m n=":native"><e>"StorageInfo"</e></m></meta>
	</class>
	<typedef path="js.html.StorageInfoErrorCallback" params="" file="/usr/lib/haxe/std/js/html/StorageInfoErrorCallback.hx"><f a="">
	<c path="js.html.DOMCoreException"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.StorageInfoQuotaCallback" params="" file="/usr/lib/haxe/std/js/html/StorageInfoQuotaCallback.hx"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.StorageInfoUsageCallback" params="" file="/usr/lib/haxe/std/js/html/StorageInfoUsageCallback.hx"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.StringCallback" params="" file="/usr/lib/haxe/std/js/html/StringCallback.hx"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.StyleElement" params="" file="/usr/lib/haxe/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Returns true if the stylesheet is disabled, and false if not</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Specifies the intended destination medium for style information.</haxe_doc>
		</media>
		<scoped public="1"><x path="Bool"/></scoped>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Returns the type of style being applied by this statement.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[See <a title="en/DOM/Using_dynamic_styling_information" rel="internal" href="https://developer.mozilla.org/en/DOM/Using_dynamic_styling_information">Using dynamic styling information</a> for an overview of the objects used to manipulate specified CSS properties using the DOM.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLStyleElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleMedia" params="" file="/usr/lib/haxe/std/js/html/StyleMedia.hx" extern="1">
		<type public="1" set="null"><c path="String"/></type>
		<matchMedium public="1" set="method"><f a="mediaquery">
	<c path="String"/>
	<x path="Bool"/>
</f></matchMedium>
		<meta><m n=":native"><e>"StyleMedia"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/usr/lib/haxe/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/usr/lib/haxe/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[DOM table caption elements expose the <a title="http://www.w3.org/TR/html5/tabular-data.html#htmltablecaptionelement" class=" external" rel="external nofollow" href="http://www.w3.org/TR/html5/tabular-data.html#htmltablecaptionelement" target="_blank">HTMLTableCaptionElement</a> (or <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <a class=" external" rel="external nofollow" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-12035137" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-12035137" target="_blank"><code>HTMLTableCaptionElement</code></a>) interface, which provides special properties (beyond the regular <a rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating definition list elements. In <span><a rel="custom nofollow" href="https://developer.mozilla.org/en/HTML/HTML5">HTML 5</a></span>, this interface inherits from HTMLElement, but defines no additional members.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLTableCaptionElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/usr/lib/haxe/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<abbr public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute contains a short abbreviated description of the content of the cell. Some user-agents, such as speech readers, may present this description before the content itself. <div class="note"><strong>Note: </strong>Do not use this attribute as it is obsolete in the latest standard: instead either consider starting the cell content by an independent abbreviated content itself or use the abbreviated content as the cell content and use the long content as the description of the cell by putting it in the <strong>title</strong> attribute.</div>]]></haxe_doc>
		</abbr>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are: <ul> <li><span>left</span>, aligning the content to the left of the cell</li> <li><span>center</span>, centering the content in the cell</li> <li><span>right</span>, aligning the content to the right of the cell</li> <li><span>justify</span>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><span>char</span>, aligning the textual content on a special character with a minimal offset, defined by the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/td#attr-char">char</a></code>
 and 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/td#attr-charoff">charoff</a></code>
 attributes 
<span class="unimplementedInlineTemplate">Unimplemented (see<a rel="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=2212" class="external" title="">
bug 2212</a>
)</span>
.</li> </ul> <p>If this attribute is not set,&nbsp; the <span>left</span> value is assumed.</p> <div class="note"><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard. <ul> <li>To achieve the same effect as the <span>left</span>, <span>center</span>, <span>right</span> or <span>justify</span> values, use the CSS <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-align">text-align</a></code>
 property on it.</li> <li>To achieve the same effect as the <span>char</span> value, in CSS3, you can use the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/td#attr-char">char</a></code>
 as the value of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-align">text-align</a></code>
 property 
<span class="unimplementedInlineTemplate">Unimplemented</span>
.</li> </ul> </div>]]></haxe_doc>
		</align>
		<axis public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attribute contains a list of space-separated strings. Each string is the ID of a group of cells that this header applies to. <div class="note"><strong>Note: </strong>Do not use this attribute as it is obsolete in the latest standard: instead use the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/td#attr-scope">scope</a></code>
 attribute.</div>]]></haxe_doc>
		</axis>
		<bgColor public="1"><c path="String"/></bgColor>
		<cellIndex public="1" set="null"><x path="Int"/></cellIndex>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<colSpan public="1"><x path="Int"/></colSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This attributes a list of space-separated strings, each corresponding to the <strong>id</strong> attribute of the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/th">&lt;th&gt;</a></code>
 elements that applies to this element.]]></haxe_doc>
		</headers>
		<height public="1"><c path="String"/></height>
		<noWrap public="1"><x path="Bool"/></noWrap>
		<rowSpan public="1"><x path="Int"/></rowSpan>
		<scope public="1"><c path="String"/></scope>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The <em>HTML Table Cell Element</em> (<code>&lt;td&gt;</code>) defines a cell that content data.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/td">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/usr/lib/haxe/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Indicates the horizontal alignment of the cell data in the column.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Alignment character for cell data.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Offset for the alignment character.</haxe_doc>
		</chOff>
		<span public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/col#attr-span">span</a></code>
 HTML&nbsp;attribute, indicating the number of columns to apply this object's attributes to. Must be a positive integer.]]></haxe_doc>
		</span>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Indicates the vertical alignment of the cell data in the column.</haxe_doc>
		</vAlign>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Default column width.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[DOM table column objects (which may correspond to <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/col">&lt;col&gt;</a></code>
&nbsp;or <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/colgroup">&lt;colgroup&gt;</a></code>
 HTML elements) expose the <a target="_blank" href="http://www.w3.org/TR/html5/tabular-data.html#htmltablecolelement" rel="external nofollow" class=" external" title="http://www.w3.org/TR/html5/tabular-data.html#htmltablecolelement">HTMLTableColElement</a> (or <span><a href="https://developer.mozilla.org/en/HTML" rel="custom nofollow">HTML 4</a></span> <a target="_blank" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-84150186" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-84150186" rel="external nofollow" class=" external"><code>HTMLTableColElement</code></a>) interface, which provides special properties (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object interface they also have available to them by inheritance) for manipulating table column elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLTableColElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/usr/lib/haxe/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>align</b> gets/sets the alignment of the table.]]></haxe_doc>
		</align>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>bgColor</b> gets/sets the background color of the table.]]></haxe_doc>
		</bgColor>
		<border public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>border</b> gets/sets the table border.]]></haxe_doc>
		</border>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc><![CDATA[<b>caption</b> returns the table caption.
 Setter throws DOMException.]]></haxe_doc>
		</caption>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>cellPadding</b> gets/sets the cell padding.]]></haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>cellSpacing</b> gets/sets the spacing around the table.]]></haxe_doc>
		</cellSpacing>
		<frame public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>frame</b> specifies which sides of the table have borders.]]></haxe_doc>
		</frame>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc><![CDATA[<b>rows</b> returns the rows in the table.]]></haxe_doc>
		</rows>
		<rules public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>rules</b> specifies which interior borders are visible.]]></haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>summary</b> gets/sets the table summary.]]></haxe_doc>
		</summary>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc><![CDATA[<b>tBodies</b> returns the table bodies.]]></haxe_doc>
		</tBodies>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc><![CDATA[<b>tFoot</b> returns the table footer.
 Setter throws DOMException.]]></haxe_doc>
		</tFoot>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc><![CDATA[<b>tHead</b> returns the table head.
 Setter throws DOMException.]]></haxe_doc>
		</tHead>
		<width public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<b>width</b> gets/sets the width of the table.]]></haxe_doc>
		</width>
		<createCaption public="1" set="method"><f a=""><c path="js.html.Element"/></f></createCaption>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<createTFoot public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTFoot>
		<createTHead public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTHead>
		<deleteCaption public="1" set="method"><f a=""><x path="Void"/></f></deleteCaption>
		<deleteRow public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteRow>
		<deleteTFoot public="1" set="method"><f a=""><x path="Void"/></f></deleteTFoot>
		<deleteTHead public="1" set="method"><f a=""><x path="Void"/></f></deleteTHead>
		<insertRow public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Element"/>
</f></insertRow>
		<haxe_doc><![CDATA[<code>table</code> objects expose the <code><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-64060425" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-64060425" target="_blank">HTMLTableElement</a></code> interface, which provides special properties and methods (beyond the regular <a rel="internal" href="/api/js/html/Element" title="en/DOM/element">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of tables in HTML.
<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLTableElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/usr/lib/haxe/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<a title="en/DOM/tableRow.bgColor" rel="internal" href="https://developer.mozilla.org/en/DOM/tableRow.bgColor" class="new ">row.bgColor</a> 

<span class="deprecatedInlineTemplate" title="">Deprecated</span>]]></haxe_doc>
		</align>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>row.cells</haxe_doc>
		</bgColor>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>row.ch</haxe_doc>
		</cells>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>row.chOff</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>row.rowIndex</haxe_doc>
		</chOff>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>row.sectionRowIndex</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>row.vAlign</haxe_doc>
		</sectionRowIndex>
		<vAlign public="1"><c path="String"/></vAlign>
		<deleteCell public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteCell>
		<insertCell public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Element"/>
</f></insertCell>
		<haxe_doc><![CDATA[DOM <code>table row</code> objects expose the <code><a class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-6986576" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-6986576" target="_blank">HTMLTableRowElement</a></code> interface, which provides special properties and methods (beyond the regular <a title="en/DOM/element" rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of rows in an HTML table.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLTableRowElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/usr/lib/haxe/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are: <ul> <li><span>left</span>, aligning the content to the left of the cell</li> <li><span>center</span>, centering the content in the cell</li> <li><span>right</span>, aligning the content to the right of the cell</li> <li><span>justify</span>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><span>char</span>, aligning the textual content on a special character with a minimal offset, defined by the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/thead#attr-char">char</a></code>
 and 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/thead#attr-charoff">charoff</a></code>
 attributes 
<span class="unimplementedInlineTemplate">Unimplemented (see<a rel="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=2212" class="external" title="">
bug 2212</a>
)</span>
.</li> </ul> <p>If this attribute is not set,&nbsp; the <span>left</span> value is assumed.</p> <div class="note"><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard. <ul> <li>To achieve the same effect as the <span>left</span>, <span>center</span>, <span>right</span> or <span>justify</span> values, use the CSS <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-align">text-align</a></code>
 property on it.</li> <li>To achieve the same effect as the <span>char</span> value, in CSS3, you can use the value of the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/thead#attr-char">char</a></code>
 as the value of the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/text-align">text-align</a></code>
 property 
<span class="unimplementedInlineTemplate">Unimplemented</span>
.</li> </ul> </div>]]></haxe_doc>
		</align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<rows public="1" set="null"><c path="js.html.HTMLCollection"/></rows>
		<vAlign public="1"><c path="String"/></vAlign>
		<deleteRow public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteRow>
		<insertRow public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Element"/>
</f></insertRow>
		<haxe_doc><![CDATA[The <em>HTML Table Head Element</em> (<code>&lt;thead&gt;</code>) defines a set of rows defining the head of the columns of the table.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/thead">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/usr/lib/haxe/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-autofocus">autofocus</a></code>
 HTML&nbsp;attribute, indicating that the control should have input focus when the page loads]]></haxe_doc>
		</autofocus>
		<cols public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-cols">cols</a></code>
 HTML attribute, indicating the visible width of the text area.]]></haxe_doc>
		</cols>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The control's default value, which behaves like the <strong><a title="en/DOM/element.textContent" rel="internal" href="https://developer.mozilla.org/En/DOM/Node.textContent">textContent</a></strong> property.]]></haxe_doc>
		</defaultValue>
		<dirName public="1"><c path="String"/></dirName>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-disabled">disabled</a></code>
 HTML attribute, indicating that the control is not available for interaction.]]></haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc><![CDATA[<p>The containing form element, if this element is in a form. If this element is not contained in a form element:</p> <ul> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> this can be the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form#attr-id">id</a></code>
 attribute of any <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/form">&lt;form&gt;</a></code>
 element in the same document.</li> <li>
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> this must be <code>null</code>.</li> </ul>]]></haxe_doc>
		</form>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc><![CDATA[A list of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/label">&lt;label&gt;</a></code>
 elements that are labels for this element.]]></haxe_doc>
		</labels>
		<maxLength public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-maxlength">maxlength</a></code>
 HTML&nbsp;attribute, indicating the maximum number of characters the user can enter. This constraint is evaluated only when the value changes. Setter throws DOMException.]]></haxe_doc>
		</maxLength>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-name">name</a></code>
 HTML attribute, containing the name of the control.]]></haxe_doc>
		</name>
		<placeholder public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-placeholder">placeholder</a></code>
 HTML attribute, containing a hint to the user about what to enter in the control.]]></haxe_doc>
		</placeholder>
		<readOnly public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-readonly">readonly</a></code>
 HTML attribute, indicating that the user cannot modify the value of the control.]]></haxe_doc>
		</readOnly>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-required">required</a></code>
 HTML attribute, indicating that the user must specify a value before submitting the form.]]></haxe_doc>
		</required>
		<rows public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-rows">rows</a></code>
 HTML attribute, indicating the number of visible text lines for the control.]]></haxe_doc>
		</rows>
		<selectionDirection public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[The direction in which selection occurred. This is "forward" if selection was performed in the start-to-end direction of the current locale, or "backward" for the opposite direction. This can also be "none"&nbsp;if the direction is unknown."]]></haxe_doc>
		</selectionDirection>
		<selectionEnd public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[The index of the end of selected text. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> If no text is selected, contains the index of the character that follows the input cursor. On being set, the control behaves as if <strong>setSelectionRange</strong>() had been called with this as the second argument, and <strong>selectionStart</strong> as the first argument.]]></haxe_doc>
		</selectionEnd>
		<selectionStart public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[The index of the beginning of selected text. 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML/HTML5">HTML5</a></span> If no text is selected, contains the index of the character that follows the input cursor. On being set, the control behaves as if <strong>setSelectionRange</strong>() had been called with this as the first argument, and <strong>selectionEnd</strong> as the second argument.]]></haxe_doc>
		</selectionStart>
		<textLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The codepoint length of the control's value.</haxe_doc>
		</textLength>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The string <code>textarea</code>.]]></haxe_doc>
		</type>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[A localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (<strong>willValidate</strong> is false), or it satisfies its constraints.]]></haxe_doc>
		</validationMessage>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>The validity states that this element is in.</haxe_doc>
		</validity>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The raw value contained in the control.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the element is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<wrap public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea#attr-wrap">wrap</a></code>
 HTML attribute, indicating how the control wraps text.]]></haxe_doc>
		</wrap>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:selectionMode">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method"><f a="start:end:?direction">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></setSelectionRange>
		<haxe_doc><![CDATA[DOM <code>TextArea</code> objects expose the <a title="http://dev.w3.org/html5/spec/the-button-element.html#the-textarea-element" class=" external" rel="external" href="http://dev.w3.org/html5/spec/the-button-element.html#the-textarea-element" target="_blank">HTMLTextAreaElement</a> (or 
<span><a rel="custom" href="https://developer.mozilla.org/en/HTML">HTML 4</a></span> <code><a title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-24874179" class="external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-24874179" target="_blank">HTMLTextAreaElement</a></code>) interface, which provides special properties and methods (beyond the regular <a title="en/DOM/element" rel="internal" href="/api/js/html/Element">element</a> object interface they also have available to them by inheritance) for manipulating the layout and presentation of <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/textarea">&lt;textarea&gt;</a></code>
 elements.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLTextAreaElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/usr/lib/haxe/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null"><x path="Float"/></width>
		<haxe_doc><![CDATA[Returned by <a title="CanvasRenderingContext2D" rel="internal" href="https://developer.mozilla.org/CanvasRenderingContext2D" class="new ">CanvasRenderingContext2D</a>'s <a title="CanvasRenderingContext2D.measureText" rel="internal" href="https://developer.mozilla.org/CanvasRenderingContext2D.measureText" class="new ">measureText</a> method.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/TextMetrics">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/usr/lib/haxe/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<activeCues public="1" set="null"><c path="js.html.TextTrackCueList"/></activeCues>
		<cues public="1" set="null"><c path="js.html.TextTrackCueList"/></cues>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<mode public="1"><c path="String"/></mode>
		<oncuechange public="1"><t path="js.html.EventListener"/></oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.TextTrackCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method"><f a="cue">
	<c path="js.html.TextTrackCue"/>
	<x path="Void"/>
</f></removeCue>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/usr/lib/haxe/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</align>
		<endTime public="1"><x path="Float"/></endTime>
		<id public="1"><c path="String"/></id>
		<line public="1">
			<x path="Int"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</line>
		<onenter public="1"><t path="js.html.EventListener"/></onenter>
		<onexit public="1"><t path="js.html.EventListener"/></onexit>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</position>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</size>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<startTime public="1"><x path="Float"/></startTime>
		<text public="1"><c path="String"/></text>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<vertical public="1">
			<c path="String"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</vertical>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method"><f a="startTime:endTime:text">
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/usr/lib/haxe/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrackCue"/>
</f></getCueById>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.TextTrackCue"/>
</f></item>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<class path="js.html.TextTrackList" params="" file="/usr/lib/haxe/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onaddtrack public="1"><t path="js.html.EventListener"/></onaddtrack>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.TextTrack"/>
</f></item>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<class path="js.html.TimeRanges" params="" file="/usr/lib/haxe/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of time ranges represented by the time range object. <strong>Read only.</strong>]]></haxe_doc>
		</length>
		<end public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></end>
		<start public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></start>
		<haxe_doc><![CDATA[<p>The <code>TimeRanges</code> interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/audio">&lt;audio&gt;</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
&nbsp;elements.</p>
<p>A <code>TimeRanges</code> object includes one or more ranges of time, each specified by a starting and ending time offset. You reference each time range by using the <code>start()</code> and <code>end()</code> methods, passing the index number of the time range you want to retrieve.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/TimeRanges">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/usr/lib/haxe/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets or sets the text content of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The <code>title</code> object exposes the <a target="_blank" class=" external" rel="external" href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-79243169" title="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-79243169">HTMLTitleElement</a> interface which contains the title for a document.&nbsp; This element inherits all of the properties and methods described in the <a title="en/DOM/element" class="internal" rel="internal" href="/api/js/html/Element">element</a> section.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLTitleElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/usr/lib/haxe/std/js/html/Touch.hx" extern="1">
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The X coordinate of the touch point relative to the viewport, not including any scroll offset. <strong>Read only.</strong>]]></haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The Y coordinate of the touch point relative to the viewport, not including any scroll offset. <strong>Read only.</strong>]]></haxe_doc>
		</clientY>
		<force public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[The amount of pressure being applied to the surface by the user, as a float between 0.0 (no pressure) and 1.0 (maximum pressure). <strong>Read only.</strong>]]></haxe_doc>
		</force>
		<identifier public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[A unique identifier for this <code>Touch</code> object. A given touch (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time. <strong>Read only.</strong>]]></haxe_doc>
		</identifier>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The X coordinate of the touch point relative to the viewport, including any scroll offset. <strong>Read only.</strong>]]></haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The Y coordinate of the touch point relative to the viewport, including any scroll offset. <strong>Read only.</strong>]]></haxe_doc>
		</pageY>
		<radiusX public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as <code>screenX</code>. <strong>Read only.</strong>]]></haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as <code>screenY</code>. <strong>Read only.</strong>]]></haxe_doc>
		</radiusY>
		<rotationAngle public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[The angle (in degrees)&nbsp;that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface. <strong>Read only.</strong>]]></haxe_doc>
		</rotationAngle>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The X coordinate of the touch point relative to the screen, not including any scroll offset. <strong>Read only.</strong>]]></haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The Y coordinate of the touch point relative to the screen, not including any scroll offset. <strong>Read only.</strong>]]></haxe_doc>
		</screenY>
		<target public="1" set="null"><c path="js.html.EventTarget"/></target>
		<haxe_doc><![CDATA[A <code>Touch</code> object represents a single point of contact between the user and a touch-sensitive interface device (which may be, for example, a touchscreen or a trackpad).<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Touch">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<class path="js.html.TouchList" params="" file="/usr/lib/haxe/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/Touch">Touch</a></code>
&nbsp;objects in the <code>TouchList</code>. <strong>Read only.</strong>]]></haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Touch"/>
</f></item>
		<haxe_doc><![CDATA[A <code>TouchList</code> represents a list of all of the points of contact with a touch surface; for example, if the user has three fingers on the screen (or trackpad), the corresponding <code>TouchList</code> would have one <code><a rel="custom" href="/api/js/html/Touch">Touch</a></code>
 object for each finger, for a total of three entries.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/TouchList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/usr/lib/haxe/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<ERROR public="1" get="inline" set="null" line="34" static="1"><x path="Int"/></ERROR>
		<LOADED public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></LOADED>
		<LOADING public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></LOADING>
		<NONE public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></NONE>
		<default_ public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This attribute indicates that the track should be enabled unless the user's preferences indicate that another track is more appropriate. This may only be used on one <code>track</code> element per media element.]]></haxe_doc>
		</default_>
		<get_default_ get="inline" set="null" line="44"><f a=""><x path="Bool"/></f></get_default_>
		<set_default_ get="inline" set="null" line="47"><f a="x">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_default_>
		<kind public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Kind of text track. The following keywords are allowed: <ul> <li>subtitles: A transcription or translation of the dialogue.</li> <li>captions: A transcription or translation of the dialogue or other sound effects. Suitable for users who are deaf or when the sound is muted.</li> <li>descriptions: Textual descriptions of the video content. Suitable for users who are blind.</li> <li>chapters: Chapter titles, intended to be used when the user is navigating the media resource.</li> <li>metadata: Tracks used by script. Not visible to the user.</li> </ul>]]></haxe_doc>
		</kind>
		<label public="1">
			<c path="String"/>
			<haxe_doc>A user-readable title of the text track Used by the browser when listing available text tracks.</haxe_doc>
		</label>
		<readyState public="1" set="null"><x path="Int"/></readyState>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Address of the track. Must be a valid URL. This attribute must be defined.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Language of the track text data.</haxe_doc>
		</srclang>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<haxe_doc><![CDATA[<p>The <code>track</code>&nbsp;element is used as a child of the media elements—<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/audio">&lt;audio&gt;</a></code>
 and <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video">&lt;video&gt;</a></code>
—and does not represent anything on its own. It lets you specify timed text tracks (or time-based data).</p>
<p>The type of data that <code> track</code> adds to the media is set in the <code>kind</code> attribute, which can take values of <code>subtitles</code>, <code>captions</code>, <code>descriptions</code>, <code>chapters</code> or <code>metadata</code>. The element points to a source file containing timed text that the browser exposes when the user requests additional data. </p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/track">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TreeWalker" params="" file="/usr/lib/haxe/std/js/html/TreeWalker.hx" extern="1">
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</currentNode>
		<expandEntityReferences public="1" set="null"><x path="Bool"/></expandEntityReferences>
		<filter public="1" set="null"><c path="js.html.NodeFilter"/></filter>
		<root public="1" set="null"><c path="js.html.Node"/></root>
		<whatToShow public="1" set="null"><x path="Int"/></whatToShow>
		<firstChild public="1" set="method"><f a=""><c path="js.html.Node"/></f></firstChild>
		<lastChild public="1" set="method"><f a=""><c path="js.html.Node"/></f></lastChild>
		<nextNode public="1" set="method"><f a=""><c path="js.html.Node"/></f></nextNode>
		<nextSibling public="1" set="method"><f a=""><c path="js.html.Node"/></f></nextSibling>
		<parentNode public="1" set="method"><f a=""><c path="js.html.Node"/></f></parentNode>
		<previousNode public="1" set="method"><f a=""><c path="js.html.Node"/></f></previousNode>
		<previousSibling public="1" set="method"><f a=""><c path="js.html.Node"/></f></previousSibling>
		<haxe_doc><![CDATA[<p>The <code>TreeWalker</code> object represents the nodes of a document subtree and a position within them.</p>
<p>A TreeWalker can be created using the <code><a title="en/DOM/document.createTreeWalker" rel="internal" href="https://developer.mozilla.org/en/DOM/document.createTreeWalker">createTreeWalker()</a></code> method of the <code><a title="en/DOM/document" rel="internal" href="/api/js/html/Document">document</a></code> object.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/Treewalker">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<class path="js.html.UListElement" params="" file="/usr/lib/haxe/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc><![CDATA[This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn't work in all browsers. <div class="note"><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it has been deprecated: the <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/ol">&lt;ol&gt;</a></code>
 element should be styled using <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a>. To give a similar effect than the <span>compact</span> attribute, the <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> property <a title="en/CSS/line-height" rel="internal" href="https://developer.mozilla.org/en/CSS/line-height">line-height</a> can be used with a value of <span>80%</span>.</div>]]></haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Used to set the bullet style for the list. The values defined under <a title="en/HTML3.2" rel="internal" href="https://developer.mozilla.org/en/HTML3.2" class="new ">HTML3.2</a> and the transitional version of <a title="en/HTML4.01" rel="internal" href="https://developer.mozilla.org/en/HTML4.01" class="new ">HTML 4.0/4.01</a> are<span>:</span> <ul> <li><code>circle</code>,</li> <li><code>disc</code>,</li> <li>and <code>square</code>.</li> </ul> <p>A fourth bullet type has been defined in the WebTV interface, but not all browsers support it: <code>triangle.</code></p> <p>If not present and if no <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
 property does apply to the element, the user agent decide to use a kind of bullets depending on the nesting level of the list.</p> <div class="note"><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated: use the <a title="en/CSS" rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a> <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
 property instead.</div>]]></haxe_doc>
		</type>
		<haxe_doc><![CDATA[<p>The HTML <em>unordered list</em> element (<code>&lt;ul&gt;</code>) represents an unordered list of items, namely a collection of items that do not have a numerical ordering, and their order in the list is meaningless. Typically, unordered-list items are displayed with a bullet, which can be of several forms, like a dot, a circle or a squared. The bullet style is not defined in the HTML description of the page, but in its associated CSS, using the <code><a rel="custom" href="https://developer.mozilla.org/en/CSS/list-style-type">list-style-type</a></code>
 property.</p>
<p>There is no limitation to the depth and imbrication of lists defined with the <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 and <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 elements.</p>
<div class="note"><strong>Usage note: </strong> The <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 and <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 both represent a list of items. They differ in the way that, with the <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 element, the order is meaningful. As a rule of thumb to determine which one to use, try changing the order of the list items; if the meaning is changed, the <code><a rel="custom" href="/api/js/html/OListElement">&lt;ol&gt;</a></code>
 element should be used, else the <code><a rel="custom" href="/api/js/html/UListElement">&lt;ul&gt;</a></code>
 is adequate.</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/HTML/Element/ul">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.Uint8Array" params="" file="/usr/lib/haxe/std/js/html/Uint8Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of each array element.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The number of entries in the array; for these 8-bit values, this is the same as the size of the array in bytes. <strong>Read only.</strong>]]></haxe_doc>
		</length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.html.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<p>Sets multiple values in the typed array, reading input values from a specified array.</p>

<div id="section_13"><span id="Parameters_2"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>array</code></dt> <dd>An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying <code><a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a></code>; the browser will intelligently copy the source range of the buffer to the destination range.</dd> <dt>offset 
<span title="">Optional</span>
</dt> <dd>The offset into the target array at which to begin writing values from the source <code>array</code>. If you omit this value, 0 is assumed (that is, the source <code>array</code> will overwrite values in the target array starting at index 0).</dd>
</dl>
</div>]]></haxe_doc>
				</set>
			</overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Uint8Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Uint8Array <a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new Uint8Array object.</p>
<pre>Uint8Array Uint8Array(
&nbsp; unsigned long length
);

Uint8Array Uint8Array(
&nbsp; <em>TypedArray</em> array
);

Uint8Array Uint8Array(
&nbsp; sequence&lt;type&gt; array
);

Uint8Array Uint8Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int32Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Uint8Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Uint8Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Uint8Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Uint8Array <a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new Uint8Array object.</p>
<pre>Uint8Array Uint8Array(
&nbsp; unsigned long length
);

Uint8Array Uint8Array(
&nbsp; <em>TypedArray</em> array
);

Uint8Array Uint8Array(
&nbsp; sequence&lt;type&gt; array
);

Uint8Array Uint8Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int32Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Uint8Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Uint8Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Uint8Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Uint8Array <a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new Uint8Array object.</p>
<pre>Uint8Array Uint8Array(
&nbsp; unsigned long length
);

Uint8Array Uint8Array(
&nbsp; <em>TypedArray</em> array
);

Uint8Array Uint8Array(
&nbsp; sequence&lt;type&gt; array
);

Uint8Array Uint8Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int32Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Uint8Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Uint8Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Uint8Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Uint8Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[<div class="note"><strong>Note:</strong> In these methods, <code><em>TypedArray</em></code> represents any of the <a title="en/JavaScript typed arrays/ArrayBufferView#Typed array subclasses" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBufferView#Typed_array_subclasses">typed array object types</a>.</div>
<table class="standard-table"> <tbody> <tr> <td><code>Uint8Array <a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a>(unsigned long length);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(<em>TypedArray</em> array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(sequence&lt;type&gt; array);<br> </code></td> </tr> <tr> <td><code>Uint8Array </code><code><a title="en/JavaScript typed arrays/Uint8Array#Int8Array()" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array#Int8Array%28%29">Uint8Array</a></code><code>(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);<br> </code></td> </tr> </tbody>
</table><p>Returns a new Uint8Array object.</p>
<pre>Uint8Array Uint8Array(
&nbsp; unsigned long length
);

Uint8Array Uint8Array(
&nbsp; <em>TypedArray</em> array
);

Uint8Array Uint8Array(
&nbsp; sequence&lt;type&gt; array
);

Uint8Array Uint8Array(
&nbsp; ArrayBuffer buffer,
&nbsp; optional unsigned long byteOffset,
&nbsp; optional unsigned long length
);
</pre>
<div id="section_7"><span id="Parameters"></span><h6 class="editable">Parameters</h6>
<dl> <dt><code>length</code></dt> <dd>The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length.</dd> <dt><code>array</code></dt> <dd>An object of any of the typed array types (such as <code>Int32Array</code>), or a sequence of objects of a particular type, to copy into a new <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a>. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array.</dd> <dt><code>buffer</code></dt> <dd>An existing <a title="en/JavaScript typed arrays/ArrayBuffer" rel="internal" href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer"><code>ArrayBuffer</code></a> to use as the storage for the new <code>Uint8Array</code> object.</dd> <dt><code>byteOffset<br> </code></dt> <dd>The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the <code>Uint8Array</code>'s view of the buffer will start with the first byte.</dd>
</dl>
</div><div id="section_8"><span id="Return_value"></span><h6 class="editable">Return value</h6>
<p>A new <code>Uint8Array</code> object representing the specified data buffer.</p>
</div>]]></haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[<p>The <code>UInt8Array</code> type represents an array of 8-bit unsigned integers.</p>
<p>Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="js.html.Uint8ClampedArray" params="" file="/usr/lib/haxe/std/js/html/Uint8ClampedArray.hx" extern="1">
		<extends path="js.html.Uint8Array"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></BYTES_PER_ELEMENT>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="length">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="array">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="array">
	<c path="js.html.Uint8ClampedArray"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/usr/lib/haxe/std/js/html/ValidityState.hx" extern="1">
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The element's custom validity message has been set to a non-empty string by calling the element's setCustomValidity() method.</haxe_doc>
		</customError>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The value does not match the specified 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-pattern">pattern</a></code>
.]]></haxe_doc>
		</patternMismatch>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The value is greater than the specified 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-max">max</a></code>
.]]></haxe_doc>
		</rangeOverflow>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The value is less than the specified 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-min">min</a></code>
.]]></haxe_doc>
		</rangeUnderflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The value does not fit the rules determined by 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-step">step</a></code>
.]]></haxe_doc>
		</stepMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[<p>The value exceeds the specified <strong>maxlength</strong> for <a title="en/DOM/HTMLInputElement" rel="internal" href="https://developer.mozilla.org/en/DOM/HTMLInputElement">HTMLInputElement</a> or <a title="en/DOM/textarea" rel="internal" href="https://developer.mozilla.org/en/DOM/HTMLTextAreaElement">HTMLTextAreaElement</a> objects.</p> <div class="note"><strong>Note:</strong> This will never be <code>true</code> in Gecko, because elements' values are prevented from being longer than <strong>maxlength</strong>.</div>]]></haxe_doc>
		</tooLong>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The value is not in the required syntax (when 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-type">type</a></code>
 is <code>email</code> or <code>url</code>).]]></haxe_doc>
		</typeMismatch>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>No other constraint validation conditions are true.</haxe_doc>
		</valid>
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The element has a 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/input#attr-required">required</a></code>
 attribute, but no value.]]></haxe_doc>
		</valueMissing>
		<haxe_doc><![CDATA[The DOM&nbsp;<code>ValidityState</code> interface represents the <em>validity states</em> that an element can be in, with respect to constraint validation.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/ValidityState">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/usr/lib/haxe/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<decodedFrameCount public="1" set="null"><x path="Int"/></decodedFrameCount>
		<displayingFullscreen public="1" set="null"><x path="Bool"/></displayingFullscreen>
		<droppedFrameCount public="1" set="null"><x path="Int"/></droppedFrameCount>
		<height public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-height">height</a></code>
 HTML attribute, which specifies the height of the display area, in CSS pixels.]]></haxe_doc>
		</height>
		<poster public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-poster">poster</a></code>
 HTML&nbsp;attribute, which specifies an image to show while no video data is available.]]></haxe_doc>
		</poster>
		<supportsFullscreen public="1" set="null"><x path="Bool"/></supportsFullscreen>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is HAVE_NOTHING, the value is 0.</haxe_doc>
		</videoHeight>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is HAVE_NOTHING, the value is 0.</haxe_doc>
		</videoWidth>
		<width public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Reflects the 

<code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/video#attr-width">width</a></code>
&nbsp;HTML&nbsp;attribute, which specifies the width of the display area, in CSS pixels.]]></haxe_doc>
		</width>
		<enterFullScreen public="1" set="method"><f a=""><x path="Void"/></f></enterFullScreen>
		<enterFullscreen public="1" set="method"><f a=""><x path="Void"/></f></enterFullscreen>
		<exitFullScreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullScreen>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<haxe_doc><![CDATA[DOM <code>video</code> objects expose the <a class="external" title="http://www.w3.org/TR/html5/video.html#htmlvideoelement" rel="external" href="http://www.w3.org/TR/html5/video.html#htmlvideoelement" target="_blank">HTMLVideoElement</a> interface, which provides special properties (beyond the regular <a href="/api/js/html/Element" rel="internal">element</a> object and <a title="en/DOM/HTMLMediaElement" rel="internal" href="/api/js/html/MediaElement">HTMLMediaElement</a> interfaces they also have available to them by inheritance) for manipulating video objects.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/HTMLVideoElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<typedef path="js.html.VoidCallback" params="" file="/usr/lib/haxe/std/js/html/VoidCallback.hx"><f a=""><x path="Bool"/></f></typedef>
	<class path="js.html.XPathExpression" params="" file="/usr/lib/haxe/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method"><f a="contextNode:type:inResult">
	<c path="js.html.Node"/>
	<x path="Int"/>
	<c path="js.html.XPathResult"/>
	<c path="js.html.XPathResult"/>
</f></evaluate>
		<haxe_doc><![CDATA[An XPathExpression is a compiled XPath query returned from <a rel="internal" href="https://developer.mozilla.org/en/DOM/document.createExpression" title="en/DOM/document.createExpression">document.createExpression()</a>. It has a method <code>evaluate()</code> which can be used to execute the compiled XPath.
<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/XPathExpression">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<class path="js.html.XPathNSResolver" params="" file="/usr/lib/haxe/std/js/html/XPathNSResolver.hx" extern="1">
		<lookupNamespaceURI public="1" set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI>
		<meta><m n=":native"><e>"XPathNSResolver"</e></m></meta>
	</class>
	<class path="js.html.XPathResult" params="" file="/usr/lib/haxe/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>A result set containing whatever type naturally results from evaluation of the expression. Note that if the result is a node-set then UNORDERED_NODE_ITERATOR_TYPE is always the resulting type.</haxe_doc>
		</ANY_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" line="36" static="1">
			<x path="Int"/>
			<haxe_doc>A result node-set containing any single node that matches the expression. The node is not necessarily the first node in the document that matches the expression.</haxe_doc>
		</ANY_UNORDERED_NODE_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" line="39" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[A result containing a single boolean value. This is useful for example, in an XPath expression using the <code>not()</code> function.]]></haxe_doc>
		</BOOLEAN_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" line="42" static="1">
			<x path="Int"/>
			<haxe_doc>A result node-set containing the first node in the document that matches the expression.</haxe_doc>
		</FIRST_ORDERED_NODE_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" line="45" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[A result containing a single number. This is useful for example, in an XPath expression using the <code>count()</code> function.]]></haxe_doc>
		</NUMBER_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" line="48" static="1">
			<x path="Int"/>
			<haxe_doc>A result node-set containing all the nodes matching the expression. The nodes in the result set are in the same order that they appear in the document.</haxe_doc>
		</ORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" line="51" static="1">
			<x path="Int"/>
			<haxe_doc>A result node-set containing snapshots of all the nodes matching the expression. The nodes in the result set are in the same order that they appear in the document.</haxe_doc>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" line="54" static="1">
			<x path="Int"/>
			<haxe_doc>A result containing a single string.</haxe_doc>
		</STRING_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" line="57" static="1">
			<x path="Int"/>
			<haxe_doc>A result node-set containing all the nodes matching the expression. The nodes may not necessarily be in the same order that they appear in the document.</haxe_doc>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" line="60" static="1">
			<x path="Int"/>
			<haxe_doc>A result node-set containing snapshots of all the nodes matching the expression. The nodes may not necessarily be in the same order that they appear in the document.</haxe_doc>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>readonly boolean Getter throws DOMException.</haxe_doc>
		</booleanValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>readonly boolean</haxe_doc>
		</invalidIteratorState>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>readonly float Getter throws DOMException.</haxe_doc>
		</numberValue>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>readonly integer (short)</haxe_doc>
		</resultType>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>readonly Node Getter throws DOMException.</haxe_doc>
		</singleNodeValue>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>readonly Integer Getter throws DOMException.</haxe_doc>
		</snapshotLength>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>readonly String Getter throws DOMException.</haxe_doc>
		</stringValue>
		<iterateNext public="1" set="method"><f a=""><c path="js.html.Node"/></f></iterateNext>
		<snapshotItem public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></snapshotItem>
		<haxe_doc><![CDATA[Refer to <code><a rel="custom" href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIDOMXPathResult">nsIDOMXPathResult</a></code>
 for more detail.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/XPathResult">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.fs.Entry" params="" file="/usr/lib/haxe/std/js/html/fs/Entry.hx" extern="1">
		<filesystem public="1" set="null">
			<c path="js.html.fs.FileSystem"/>
			<haxe_doc>The file system on which the entry resides.</haxe_doc>
		</filesystem>
		<fullPath public="1" set="null"><c path="String"/></fullPath>
		<isDirectory public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The entry is a directory.</haxe_doc>
		</isDirectory>
		<isFile public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The entry is a file.</haxe_doc>
		</isFile>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the entry, excluding the path leading to it.</haxe_doc>
		</name>
		<copyTo public="1" set="method"><f a="parent:?name:?successCallback:?errorCallback">
	<c path="js.html.fs.DirectoryEntry"/>
	<c path="String"/>
	<t path="js.html.fs.EntryCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></copyTo>
		<getMetadata public="1" set="method"><f a="successCallback:?errorCallback">
	<t path="js.html.fs.MetadataCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></getMetadata>
		<getParent public="1" set="method"><f a="?successCallback:?errorCallback">
	<t path="js.html.fs.EntryCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></getParent>
		<moveTo public="1" set="method"><f a="parent:?name:?successCallback:?errorCallback">
	<c path="js.html.fs.DirectoryEntry"/>
	<c path="String"/>
	<t path="js.html.fs.EntryCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></moveTo>
		<remove public="1" set="method"><f a="successCallback:?errorCallback">
	<t path="js.html.VoidCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></remove>
		<toURL public="1" set="method"><f a=""><c path="String"/></f></toURL>
		<haxe_doc><![CDATA[<div><strong>DRAFT</strong> <div>This page is not complete.</div>
</div>
<p>The <code>Entry</code> interface of the <a title="en/DOM/File_API/File_System_API" rel="internal" href="https://developer.mozilla.org/en/DOM/File_API/File_System_API">FileSystem API</a> represents entries in a file system. The entries can be a file&nbsp;or a <a href="https://developer.mozilla.org/en/DOM/File_API/File_system_API/DirectoryEntry" rel="internal" title="en/DOM/File_API/File_system_API/DirectoryEntry">DirectoryEntry</a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/File_API/File_System_API/Entry">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Entry"</e></m></meta>
	</class>
	<class path="js.html.fs.DirectoryEntry" params="" file="/usr/lib/haxe/std/js/html/fs/DirectoryEntry.hx" extern="1">
		<extends path="js.html.fs.Entry"/>
		<createReader public="1" set="method"><f a=""><c path="js.html.fs.DirectoryReader"/></f></createReader>
		<getDirectory public="1" set="method"><f a="path:?options:?successCallback:?errorCallback">
	<c path="String"/>
	<d/>
	<t path="js.html.fs.EntryCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></getDirectory>
		<getFile public="1" set="method"><f a="path:?options:?successCallback:?errorCallback">
	<c path="String"/>
	<d/>
	<t path="js.html.fs.EntryCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></getFile>
		<removeRecursively public="1" set="method"><f a="successCallback:?errorCallback">
	<t path="js.html.VoidCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></removeRecursively>
		<haxe_doc><![CDATA[<div><strong>DRAFT</strong> <div>This page is not complete.</div>
</div>
<p>The <code>DirectoryEntry</code> interface of the <a title="en/DOM/File_API/File_System_API" rel="internal" href="https://developer.mozilla.org/en/DOM/File_API/File_System_API">FileSystem API</a> represents a directory in a file system.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/File_API/File_System_API/DirectoryEntry">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"DirectoryEntry"</e></m></meta>
	</class>
	<class path="js.html.fs.DirectoryReader" params="" file="/usr/lib/haxe/std/js/html/fs/DirectoryReader.hx" extern="1">
		<readEntries public="1" set="method"><f a="successCallback:?errorCallback">
	<t path="js.html.fs.EntriesCallback"/>
	<t path="js.html.fs.ErrorCallback"/>
	<x path="Void"/>
</f></readEntries>
		<haxe_doc><![CDATA[<div><strong>`DRAFT</strong> <div>This page is not complete.</div>
</div>
<p>The <code>DirectoryReader</code> interface of the <a title="en/DOM/File_API/File_System_API" rel="internal" href="https://developer.mozilla.org/en/DOM/File_API/File_System_API">FileSystem API</a> lets a user list files and directories in a directory.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/File_API/File_System_API/DirectoryReader">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"DirectoryReader"</e></m></meta>
	</class>
	<typedef path="js.html.fs.EntriesCallback" params="" file="/usr/lib/haxe/std/js/html/fs/EntriesCallback.hx"><f a="">
	<c path="js.html.fs.EntryArray"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.fs.EntryArray" params="" file="/usr/lib/haxe/std/js/html/fs/EntryArray.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.fs.Entry"/>
</f></item>
		<meta><m n=":native"><e>"EntryArray"</e></m></meta>
	</class>
	<typedef path="js.html.fs.EntryCallback" params="" file="/usr/lib/haxe/std/js/html/fs/EntryCallback.hx"><f a="">
	<c path="js.html.fs.Entry"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.fs.ErrorCallback" params="" file="/usr/lib/haxe/std/js/html/fs/ErrorCallback.hx"><f a="">
	<c path="js.html.fs.FileError"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.fs.FileError" params="" file="/usr/lib/haxe/std/js/html/fs/FileError.hx" extern="1">
		<ABORT_ERR public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[The file operation was aborted, probably due to a call to the <code>FileReader</code> <code>abort()</code>&nbsp;method.]]></haxe_doc>
		</ABORT_ERR>
		<ENCODING_ERR public="1" get="inline" set="null" line="36" static="1">
			<x path="Int"/>
			<haxe_doc>The file data cannot be accurately represented in a data URL.</haxe_doc>
		</ENCODING_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></INVALID_MODIFICATION_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></INVALID_STATE_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" line="43" static="1">
			<x path="Int"/>
			<haxe_doc>File not found.</haxe_doc>
		</NOT_FOUND_ERR>
		<NOT_READABLE_ERR public="1" get="inline" set="null" line="46" static="1">
			<x path="Int"/>
			<haxe_doc>File could not be read.</haxe_doc>
		</NOT_READABLE_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" line="48" static="1"><x path="Int"/></NO_MODIFICATION_ALLOWED_ERR>
		<PATH_EXISTS_ERR public="1" get="inline" set="null" line="50" static="1"><x path="Int"/></PATH_EXISTS_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" line="52" static="1"><x path="Int"/></QUOTA_EXCEEDED_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" line="55" static="1">
			<x path="Int"/>
			<haxe_doc>The file could not be accessed for security reasons.</haxe_doc>
		</SECURITY_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" line="57" static="1"><x path="Int"/></SYNTAX_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" line="59" static="1"><x path="Int"/></TYPE_MISMATCH_ERR>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[The <a title="en/nsIDOMFileError#Error codes" rel="internal" href="https://developer.mozilla.org/en/nsIDOMFileError#Error_codes">error code</a>.]]></haxe_doc>
		</code>
		<haxe_doc><![CDATA[Represents an error that occurs while using the <code><a rel="custom" href="/api/js/html/FileReader">FileReader</a></code>
 interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/FileError">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"FileError"</e></m></meta>
	</class>
	<class path="js.html.fs.FileSystem" params="" file="/usr/lib/haxe/std/js/html/fs/FileSystem.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<root public="1" set="null"><c path="js.html.fs.DirectoryEntry"/></root>
		<meta><m n=":native"><e>"DOMFileSystem"</e></m></meta>
	</class>
	<typedef path="js.html.fs.FileSystemCallback" params="" file="/usr/lib/haxe/std/js/html/fs/FileSystemCallback.hx"><f a="">
	<c path="js.html.fs.FileSystem"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.fs.Metadata" params="" file="/usr/lib/haxe/std/js/html/fs/Metadata.hx" extern="1">
		<modificationTime public="1" set="null"><c path="Date"/></modificationTime>
		<size public="1" set="null"><x path="Int"/></size>
		<haxe_doc><![CDATA[Metadata is structured data about data. Metadata which is included with SVG content should be specified within <code>metadata</code> elements. The contents of the <code>metadata</code> should be elements from other XML namespaces such as RDF, FOAF, etc.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/SVG/Element/metadata">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Metadata"</e></m></meta>
	</class>
	<typedef path="js.html.fs.MetadataCallback" params="" file="/usr/lib/haxe/std/js/html/fs/MetadataCallback.hx"><f a="">
	<c path="js.html.fs.Metadata"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.idb.Any" params="" file="/usr/lib/haxe/std/js/html/idb/Any.hx" extern="1"><meta><m n=":native"><e>"IDBAny"</e></m></meta></class>
	<class path="js.html.idb.Database" params="" file="/usr/lib/haxe/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Name of the connected database.</haxe_doc>
		</name>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc><![CDATA[A list of the names of the <a title="en/IndexedDB#gloss object store" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_object_store">object stores</a> currently in the connected database.]]></haxe_doc>
		</objectStoreNames>
		<onabort public="1"><t path="js.html.EventListener"/></onabort>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<onversionchange public="1"><t path="js.html.EventListener"/></onversionchange>
		<version public="1" set="null">
			<c path="js.html.idb.Any"/>
			<haxe_doc>The version of the connected database. When a database is first created, this attribute is the empty string.</haxe_doc>
		</version>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<createObjectStore public="1" set="method"><f a="name:?options">
	<c path="String"/>
	<d/>
	<c path="js.html.idb.ObjectStore"/>
</f></createObjectStore>
		<deleteObjectStore public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></deleteObjectStore>
		<setVersion public="1" set="method"><f a="version">
	<c path="String"/>
	<c path="js.html.idb.VersionChangeRequest"/>
</f></setVersion>
		<transaction public="1" set="method">
			<f a="storeName:mode">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction">IDBTransaction</a> object, and starts a transaction in a separate thread. &nbsp;The method returns a transaction object (<a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction"><code>IDBTransaction</code></a>) containing the <a title="en/IndexedDB/IDBTransaction#objectStore()" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#objectStore()">objectStore()</a> method, which you can use to access your object store.&nbsp;</p>

<div id="section_22"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>storeNames</dt> <dd>The names of object stores and indexes that are in the scope of the new transaction. Specify only the object stores that you need to access.</dd> <dt>mode</dt> <dd><em>Optional</em>. The types of access that can be performed in the transaction. Transactions are opened in one of three modes: <code>READ_ONLY</code>, <code>READ_WRITE</code>, and <code>VERSION_CHANGE</code>. If you don't provide the parameter, the default access mode is <code>READ_ONLY</code>. To avoid slowing things down, don't open a <code>READ_WRITE</code> transaction, unless you actually need to write into the database.</dd>
</dl>
</div><div id="section_23"><span id="Sample_code"></span><h5 class="editable">Sample code</h5>
<p>To start a transaction with the following scope, you can use the code snippets in the table. As noted earlier:</p>
<ul> <li>Add prefixes to the methods in WebKit browsers, (that is, instead of <code>IDBTransaction.READ_ONLY</code>, use <code>webkitIDBTransaction.READ_ONLY</code>).</li> <li>The default mode is <code>READ_ONLY</code>, so you don't really have to specify it. Of course, if you need to write into the object store, you can open the transaction in the <code>READ_WRITE</code> mode.</li>
</ul>
<table class="standard-table"> <thead> <tr> <th scope="col" width="185">Scope</th> <th scope="col" width="1018">Code</th> </tr> <tr> <td>Single object store</td> <td> <p><code>var transaction = db.transaction(['my-store-name'], IDBTransaction.READ_ONLY); </code></p> <p>Alternatively:</p> <p><code>var transaction = db.transaction('my-store-name', IDBTransaction.READ_ONLY);</code></p> </td> </tr> <tr> <td>Multiple object stores</td> <td><code>var transaction = db.transaction(['my-store-name', 'my-store-name2'], IDBTransaction.READ_ONLY);</code></td> </tr> <tr> <td>All object stores</td> <td> <p><code>var transaction = db.transaction(db.objectStoreNames, IDBTransaction.READ_ONLY);</code></p> <p>You cannot pass an empty array into the storeNames parameter, such as in the following: <code>var transaction = db.transaction([], IDBTransaction.READ_ONLY);.</code></p> <div class="warning"><strong>Warning:</strong>&nbsp; Accessing all obejct stores under the <code>READ_WRITE</code> mode means that you can run only that transaction. You cannot have writing transactions with overlapping scopes.</div> </td> </tr> </thead> <tbody> </tbody>
</table>
</div><div id="section_24"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBVersionChangeRequest">IDBTransaction</a></code></dt> <dd>The transaction object.</dd>
</dl>
</div><div id="section_25"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Exception</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The error is thrown for one of two reasons: <ul> <li>The <code>close()</code> method has been called on this IDBDatabase instance.</li> <li>The object store has been deleted or removed.</li> </ul> </td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code></td> <td>One of the object stores doesn't exist in the connected database.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads>
				<transaction public="1" set="method">
					<f a="storeNames:mode">
						<c path="js.html.DOMStringList"/>
						<c path="String"/>
						<c path="js.html.idb.Transaction"/>
					</f>
					<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction">IDBTransaction</a> object, and starts a transaction in a separate thread. &nbsp;The method returns a transaction object (<a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction"><code>IDBTransaction</code></a>) containing the <a title="en/IndexedDB/IDBTransaction#objectStore()" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#objectStore()">objectStore()</a> method, which you can use to access your object store.&nbsp;</p>

<div id="section_22"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>storeNames</dt> <dd>The names of object stores and indexes that are in the scope of the new transaction. Specify only the object stores that you need to access.</dd> <dt>mode</dt> <dd><em>Optional</em>. The types of access that can be performed in the transaction. Transactions are opened in one of three modes: <code>READ_ONLY</code>, <code>READ_WRITE</code>, and <code>VERSION_CHANGE</code>. If you don't provide the parameter, the default access mode is <code>READ_ONLY</code>. To avoid slowing things down, don't open a <code>READ_WRITE</code> transaction, unless you actually need to write into the database.</dd>
</dl>
</div><div id="section_23"><span id="Sample_code"></span><h5 class="editable">Sample code</h5>
<p>To start a transaction with the following scope, you can use the code snippets in the table. As noted earlier:</p>
<ul> <li>Add prefixes to the methods in WebKit browsers, (that is, instead of <code>IDBTransaction.READ_ONLY</code>, use <code>webkitIDBTransaction.READ_ONLY</code>).</li> <li>The default mode is <code>READ_ONLY</code>, so you don't really have to specify it. Of course, if you need to write into the object store, you can open the transaction in the <code>READ_WRITE</code> mode.</li>
</ul>
<table class="standard-table"> <thead> <tr> <th scope="col" width="185">Scope</th> <th scope="col" width="1018">Code</th> </tr> <tr> <td>Single object store</td> <td> <p><code>var transaction = db.transaction(['my-store-name'], IDBTransaction.READ_ONLY); </code></p> <p>Alternatively:</p> <p><code>var transaction = db.transaction('my-store-name', IDBTransaction.READ_ONLY);</code></p> </td> </tr> <tr> <td>Multiple object stores</td> <td><code>var transaction = db.transaction(['my-store-name', 'my-store-name2'], IDBTransaction.READ_ONLY);</code></td> </tr> <tr> <td>All object stores</td> <td> <p><code>var transaction = db.transaction(db.objectStoreNames, IDBTransaction.READ_ONLY);</code></p> <p>You cannot pass an empty array into the storeNames parameter, such as in the following: <code>var transaction = db.transaction([], IDBTransaction.READ_ONLY);.</code></p> <div class="warning"><strong>Warning:</strong>&nbsp; Accessing all obejct stores under the <code>READ_WRITE</code> mode means that you can run only that transaction. You cannot have writing transactions with overlapping scopes.</div> </td> </tr> </thead> <tbody> </tbody>
</table>
</div><div id="section_24"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBVersionChangeRequest">IDBTransaction</a></code></dt> <dd>The transaction object.</dd>
</dl>
</div><div id="section_25"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Exception</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The error is thrown for one of two reasons: <ul> <li>The <code>close()</code> method has been called on this IDBDatabase instance.</li> <li>The object store has been deleted or removed.</li> </ul> </td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code></td> <td>One of the object stores doesn't exist in the connected database.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
				</transaction>
				<transaction public="1" set="method">
					<f a="storeNames:mode">
						<c path="Array"><c path="String"/></c>
						<c path="String"/>
						<c path="js.html.idb.Transaction"/>
					</f>
					<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction">IDBTransaction</a> object, and starts a transaction in a separate thread. &nbsp;The method returns a transaction object (<a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction"><code>IDBTransaction</code></a>) containing the <a title="en/IndexedDB/IDBTransaction#objectStore()" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#objectStore()">objectStore()</a> method, which you can use to access your object store.&nbsp;</p>

<div id="section_22"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>storeNames</dt> <dd>The names of object stores and indexes that are in the scope of the new transaction. Specify only the object stores that you need to access.</dd> <dt>mode</dt> <dd><em>Optional</em>. The types of access that can be performed in the transaction. Transactions are opened in one of three modes: <code>READ_ONLY</code>, <code>READ_WRITE</code>, and <code>VERSION_CHANGE</code>. If you don't provide the parameter, the default access mode is <code>READ_ONLY</code>. To avoid slowing things down, don't open a <code>READ_WRITE</code> transaction, unless you actually need to write into the database.</dd>
</dl>
</div><div id="section_23"><span id="Sample_code"></span><h5 class="editable">Sample code</h5>
<p>To start a transaction with the following scope, you can use the code snippets in the table. As noted earlier:</p>
<ul> <li>Add prefixes to the methods in WebKit browsers, (that is, instead of <code>IDBTransaction.READ_ONLY</code>, use <code>webkitIDBTransaction.READ_ONLY</code>).</li> <li>The default mode is <code>READ_ONLY</code>, so you don't really have to specify it. Of course, if you need to write into the object store, you can open the transaction in the <code>READ_WRITE</code> mode.</li>
</ul>
<table class="standard-table"> <thead> <tr> <th scope="col" width="185">Scope</th> <th scope="col" width="1018">Code</th> </tr> <tr> <td>Single object store</td> <td> <p><code>var transaction = db.transaction(['my-store-name'], IDBTransaction.READ_ONLY); </code></p> <p>Alternatively:</p> <p><code>var transaction = db.transaction('my-store-name', IDBTransaction.READ_ONLY);</code></p> </td> </tr> <tr> <td>Multiple object stores</td> <td><code>var transaction = db.transaction(['my-store-name', 'my-store-name2'], IDBTransaction.READ_ONLY);</code></td> </tr> <tr> <td>All object stores</td> <td> <p><code>var transaction = db.transaction(db.objectStoreNames, IDBTransaction.READ_ONLY);</code></p> <p>You cannot pass an empty array into the storeNames parameter, such as in the following: <code>var transaction = db.transaction([], IDBTransaction.READ_ONLY);.</code></p> <div class="warning"><strong>Warning:</strong>&nbsp; Accessing all obejct stores under the <code>READ_WRITE</code> mode means that you can run only that transaction. You cannot have writing transactions with overlapping scopes.</div> </td> </tr> </thead> <tbody> </tbody>
</table>
</div><div id="section_24"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBTransaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBVersionChangeRequest">IDBTransaction</a></code></dt> <dd>The transaction object.</dd>
</dl>
</div><div id="section_25"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Exception</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The error is thrown for one of two reasons: <ul> <li>The <code>close()</code> method has been called on this IDBDatabase instance.</li> <li>The object store has been deleted or removed.</li> </ul> </td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code></td> <td>One of the object stores doesn't exist in the connected database.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
				</transaction>
			</overloads>
		</transaction>
		<haxe_doc><![CDATA[<p>The <code>IDBDatabase</code> interface of the IndexedDB&nbsp;API provides asynchronous access to a <a title="en/IndexedDB#database connection" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#database_connection">connection to a database</a>. Use it to create, manipulate, and delete objects in that database. The interface also provides the only way to get a <a title="en/IndexedDB#gloss transaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_transaction">transaction</a>&nbsp;and manage versions on that database.</p>
<p>Inherits from: <a title="en/DOM/EventTarget" rel="internal" href="/api/js/html/EventTarget">EventTarget</a></p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBDatabase">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/usr/lib/haxe/std/js/html/idb/Factory.hx" extern="1">
		<cmp public="1" set="method"><f a="first:second">
	<c path="js.html.idb.Key"/>
	<c path="js.html.idb.Key"/>
	<x path="Int"/>
</f></cmp>
		<deleteDatabase public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.idb.VersionChangeRequest"/>
</f></deleteDatabase>
		<getDatabaseNames public="1" set="method"><f a=""><c path="js.html.idb.Request"/></f></getDatabaseNames>
		<open public="1" set="method"><f a="name:?version">
	<c path="String"/>
	<x path="Int"/>
	<c path="js.html.idb.OpenDBRequest"/>
</f></open>
		<haxe_doc><![CDATA[<p>The <code>IDBFactory</code> interface of the <a title="en/IndexedDB" rel="internal" href="https://developer.mozilla.org/en/IndexedDB">IndexedDB&nbsp;API</a> lets applications asynchronously access the indexed databases. The object that implements the interface is&nbsp; <code>window.indexedDB</code>. You open—that is, create and access—and delete a database with the object and not directly with <code>IDBFactory</code>.</p>
<p>This interface still has vendor prefixes, that is to say, you have to make calls with <code>mozIndexedDB.open()</code> for Firefox and <code>webkitIndexedDB.open()</code> for Chrome.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBFactory">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/usr/lib/haxe/std/js/html/idb/Index.hx" extern="1">
		<keyPath public="1" set="null"><c path="js.html.idb.Any"/></keyPath>
		<multiEntry public="1" set="null"><x path="Bool"/></multiEntry>
		<name public="1" set="null"><c path="String"/></name>
		<objectStore public="1" set="null"><c path="js.html.idb.ObjectStore"/></objectStore>
		<unique public="1" set="null"><x path="Bool"/></unique>
		<count public="1" set="method">
			<f a="key">
				<c path="js.html.idb.Key"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Returns an <a title="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and in a separate thread, returns the number of records within a key range. For example, if you want to see how many records are between keys 1000 and 2000 in an object store, you can write the following: <code> var req = store.count(<a title="en/IndexedDB/IDBKeyRange" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBKeyRange">IDBKeyRange</a>.bound(1000, 2000));</code></p>
<pre>IDBRequest count (
  in optional any key
) raises (IDBDatabaseException);
</pre>
<div id="section_15"><span id="Parameters_3"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the record to be counted.</dd>
</dl></div><div id="section_16"><span id="Returns_3"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_17"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise a <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><count public="1" set="method">
	<f a="?range">
		<c path="js.html.idb.KeyRange"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Returns an <a title="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and in a separate thread, returns the number of records within a key range. For example, if you want to see how many records are between keys 1000 and 2000 in an object store, you can write the following: <code> var req = store.count(<a title="en/IndexedDB/IDBKeyRange" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBKeyRange">IDBKeyRange</a>.bound(1000, 2000));</code></p>
<pre>IDBRequest count (
  in optional any key
) raises (IDBDatabaseException);
</pre>
<div id="section_15"><span id="Parameters_3"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the record to be counted.</dd>
</dl></div><div id="section_16"><span id="Returns_3"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_17"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise a <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
</count></overloads>
		</count>
		<get public="1" set="method">
			<f a="key">
				<c path="js.html.idb.Key"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Returns an <a title="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, finds either:</p>
<ul> <li>The value in the referenced object store that corresponds to the given key.</li> <li>The first corresponding value, if <code>key</code> is a key range.</li>
</ul>
<p>If a value is successfully found, then a structured clone of it is created and set as the <code><a title="en/IndexedDB/IDBRequest#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest#attr_result">result</a></code> of the request object.</p>
<p></p><div class="note"><strong>Note:</strong>&nbsp;This method produces the same result for: a) a record that doesn't exist in the database and b) a record that has an undefined value. To tell these situations apart, call the openCursor() method with the same key. That method provides a cursor if the record exists, and not if it does not.</div>
<p></p>
<pre>IDBRequest get (
  in any key
) raises (IDBDatabaseException);
</pre>
<div id="section_7"><span id="Parameters"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the record to be retrieved.</dd>
</dl>
</div><div id="section_8"><span id="Returns"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_9"><span id="Exceptions"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><get public="1" set="method">
	<f a="key">
		<c path="js.html.idb.KeyRange"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Returns an <a title="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, finds either:</p>
<ul> <li>The value in the referenced object store that corresponds to the given key.</li> <li>The first corresponding value, if <code>key</code> is a key range.</li>
</ul>
<p>If a value is successfully found, then a structured clone of it is created and set as the <code><a title="en/IndexedDB/IDBRequest#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest#attr_result">result</a></code> of the request object.</p>
<p></p><div class="note"><strong>Note:</strong>&nbsp;This method produces the same result for: a) a record that doesn't exist in the database and b) a record that has an undefined value. To tell these situations apart, call the openCursor() method with the same key. That method provides a cursor if the record exists, and not if it does not.</div>
<p></p>
<pre>IDBRequest get (
  in any key
) raises (IDBDatabaseException);
</pre>
<div id="section_7"><span id="Parameters"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the record to be retrieved.</dd>
</dl>
</div><div id="section_8"><span id="Returns"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_9"><span id="Exceptions"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
</get></overloads>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<c path="js.html.idb.Key"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Returns an <a title="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, finds either:</p>
<ul> <li>The value in the index that corresponds to the given key</li> <li>The first corresponding value, if <code>key</code> is a key range.</li>
</ul>
<p>If a value is successfully found, then a structured clone of it is created and set as the <code><a title="en/IndexedDB/IDBRequest#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest#attr_result">result</a></code> of the request object.</p>
<p></p><div class="note"><strong>Note:</strong>&nbsp;This method produces the same result for: a) a record that doesn't exist in the database and b) a record that has an undefined value. To tell these situations apart, call the openCursor() method with the same key. That method provides a cursor if the record exists, and not if it does not.</div>
<p></p>
<pre>IDBRequest getKey (
  in any key
) raises (IDBDatabaseException);
</pre>
<div id="section_11"><span id="Parameters_2"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the record to be retrieved.</dd>
</dl>
</div><div id="section_12"><span id="Returns_2"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_13"><span id="Exceptions_2"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise a <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><getKey public="1" set="method">
	<f a="key">
		<c path="js.html.idb.KeyRange"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Returns an <a title="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, finds either:</p>
<ul> <li>The value in the index that corresponds to the given key</li> <li>The first corresponding value, if <code>key</code> is a key range.</li>
</ul>
<p>If a value is successfully found, then a structured clone of it is created and set as the <code><a title="en/IndexedDB/IDBRequest#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest#attr_result">result</a></code> of the request object.</p>
<p></p><div class="note"><strong>Note:</strong>&nbsp;This method produces the same result for: a) a record that doesn't exist in the database and b) a record that has an undefined value. To tell these situations apart, call the openCursor() method with the same key. That method provides a cursor if the record exists, and not if it does not.</div>
<p></p>
<pre>IDBRequest getKey (
  in any key
) raises (IDBDatabaseException);
</pre>
<div id="section_11"><span id="Parameters_2"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the record to be retrieved.</dd>
</dl>
</div><div id="section_12"><span id="Returns_2"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_13"><span id="Exceptions_2"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise a <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
</getKey></overloads>
		</getKey>
		<openCursor public="1" set="method">
			<f a="key:?direction">
				<c path="js.html.idb.Key"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, creates a <a title="en/IndexedDB#gloss cursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_cursor">cursor</a> over the specified key range. The method sets the position of the cursor to the appropriate record, based on the specified direction.</p>
<ul> <li>If the key range is not specified or is null, then the range includes all the records.</li> <li>If at least one record matches the key range, then a <a title="en/IndexedDB/IDBSuccessEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent">success event</a> is fired on the result object, with its <a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a> set to the new <a title="en/IndexedDB/IDBCursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor">IDBCursor</a> object; the <code><a title="en/IndexedDB/IDBCursor#attr value" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#attr_value">value</a></code> of the cursor object is set to a structured clone of the referenced value.</li> <li>If no records match the key range, then then an <a title="en/IndexedDB/IDBErrorEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent">error event</a> is fired on the request object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR" rel="internal">NOT_FOUND_ERR</a></code> and a suitable <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>.</li>
</ul>
<pre>IDBRequest openCursor (
  in optional any? range, 
  in optional unsigned short direction
) raises (IDBDatabaseException);
</pre>
<div id="section_19"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>range</dt> <dd><em>Optional.</em> The key range to use as the cursor's range.</dd> <dt>direction</dt> <dd><em>Optional.</em> The cursor's required <a title="en/indexedDB#gloss direction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_direction">direction</a>. See <a title="en/IndexedDB/IDBCursor#Constants" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#Constants">IDBCursor Constants</a> for possible values.</dd>
</dl>
</div><div id="section_20"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_21"><span id="Exceptions_4"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><openCursor public="1" set="method">
	<f a="?range:?direction">
		<c path="js.html.idb.KeyRange"/>
		<c path="String"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, creates a <a title="en/IndexedDB#gloss cursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_cursor">cursor</a> over the specified key range. The method sets the position of the cursor to the appropriate record, based on the specified direction.</p>
<ul> <li>If the key range is not specified or is null, then the range includes all the records.</li> <li>If at least one record matches the key range, then a <a title="en/IndexedDB/IDBSuccessEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent">success event</a> is fired on the result object, with its <a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a> set to the new <a title="en/IndexedDB/IDBCursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor">IDBCursor</a> object; the <code><a title="en/IndexedDB/IDBCursor#attr value" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#attr_value">value</a></code> of the cursor object is set to a structured clone of the referenced value.</li> <li>If no records match the key range, then then an <a title="en/IndexedDB/IDBErrorEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent">error event</a> is fired on the request object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR" rel="internal">NOT_FOUND_ERR</a></code> and a suitable <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>.</li>
</ul>
<pre>IDBRequest openCursor (
  in optional any? range, 
  in optional unsigned short direction
) raises (IDBDatabaseException);
</pre>
<div id="section_19"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>range</dt> <dd><em>Optional.</em> The key range to use as the cursor's range.</dd> <dt>direction</dt> <dd><em>Optional.</em> The cursor's required <a title="en/indexedDB#gloss direction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_direction">direction</a>. See <a title="en/IndexedDB/IDBCursor#Constants" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#Constants">IDBCursor Constants</a> for possible values.</dd>
</dl>
</div><div id="section_20"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_21"><span id="Exceptions_4"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
</openCursor></overloads>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="key:?direction">
				<c path="js.html.idb.Key"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index. The method sets the position of the cursor to the appropriate record, based on the specified direction.</p>
<ul> <li>If the key range is not specified or is null, then the range includes all the records.</li> <li>If at least one record matches the key range, then a <a title="en/IndexedDB/IDBSuccessEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent">success event</a> is fired on the result object, with its <a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a> set to the new <a title="en/IndexedDB/IDBCursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor">IDBCursor</a> object; the <code><a title="en/IndexedDB/IDBCursor#attr value" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#attr_value">value</a></code> of the cursor object is set to the value of the found record.</li> <li>If no records match the key range, then then an <a title="en/IndexedDB/IDBErrorEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent">error event</a> is fired on the request object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR" rel="internal">NOT_FOUND_ERR</a></code> and a suitable <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>.</li>
</ul>
<pre>IDBRequest openKeyCursor (
  in optional any? range, 
  in optional unsigned short direction
) raises (IDBDatabaseException);
</pre>
<div id="section_23"><span id="Parameters_5"></span><h5 class="editable">Parameters</h5>
<dl> <dt>range</dt> <dd><em>Optional.</em> The key range to use as the cursor's range.</dd> <dt>direction</dt> <dd><em>Optional.</em> The cursor's required direction. See <a title="en/IndexedDB/IDBCursor#Constants" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#Constants">IDBCursor Constants</a> for possible values.</dd>
</dl>
</div><div id="section_24"><span id="Returns_5"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_25"><span id="Exceptions_5"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><openKeyCursor public="1" set="method">
	<f a="?range:?direction">
		<c path="js.html.idb.KeyRange"/>
		<c path="String"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index. The method sets the position of the cursor to the appropriate record, based on the specified direction.</p>
<ul> <li>If the key range is not specified or is null, then the range includes all the records.</li> <li>If at least one record matches the key range, then a <a title="en/IndexedDB/IDBSuccessEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent">success event</a> is fired on the result object, with its <a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a> set to the new <a title="en/IndexedDB/IDBCursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor">IDBCursor</a> object; the <code><a title="en/IndexedDB/IDBCursor#attr value" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#attr_value">value</a></code> of the cursor object is set to the value of the found record.</li> <li>If no records match the key range, then then an <a title="en/IndexedDB/IDBErrorEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent">error event</a> is fired on the request object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR" rel="internal">NOT_FOUND_ERR</a></code> and a suitable <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>.</li>
</ul>
<pre>IDBRequest openKeyCursor (
  in optional any? range, 
  in optional unsigned short direction
) raises (IDBDatabaseException);
</pre>
<div id="section_23"><span id="Parameters_5"></span><h5 class="editable">Parameters</h5>
<dl> <dt>range</dt> <dd><em>Optional.</em> The key range to use as the cursor's range.</dd> <dt>direction</dt> <dd><em>Optional.</em> The cursor's required direction. See <a title="en/IndexedDB/IDBCursor#Constants" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor#Constants">IDBCursor Constants</a> for possible values.</dd>
</dl>
</div><div id="section_24"><span id="Returns_5"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest" rel="internal">IDBRequest</a></code></dt>
</dl>
<dl> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_25"><span id="Exceptions_5"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR"><code>TRANSACTION_INACTIVE_ERR</code></a></td> <td>The index's transaction is not active.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></td> <td>The <code>key</code> parameter was not a valid value.</td> </tr> <tr> <td><code><a title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></td> <td>The request was made on a source object that has been deleted or removed.</td> </tr> </tbody>
</table>
</div> Throws DatabaseException.]]></haxe_doc>
</openKeyCursor></overloads>
		</openKeyCursor>
		<haxe_doc><![CDATA[<p>The <code>IDBIndex</code> interface of the <a title="en/IndexedDB" rel="internal" href="https://developer.mozilla.org/en/IndexedDB">IndexedDB API</a> provides asynchronous access to an <a title="en/IndexedDB#gloss index" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_index">index</a> in a database. An index is a kind of object store for looking up records in another object store, called the <em>referenced object store</em>. You use this interface to retrieve data.</p>
<p>Inherits from: <a title="en/DOM/EventTarget" rel="internal" href="/api/js/html/EventTarget">EventTarget</a></p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBIndex">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<class path="js.html.idb.Key" params="" file="/usr/lib/haxe/std/js/html/idb/Key.hx" extern="1"><meta><m n=":native"><e>"IDBKey"</e></m></meta></class>
	<class path="js.html.idb.KeyRange" params="" file="/usr/lib/haxe/std/js/html/idb/KeyRange.hx" extern="1">
		<bound public="1" set="method" static="1"><f a="lower:upper:?lowerOpen:?upperOpen">
	<c path="js.html.idb.Key"/>
	<c path="js.html.idb.Key"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.idb.KeyRange"/>
</f></bound>
		<lowerBound public="1" set="method" static="1"><f a="bound:?open">
	<c path="js.html.idb.Key"/>
	<x path="Bool"/>
	<c path="js.html.idb.KeyRange"/>
</f></lowerBound>
		<only public="1" set="method" static="1"><f a="value">
	<c path="js.html.idb.Key"/>
	<c path="js.html.idb.KeyRange"/>
</f></only>
		<upperBound public="1" set="method" static="1"><f a="bound:?open">
	<c path="js.html.idb.Key"/>
	<x path="Bool"/>
	<c path="js.html.idb.KeyRange"/>
</f></upperBound>
		<lower public="1" set="null"><c path="js.html.idb.Key"/></lower>
		<lowerOpen public="1" set="null"><x path="Bool"/></lowerOpen>
		<upper public="1" set="null"><c path="js.html.idb.Key"/></upper>
		<upperOpen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if the upper-bound value is included in the key range.</haxe_doc>
		</upperOpen>
		<haxe_doc><![CDATA[The <code>IDBKeyRange</code> interface of the <a title="en/IndexedDB" rel="internal" href="https://developer.mozilla.org/en/IndexedDB">IndexedDB API</a> represents a continuous interval over some data type that is used for keys. Records can be retrieved from object stores and indexes using keys or a range of keys. You can limit the range using lower and upper bounds. For example, you can iterate over all values of a key between x and y.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBKeyRange">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBKeyRange"</e></m></meta>
	</class>
	<class path="js.html.idb.ObjectStore" params="" file="/usr/lib/haxe/std/js/html/idb/ObjectStore.hx" extern="1">
		<autoIncrement public="1" set="null"><x path="Bool"/></autoIncrement>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc><![CDATA[A list of the names of <a title="en/IndexedDB#gloss index" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_index">indexes</a> on objects in this object store.]]></haxe_doc>
		</indexNames>
		<keyPath public="1" set="null">
			<c path="js.html.idb.Any"/>
			<haxe_doc><![CDATA[The <a title="en/IndexedDB#gloss key path" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_key_path">key path</a> of this object store. If this attribute is null, the application must provide a key for each modification operation.]]></haxe_doc>
		</keyPath>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<transaction public="1" set="null"><c path="js.html.idb.Transaction"/></transaction>
		<add public="1" set="method"><f a="value:?key">
	<d/>
	<c path="js.html.idb.Key"/>
	<c path="js.html.idb.Request"/>
</f></add>
		<clear public="1" set="method"><f a=""><c path="js.html.idb.Request"/></f></clear>
		<count public="1" set="method">
			<f a="key">
				<c path="js.html.idb.Key"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Immediately returns an <a title="IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object and asynchronously count the amount of objects in the object store that match the parameter, a key or a key range. If the parameter is not valid returns an exception.</p>

<div id="section_12"><span id="Parameters_2"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the records to be counted.</dd>
</dl>
</div><div id="section_13"><span id="Returns_3"></span><h5 class="editable">Returns</h5>
<dl> <dt><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_14"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<dl> <dt><code><a href="IDBDatabaseException#DATA_ERR" rel="internal" title="en/IndexedDB/DatabaseException#DATA ERR">DATA_ERR</a></code></dt> <dd>If the object store uses in-line keys or has a key generator, and a key parameter was provided.<br> If the object store uses out-of-line keys and has no key generator, and no key parameter was provided.<br> If the object store uses in-line keys but no key generator, and the object store's key path does not yield a valid key.<br> If the key parameter was provided but does not contain a valid key.<br> If there are indexed on this object store, and using their key path on the value parameter yields a value that is not a valid key.</dd> <dt><code><a href="IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></dt> <dd>The request was made on a source object that has been deleted or removed.</dd>
</dl></div> Throws DatabaseException.]]></haxe_doc>
			<overloads><count public="1" set="method">
	<f a="?range">
		<c path="js.html.idb.KeyRange"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Immediately returns an <a title="IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object and asynchronously count the amount of objects in the object store that match the parameter, a key or a key range. If the parameter is not valid returns an exception.</p>

<div id="section_12"><span id="Parameters_2"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key or key range that identifies the records to be counted.</dd>
</dl>
</div><div id="section_13"><span id="Returns_3"></span><h5 class="editable">Returns</h5>
<dl> <dt><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_14"><span id="Exceptions_3"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<dl> <dt><code><a href="IDBDatabaseException#DATA_ERR" rel="internal" title="en/IndexedDB/DatabaseException#DATA ERR">DATA_ERR</a></code></dt> <dd>If the object store uses in-line keys or has a key generator, and a key parameter was provided.<br> If the object store uses out-of-line keys and has no key generator, and no key parameter was provided.<br> If the object store uses in-line keys but no key generator, and the object store's key path does not yield a valid key.<br> If the key parameter was provided but does not contain a valid key.<br> If there are indexed on this object store, and using their key path on the value parameter yields a value that is not a valid key.</dd> <dt><code><a href="IDBDatabaseException#NOT_ALLOWED_ERR" rel="internal" title="en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></dt> <dd>The request was made on a source object that has been deleted or removed.</dd>
</dl></div> Throws DatabaseException.]]></haxe_doc>
</count></overloads>
		</count>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?options">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc><![CDATA[<p>Creates and returns a new index in the connected database. Note that this method must be called only from a <a title="en/IndexedDB/IDBTransaction#VERSION CHANGE" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#VERSION_CHANGE"><code>VERSION_CHANGE</code></a> transaction callback.</p>
<pre>IDBIndex createIndex (
&nbsp; in DOMString name, 
&nbsp; in DOMString keyPath, 
&nbsp; in Object optionalParameters
) raises (IDBDatabaseException);

</pre>
<div id="section_16"><span id="Parameters_3"></span><h5 class="editable">Parameters</h5>
<dl> <dt>name</dt> <dd>The name of the index to create.</dd> <dt>keyPath</dt> <dd>The key path for the index to use.</dd> <dt>optionalParameters</dt> <dd> <div class="warning"><strong>Warning:</strong> The latest draft of the specification changed this to <code>IDBIndexParameters</code>, which is not yet recognized by any browser</div> <p>Options object whose attributes are optional parameters to the method. It includes the following properties:</p> <table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code>unique</code></td> <td>If true, the index will not allow duplicate values for a single key.</td> </tr> <tr> <td><code>multientry</code></td> <td>If true, the index will add an entry in the index for each array element when the <em>keypath</em> resolves to an Array. If false, it will add one single entry containing the Array.</td> </tr> </tbody> </table> <p>Unknown parameters are ignored.</p> </dd> <dd></dd>
</dl>
</div><div id="section_17"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><a title="en/IndexedDB/IDBIndex" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBIndex">IDBIndex</a></dt> <dd>The newly created index.</dd>
</dl>
</div><div id="section_18"><span id="Exceptions_4"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<dl> <dt><code><a title="en/IndexedDB/DatabaseException#CONSTRAINT ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#CONSTRAINT_ERR">CONSTRAINT_ERR</a></code></dt> <dd>If an index with the same name (based on case-sensitive comparison) already exists in the connected database.</dd> <dt><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></dt> <dd>If this method was not called from a <a title="en/IndexedDB/IDBTransaction#VERSION CHANGE" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#VERSION_CHANGE"><code>VERSION_CHANGE</code></a> transaction callback.</dd>
</dl></div> Throws DatabaseException.]]></haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?options">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<d/>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc><![CDATA[<p>Creates and returns a new index in the connected database. Note that this method must be called only from a <a title="en/IndexedDB/IDBTransaction#VERSION CHANGE" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#VERSION_CHANGE"><code>VERSION_CHANGE</code></a> transaction callback.</p>
<pre>IDBIndex createIndex (
&nbsp; in DOMString name, 
&nbsp; in DOMString keyPath, 
&nbsp; in Object optionalParameters
) raises (IDBDatabaseException);

</pre>
<div id="section_16"><span id="Parameters_3"></span><h5 class="editable">Parameters</h5>
<dl> <dt>name</dt> <dd>The name of the index to create.</dd> <dt>keyPath</dt> <dd>The key path for the index to use.</dd> <dt>optionalParameters</dt> <dd> <div class="warning"><strong>Warning:</strong> The latest draft of the specification changed this to <code>IDBIndexParameters</code>, which is not yet recognized by any browser</div> <p>Options object whose attributes are optional parameters to the method. It includes the following properties:</p> <table class="standard-table"> <thead> <tr> <th scope="col" width="131">Attribute</th> <th scope="col" width="698">Description</th> </tr> </thead> <tbody> <tr> <td><code>unique</code></td> <td>If true, the index will not allow duplicate values for a single key.</td> </tr> <tr> <td><code>multientry</code></td> <td>If true, the index will add an entry in the index for each array element when the <em>keypath</em> resolves to an Array. If false, it will add one single entry containing the Array.</td> </tr> </tbody> </table> <p>Unknown parameters are ignored.</p> </dd> <dd></dd>
</dl>
</div><div id="section_17"><span id="Returns_4"></span><h5 class="editable">Returns</h5>
<dl> <dt><a title="en/IndexedDB/IDBIndex" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBIndex">IDBIndex</a></dt> <dd>The newly created index.</dd>
</dl>
</div><div id="section_18"><span id="Exceptions_4"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p>
<dl> <dt><code><a title="en/IndexedDB/DatabaseException#CONSTRAINT ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#CONSTRAINT_ERR">CONSTRAINT_ERR</a></code></dt> <dd>If an index with the same name (based on case-sensitive comparison) already exists in the connected database.</dd> <dt><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></dt> <dd>If this method was not called from a <a title="en/IndexedDB/IDBTransaction#VERSION CHANGE" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction#VERSION_CHANGE"><code>VERSION_CHANGE</code></a> transaction callback.</dd>
</dl></div> Throws DatabaseException.]]></haxe_doc>
</createIndex></overloads>
		</createIndex>
		<delete public="1" set="method">
			<f a="key">
				<c path="js.html.idb.Key"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Immediately returns an <code><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></code> object, and removes the record specified by the given key from this object store, and any indexes that reference it, in a separate thread. If no record exists in this object store corresponding to the key, an error event is fired on the returned request object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code> and an appropriate <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>. If the record is successfully removed, then a success event is fired on the returned request object, using the <code><a title="en/IndexedDB/IDBTransactionEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent">IDBTransactionEvent</a></code> interface, with the <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to <code>undefined</code>, and <a title="en/IndexedDB/IDBTransactionEvent#attr transaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent#attr_transaction">transaction</a> set to the transaction in which this object store is opened.</p>
<pre>IDBRequest delete (
  in any key
) raises (IDBDatabaseException); 
</pre>
<div id="section_20"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key to use to identify the record.</dd>
</dl>
</div><div id="section_21"><span id="Returns_5"></span><h5 class="editable">Returns</h5>
<dl> <dt><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_22"><span id="Exceptions_5"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p></div> Throws DatabaseException.]]></haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="keyRange">
		<c path="js.html.idb.KeyRange"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Immediately returns an <code><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></code> object, and removes the record specified by the given key from this object store, and any indexes that reference it, in a separate thread. If no record exists in this object store corresponding to the key, an error event is fired on the returned request object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code> and an appropriate <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>. If the record is successfully removed, then a success event is fired on the returned request object, using the <code><a title="en/IndexedDB/IDBTransactionEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent">IDBTransactionEvent</a></code> interface, with the <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to <code>undefined</code>, and <a title="en/IndexedDB/IDBTransactionEvent#attr transaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent#attr_transaction">transaction</a> set to the transaction in which this object store is opened.</p>
<pre>IDBRequest delete (
  in any key
) raises (IDBDatabaseException); 
</pre>
<div id="section_20"><span id="Parameters_4"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key to use to identify the record.</dd>
</dl>
</div><div id="section_21"><span id="Returns_5"></span><h5 class="editable">Returns</h5>
<dl> <dt><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_22"><span id="Exceptions_5"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following codes:</p></div> Throws DatabaseException.]]></haxe_doc>
</delete></overloads>
		</delete>
		<deleteIndex public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></deleteIndex>
		<get public="1" set="method">
			<f a="key">
				<c path="js.html.idb.Key"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and retrieves the requested record from the object store in a separate thread. If the operation is successful, then a success event is fired on the returned object, using the <a title="en/IndexedDB/IDBTransactionEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent">IDBTransactionEvent</a> interface, with its <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to the retrieved value, and <code><a title="en/IndexedDB/IDBTransactionEvent#attr transaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent#attr_transaction">transaction</a></code> set to the transaction in which this object store is opened. If a record does not exist in the object store for the key parameter, then an error event is fired on the returned object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code> and an appropriate <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>.</p>
<p></p><div class="note"><strong>Note:</strong>&nbsp;This function produces the same result if no record with the given key exists in the database as when a record exists, but with an undefined value. To tell these situations apart, call the openCursor() method with the same key. That method provides a cursor if the record exists, and not if it does not.</div>
<p></p>

<div id="section_27"><span id="Parameters_6"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key identifying the record to retrieve.</dd>
</dl>
</div><div id="section_28"><span id="Returns_6"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></code></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_29"><span id="Exceptions_7"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<dl> <dt><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></dt> <dd>If the <code>key</code> parameter was not a valid value.</dd> <dt><code><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR">TRANSACTION_INACTIVE_ERR</a></code></dt> <dd>If the associated transaction is not active.</dd>
</dl>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><get public="1" set="method">
	<f a="key">
		<c path="js.html.idb.KeyRange"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and retrieves the requested record from the object store in a separate thread. If the operation is successful, then a success event is fired on the returned object, using the <a title="en/IndexedDB/IDBTransactionEvent" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent">IDBTransactionEvent</a> interface, with its <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to the retrieved value, and <code><a title="en/IndexedDB/IDBTransactionEvent#attr transaction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBTransactionEvent#attr_transaction">transaction</a></code> set to the transaction in which this object store is opened. If a record does not exist in the object store for the key parameter, then an error event is fired on the returned object, with its <code><a title="en/IndexedDB/IDBErrorEvent#attr code" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_code">code</a></code> set to <code><a title="en/IndexedDB/IDBDatabaseException#NOT FOUND ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_FOUND_ERR">NOT_FOUND_ERR</a></code> and an appropriate <code><a title="en/IndexedDB/IDBErrorEvent#attr message" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBErrorEvent#attr_message">message</a></code>.</p>
<p></p><div class="note"><strong>Note:</strong>&nbsp;This function produces the same result if no record with the given key exists in the database as when a record exists, but with an undefined value. To tell these situations apart, call the openCursor() method with the same key. That method provides a cursor if the record exists, and not if it does not.</div>
<p></p>

<div id="section_27"><span id="Parameters_6"></span><h5 class="editable">Parameters</h5>
<dl> <dt>key</dt> <dd>The key identifying the record to retrieve.</dd>
</dl>
</div><div id="section_28"><span id="Returns_6"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></code></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_29"><span id="Exceptions_7"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an <a title="en/IndexedDB/IDBDatabaseException" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException">IDBDatabaseException</a> with the following code:</p>
<dl> <dt><code><a title="en/IndexedDB/IDBDatabaseException#DATA ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#DATA_ERR">DATA_ERR</a></code></dt> <dd>If the <code>key</code> parameter was not a valid value.</dd> <dt><code><a title="en/IndexedDB/IDBDatabaseException#TRANSACTION INACTIVE ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#TRANSACTION_INACTIVE_ERR">TRANSACTION_INACTIVE_ERR</a></code></dt> <dd>If the associated transaction is not active.</dd>
</dl>
</div> Throws DatabaseException.]]></haxe_doc>
</get></overloads>
		</get>
		<index public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.idb.Index"/>
</f></index>
		<openCursor public="1" set="method">
			<f a="key:?direction">
				<c path="js.html.idb.Key"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and creates a <a title="en/IndexedDB#gloss cursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_cursor">cursor</a> over the records in this object store, in a separate thread. If there is even a single record that matches the <a title="en/IndexedDB#gloss key range" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_key_range">key range</a>, then a success event is fired on the returned object, with its <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to the <a title="en/IndexedDB/IDBCursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor">IDBCursor</a> object for the new cursor. If no records match the key range, then a success event is fired on the returned object, with its <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to null.</p>
<pre>IDBRequest openCursor (
&nbsp; in optional IDBKeyRange range, 
&nbsp; in optional unsigned short direction
) raises (IDBDatabaseException);
</pre>
<div id="section_35"><span id="Parameters_8"></span><h5 class="editable">Parameters</h5>
<dl> <dt>range</dt> <dd>The key range to use as the cursor's range. If this parameter is unspecified or null, then the range includes all the records in the object store.</dd> <dt>direction</dt> <dd>The cursor's <a title="en/IndexedDB#gloss direction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_direction">direction</a>.</dd>
</dl>
</div><div id="section_36"><span id="Returns_8"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></code></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_37"><span id="Exceptions_9"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an IDBDatabaseException with the following code:</p>
<dl> <dt><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></dt> <dd>If this object store is not in the scope of any existing transaction on the connected database.</dd>
</dl>
</div> Throws DatabaseException.]]></haxe_doc>
			<overloads><openCursor public="1" set="method">
	<f a="?range:?direction">
		<c path="js.html.idb.KeyRange"/>
		<c path="String"/>
		<c path="js.html.idb.Request"/>
	</f>
	<haxe_doc><![CDATA[<p>Immediately returns an <a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a> object, and creates a <a title="en/IndexedDB#gloss cursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_cursor">cursor</a> over the records in this object store, in a separate thread. If there is even a single record that matches the <a title="en/IndexedDB#gloss key range" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_key_range">key range</a>, then a success event is fired on the returned object, with its <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to the <a title="en/IndexedDB/IDBCursor" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBCursor">IDBCursor</a> object for the new cursor. If no records match the key range, then a success event is fired on the returned object, with its <code><a title="en/IndexedDB/IDBSuccessEvent#attr result" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBSuccessEvent#attr_result">result</a></code> set to null.</p>
<pre>IDBRequest openCursor (
&nbsp; in optional IDBKeyRange range, 
&nbsp; in optional unsigned short direction
) raises (IDBDatabaseException);
</pre>
<div id="section_35"><span id="Parameters_8"></span><h5 class="editable">Parameters</h5>
<dl> <dt>range</dt> <dd>The key range to use as the cursor's range. If this parameter is unspecified or null, then the range includes all the records in the object store.</dd> <dt>direction</dt> <dd>The cursor's <a title="en/IndexedDB#gloss direction" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_direction">direction</a>.</dd>
</dl>
</div><div id="section_36"><span id="Returns_8"></span><h5 class="editable">Returns</h5>
<dl> <dt><code><a title="en/IndexedDB/IDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">IDBRequest</a></code></dt> <dd>A request object on which subsequent events related to this operation are fired.</dd>
</dl>
</div><div id="section_37"><span id="Exceptions_9"></span><h5 class="editable">Exceptions</h5>
<p>This method can raise an IDBDatabaseException with the following code:</p>
<dl> <dt><code><a title="en/IndexedDB/DatabaseException#NOT ALLOWED ERR" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabaseException#NOT_ALLOWED_ERR">NOT_ALLOWED_ERR</a></code></dt> <dd>If this object store is not in the scope of any existing transaction on the connected database.</dd>
</dl>
</div> Throws DatabaseException.]]></haxe_doc>
</openCursor></overloads>
		</openCursor>
		<put public="1" set="method"><f a="value:?key">
	<d/>
	<c path="js.html.idb.Key"/>
	<c path="js.html.idb.Request"/>
</f></put>
		<haxe_doc><![CDATA[The <code>IDBObjectStore</code> interface of the <a title="en/IndexedDB" rel="internal" href="https://developer.mozilla.org/en/IndexedDB">IndexedDB API</a> represents an <a title="en/IndexedDB#gloss object store" rel="internal" href="https://developer.mozilla.org/en/IndexedDB#gloss_object_store">object store</a> in a database.&nbsp;Records within an object store are sorted according to their keys. This sorting enable fast insertion, look-up, and &nbsp;ordered retrieval.&nbsp;<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBObjectStore">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<class path="js.html.idb.Request" params="" file="/usr/lib/haxe/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<error public="1" set="null">
			<c path="js.html.DOMError"/>
			<haxe_doc>Getter throws DatabaseException.</haxe_doc>
		</error>
		<errorCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Getter throws DatabaseException.</haxe_doc>
		</errorCode>
		<errorMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Getter throws DatabaseException.</haxe_doc>
		</errorMessage>
		<onerror public="1"><t path="js.html.EventListener"/></onerror>
		<onsuccess public="1"><t path="js.html.EventListener"/></onsuccess>
		<readyState public="1" set="null"><c path="String"/></readyState>
		<result public="1" set="null">
			<c path="js.html.idb.Any"/>
			<haxe_doc>Getter throws DatabaseException.</haxe_doc>
		</result>
		<source public="1" set="null"><c path="js.html.idb.Any"/></source>
		<transaction public="1" set="null"><c path="js.html.idb.Transaction"/></transaction>
		<haxe_doc><![CDATA[<p>The <code>IDBRequest</code> interface of the IndexedDB&nbsp;API provides access to results of asynchronous requests to databases and database objects using event handler attributes. Each reading and writing operation on a database is done using a request.</p>
<p>The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the <code>IDBRequest</code> instance.</p>
<p>Inherits from: <a title="en/DOM/EventTarget" rel="internal" href="/api/js/html/EventTarget">EventTarget</a></p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBRequest">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/usr/lib/haxe/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1"><t path="js.html.EventListener"/></onblocked>
		<onupgradeneeded public="1"><t path="js.html.EventListener"/></onupgradeneeded>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.Transaction" params="" file="/usr/lib/haxe/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<READ_ONLY public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Allows data to be read but not changed.&nbsp;]]></haxe_doc>
		</READ_ONLY>
		<READ_WRITE public="1" get="inline" set="null" line="36" static="1">
			<x path="Int"/>
			<haxe_doc>Allows reading and writing of data in existing data stores to be changed.</haxe_doc>
		</READ_WRITE>
		<VERSION_CHANGE public="1" get="inline" set="null" line="39" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Allows any operation to be performed, including ones that delete and create object stores and indexes. This mode is for updating the version number of transactions that were started using the <a title="en/IndexedDB/IDBDatabase#setVersion" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabase#setVersion"><code>setVersion()</code></a> method of <a title="en/IndexedDB/IDBDatabase" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabase">IDBDatabase</a> objects. Transactions of this mode cannot run concurrently with other transactions.]]></haxe_doc>
		</VERSION_CHANGE>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection that this transaction is associated with.</haxe_doc>
		</db>
		<error public="1" set="null"><c path="js.html.DOMError"/></error>
		<mode public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see Constants. The default value is <code><a href="#const_read_only" title="#const read only">READ_ONLY</a></code>.]]></haxe_doc>
		</mode>
		<onabort public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[The event handler for the <code>onabort</code> event.]]></haxe_doc>
		</onabort>
		<oncomplete public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[The event handler for the <code>oncomplete</code> event.]]></haxe_doc>
		</oncomplete>
		<onerror public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc><![CDATA[The event handler for the <code>error </code>event.]]></haxe_doc>
		</onerror>
		<abort public="1" set="method"><f a=""><x path="Void"/></f></abort>
		<objectStore public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.idb.ObjectStore"/>
</f></objectStore>
		<haxe_doc><![CDATA[<p>The <code>IDBTransaction</code> interface of the <a title="en/IndexedDB" rel="internal" href="https://developer.mozilla.org/en/IndexedDB">IndexedDB&nbsp;API</a> provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data are done within transactions. You actually use <code><a title="en/IndexedDB/IDBDatabase" rel="internal" href="/api/js/html/idb/Database">IDBDatabase</a></code> to start transactions and use <code>IDBTransaction</code> to set the mode of the transaction and access an object store and make your request. You can also use it to abort transactions.</p>
<p>Inherits from: <a title="en/DOM/EventTarget" rel="internal" href="/api/js/html/EventTarget">EventTarget</a></p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBTransaction">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<class path="js.html.idb.VersionChangeRequest" params="" file="/usr/lib/haxe/std/js/html/idb/VersionChangeRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<t path="js.html.EventListener"/>
			<haxe_doc>The event handler for the blocked event.</haxe_doc>
		</onblocked>
		<haxe_doc><![CDATA[<div class="warning"><strong>Warning: </strong> The latest specification does not include this interface anymore as the <code>IDBDatabase.setVersion()</code> method has been removed. However, it is still implemented in not up-to-date browsers. See the compatibility table for version details.<br> The new way to do it is to use the <a title="en/IndexedDB/IDBOpenDBRequest" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBOpenDBRequest"><code>IDBOpenDBRequest</code></a> interface which has now the <code>onblocked</code> handler and the newly needed <code>onupgradeneeded</code> one.</div>
<p>The <code>IDBVersionChangeRequest</code> interface the <a title="en/IndexedDB" rel="internal" href="https://developer.mozilla.org/en/IndexedDB">IndexedDB API </a>represents a request to change the version of a database. It is used only by the <a title="en/IndexedDB/IDBDatabase#setVersion" rel="internal" href="https://developer.mozilla.org/en/IndexedDB/IDBDatabase#setVersion"><code>setVersion()</code></a> method of <code><a title="en/IndexedDB/IDBDatabase" rel="internal" href="/api/js/html/idb/Database">IDBDatabase</a></code>.</p>
<p>Inherits from:&nbsp;<code><a title="en/IndexedDB/IDBRequest" rel="internal" href="/api/js/html/idb/Request">IDBRequest</a></code></p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/IndexedDB/IDBVersionChangeRequest">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"IDBVersionChangeRequest"</e></m></meta>
	</class>
	<class path="js.html.rtc.MediaStream" params="" file="/usr/lib/haxe/std/js/html/rtc/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ENDED public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></ENDED>
		<LIVE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></LIVE>
		<audioTracks public="1" set="null"><c path="js.html.rtc.MediaStreamTrackList"/></audioTracks>
		<label public="1" set="null"><c path="String"/></label>
		<onended public="1"><t path="js.html.EventListener"/></onended>
		<readyState public="1" set="null"><x path="Int"/></readyState>
		<videoTracks public="1" set="null"><c path="js.html.rtc.MediaStreamTrackList"/></videoTracks>
		<new public="1" set="method"><f a="audioTracks:videoTracks">
	<c path="js.html.rtc.MediaStreamTrackList"/>
	<c path="js.html.rtc.MediaStreamTrackList"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.rtc.LocalMediaStream" params="" file="/usr/lib/haxe/std/js/html/rtc/LocalMediaStream.hx" extern="1">
		<extends path="js.html.rtc.MediaStream"/>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<meta><m n=":native"><e>"LocalMediaStream"</e></m></meta>
	</class>
	<class path="js.html.rtc.MediaStreamTrack" params="" file="/usr/lib/haxe/std/js/html/rtc/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ENDED public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></ENDED>
		<LIVE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></LIVE>
		<MUTED public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></MUTED>
		<enabled public="1"><x path="Bool"/></enabled>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<onended public="1"><t path="js.html.EventListener"/></onended>
		<onmute public="1"><t path="js.html.EventListener"/></onmute>
		<onunmute public="1"><t path="js.html.EventListener"/></onunmute>
		<readyState public="1" set="null"><x path="Int"/></readyState>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.rtc.MediaStreamTrackList" params="" file="/usr/lib/haxe/std/js/html/rtc/MediaStreamTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onaddtrack public="1"><t path="js.html.EventListener"/></onaddtrack>
		<onremovetrack public="1"><t path="js.html.EventListener"/></onremovetrack>
		<add public="1" set="method"><f a="track">
	<c path="js.html.rtc.MediaStreamTrack"/>
	<x path="Void"/>
</f></add>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.rtc.MediaStreamTrack"/>
</f></item>
		<remove public="1" set="method"><f a="track">
	<c path="js.html.rtc.MediaStreamTrack"/>
	<x path="Void"/>
</f></remove>
		<meta><m n=":native"><e>"MediaStreamTrackList"</e></m></meta>
	</class>
	<class path="js.html.rtc.NavigatorUserMediaError" params="" file="/usr/lib/haxe/std/js/html/rtc/NavigatorUserMediaError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></PERMISSION_DENIED>
		<code public="1" set="null"><x path="Int"/></code>
		<meta><m n=":native"><e>"NavigatorUserMediaError"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.NavigatorUserMediaErrorCallback" params="" file="/usr/lib/haxe/std/js/html/rtc/NavigatorUserMediaErrorCallback.hx"><f a="">
	<c path="js.html.rtc.NavigatorUserMediaError"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.rtc.NavigatorUserMediaSuccessCallback" params="" file="/usr/lib/haxe/std/js/html/rtc/NavigatorUserMediaSuccessCallback.hx"><f a="">
	<c path="js.html.rtc.LocalMediaStream"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.sql.Database" params="" file="/usr/lib/haxe/std/js/html/sql/Database.hx" extern="1">
		<version public="1" set="null"><c path="String"/></version>
		<changeVersion public="1" set="method"><f a="oldVersion:newVersion:?callback_:?errorCallback:?successCallback">
	<c path="String"/>
	<c path="String"/>
	<t path="js.html.sql.TransactionCallback"/>
	<t path="js.html.sql.TransactionErrorCallback"/>
	<t path="js.html.VoidCallback"/>
	<x path="Void"/>
</f></changeVersion>
		<readTransaction public="1" set="method"><f a="callback_:?errorCallback:?successCallback">
	<t path="js.html.sql.TransactionCallback"/>
	<t path="js.html.sql.TransactionErrorCallback"/>
	<t path="js.html.VoidCallback"/>
	<x path="Void"/>
</f></readTransaction>
		<transaction public="1" set="method"><f a="callback_:?errorCallback:?successCallback">
	<t path="js.html.sql.TransactionCallback"/>
	<t path="js.html.sql.TransactionErrorCallback"/>
	<t path="js.html.VoidCallback"/>
	<x path="Void"/>
</f></transaction>
		<haxe_doc><![CDATA[<div><p>This content covers features introduced in <a rel="custom" href="https://developer.mozilla.org/en/Firefox_3_for_developers">Firefox 3</a>.</p></div>
<p></p>
<p>This document provides a high-level overview of the overall database design of the <a title="en/Places" rel="internal" href="https://developer.mozilla.org/en/Places">Places</a> system. Places is designed to be a complete replacement for the Firefox bookmarks and history systems using <a title="en/Storage" rel="internal" href="/api/js/html/Storage">Storage.</a></p>
<p>View the <a class=" external" rel="external" href="http://people.mozilla.org/~dietrich/places-erd.png" title="http://people.mozilla.org/~dietrich/places-erd.png" target="_blank">schema diagram</a>.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/The_Places_database">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"Database"</e></m></meta>
	</class>
	<typedef path="js.html.sql.DatabaseCallback" params="" file="/usr/lib/haxe/std/js/html/sql/DatabaseCallback.hx"><f a="">
	<c path="js.html.sql.Database"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.sql.Error" params="" file="/usr/lib/haxe/std/js/html/sql/Error.hx" extern="1">
		<CONSTRAINT_ERR public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></CONSTRAINT_ERR>
		<DATABASE_ERR public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></DATABASE_ERR>
		<QUOTA_ERR public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></QUOTA_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></SYNTAX_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></TIMEOUT_ERR>
		<TOO_LARGE_ERR public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></TOO_LARGE_ERR>
		<UNKNOWN_ERR public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></UNKNOWN_ERR>
		<VERSION_ERR public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></VERSION_ERR>
		<code public="1" set="null"><x path="Int"/></code>
		<message public="1" set="null"><c path="String"/></message>
		<meta><m n=":native"><e>"SQLError"</e></m></meta>
	</class>
	<class path="js.html.sql.ResultSet" params="" file="/usr/lib/haxe/std/js/html/sql/ResultSet.hx" extern="1">
		<insertId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Getter throws DOMException.</haxe_doc>
		</insertId>
		<rows public="1" set="null"><c path="js.html.sql.ResultSetRowList"/></rows>
		<rowsAffected public="1" set="null"><x path="Int"/></rowsAffected>
		<meta><m n=":native"><e>"SQLResultSet"</e></m></meta>
	</class>
	<class path="js.html.sql.ResultSetRowList" params="" file="/usr/lib/haxe/std/js/html/sql/ResultSetRowList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<d/>
</f></item>
		<meta><m n=":native"><e>"SQLResultSetRowList"</e></m></meta>
	</class>
	<typedef path="js.html.sql.StatementCallback" params="" file="/usr/lib/haxe/std/js/html/sql/StatementCallback.hx"><f a=":">
	<c path="js.html.sql.Transaction"/>
	<c path="js.html.sql.ResultSet"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.sql.StatementErrorCallback" params="" file="/usr/lib/haxe/std/js/html/sql/StatementErrorCallback.hx"><f a=":">
	<c path="js.html.sql.Transaction"/>
	<c path="js.html.sql.Error"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.sql.Transaction" params="" file="/usr/lib/haxe/std/js/html/sql/Transaction.hx" extern="1">
		<executeSql public="1" set="method"><f a="sqlStatement:arguments:?callback_:?errorCallback">
	<c path="String"/>
	<c path="Array"><d/></c>
	<t path="js.html.sql.StatementCallback"/>
	<t path="js.html.sql.StatementErrorCallback"/>
	<x path="Void"/>
</f></executeSql>
		<meta><m n=":native"><e>"SQLTransaction"</e></m></meta>
	</class>
	<typedef path="js.html.sql.TransactionCallback" params="" file="/usr/lib/haxe/std/js/html/sql/TransactionCallback.hx"><f a="">
	<c path="js.html.sql.Transaction"/>
	<x path="Bool"/>
</f></typedef>
	<typedef path="js.html.sql.TransactionErrorCallback" params="" file="/usr/lib/haxe/std/js/html/sql/TransactionErrorCallback.hx"><f a="">
	<c path="js.html.sql.Error"/>
	<x path="Bool"/>
</f></typedef>
	<class path="js.html.svg.Angle" params="" file="/usr/lib/haxe/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>The unit type was explicitly set to degrees.</haxe_doc>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" line="36" static="1">
			<x path="Int"/>
			<haxe_doc>The unit type is gradians.</haxe_doc>
		</SVG_ANGLETYPE_GRAD>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" line="39" static="1">
			<x path="Int"/>
			<haxe_doc>The unit type is radians.</haxe_doc>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" line="42" static="1">
			<x path="Int"/>
			<haxe_doc>The unit type is not one of predefined unit types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</haxe_doc>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" line="45" static="1">
			<x path="Int"/>
			<haxe_doc>No unit type was provided (i.e., a unitless value was specified). For angles, a unitless value is treated the same as if degrees were specified.</haxe_doc>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the SVG_ANGLETYPE_* constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<p>The value as a floating point value, in user units. Setting this attribute will cause <code>valueInSpecifiedUnits</code> and <code>valueAsString</code> to be updated automatically to reflect this setting.</p> <p><strong>Exceptions on setting:</strong> a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is raised when the length corresponds to a read only attribute or when the object itself is read only.</p>]]></haxe_doc>
		</value>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<p>The value as a string value, in the units expressed by <code>unitType</code>. Setting this attribute will cause <code>value</code>, <code>valueInSpecifiedUnits</code> and <code>unitType</code> to be updated automatically to reflect this setting.</p> <p><strong>Exceptions on setting:</strong></p> <ul> <li>a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>SYNTAX_ERR</code> is raised if the assigned string cannot be parsed as a valid <a title="https://developer.mozilla.org/en/SVG/Content_type#Angle" rel="internal" href="https://developer.mozilla.org/en/SVG/Content_type#Angle">&lt;angle&gt;</a>.</li> <li>a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is raised when the length corresponds to a read only attribute or when the object itself is read only.</li> </ul> Setter throws DOMException.]]></haxe_doc>
		</valueAsString>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<p>The value as a floating point value, in the units expressed by <code>unitType</code>. Setting this attribute will cause <code>value</code> and <code>valueAsString</code> to be updated automatically to reflect this setting.</p> <p><strong>Exceptions on setting:</strong> a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is raised when the length corresponds to a read only attribute or when the object itself is read only.</p>]]></haxe_doc>
		</valueInSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method"><f a="unitType">
	<x path="Int"/>
	<x path="Void"/>
</f></convertToSpecifiedUnits>
		<newValueSpecifiedUnits public="1" set="method"><f a="unitType:valueInSpecifiedUnits">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></newValueSpecifiedUnits>
		<haxe_doc><![CDATA[<p>The <code>SVGAngle</code> interface correspond to the <a title="https://developer.mozilla.org/en/SVG/Content_type#Angle" rel="internal" href="https://developer.mozilla.org/en/SVG/Content_type#Angle">&lt;angle&gt;</a> basic data type.</p>
<p>An <code>SVGAngle</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGAngle">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/usr/lib/haxe/std/js/html/svg/AnimatedLength.hx" extern="1">
		<animVal public="1" set="null">
			<c path="js.html.svg.Length"/>
			<haxe_doc><![CDATA[If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, contains the same value as <code>baseVal</code>.]]></haxe_doc>
		</animVal>
		<baseVal public="1" set="null">
			<c path="js.html.svg.Length"/>
			<haxe_doc>The base value of the given attribute before applying any animations.</haxe_doc>
		</baseVal>
		<haxe_doc><![CDATA[The <code>SVGAnimatedLength</code> interface is used for attributes of basic type <a title="https://developer.mozilla.org/en/SVG/Content_type#Length" rel="internal" href="https://developer.mozilla.org/en/SVG/Content_type#Length">&lt;length&gt;</a> which can be animated.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Document_Object_Model_(DOM)/SVGAnimatedLength">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/usr/lib/haxe/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<animVal public="1" set="null">
			<c path="js.html.svg.PreserveAspectRatio"/>
			<haxe_doc><![CDATA[A read only <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/SVGPreserveAspectRatio">SVGPreserveAspectRatio</a></code>
 representing the current animated value of the given attribute. If the given attribute is not currently being animated, then the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/SVGPreserveAspectRatio">SVGPreserveAspectRatio</a></code>
 will have the same contents as <code>baseVal</code>. The object referenced by <code>animVal</code> is always distinct from the one referenced by <code>baseVal</code>, even when the attribute is not animated.]]></haxe_doc>
		</animVal>
		<baseVal public="1" set="null">
			<c path="js.html.svg.PreserveAspectRatio"/>
			<haxe_doc>The base value of the given attribute before applying any animations.</haxe_doc>
		</baseVal>
		<haxe_doc><![CDATA[The <code>SVGAnimatedPreserveAspectRatio</code> interface is used for attributes of type <code><a rel="custom" href="/api/js/html/svg/PreserveAspectRatio">SVGPreserveAspectRatio</a></code>
 which can be animated.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGAnimatedPreserveAspectRatio">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/usr/lib/haxe/std/js/html/svg/AnimatedRect.hx" extern="1">
		<animVal public="1" set="null">
			<c path="js.html.svg.Rect"/>
			<haxe_doc><![CDATA[A read only <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/SVGRect">SVGRect</a></code>
 representing the current animated value of the given attribute. If the given attribute is not currently being animated, then the <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/SVGRect">SVGRect</a></code>
 will have the same contents as <code>baseVal</code>. The object referenced by <code>animVal</code> will always be distinct from the one referenced by <code>baseVal</code>, even when the attribute is not animated.]]></haxe_doc>
		</animVal>
		<baseVal public="1" set="null">
			<c path="js.html.svg.Rect"/>
			<haxe_doc>The base value of the given attribute before applying any animations.</haxe_doc>
		</baseVal>
		<haxe_doc><![CDATA[The <code>SVGAnimatedRect</code> interface is used for attributes of basic <code><a rel="custom" href="/api/js/html/svg/Rect">SVGRect</a></code>
 which can be animated.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Document_Object_Model_(DOM)/SVGAnimatedRect">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.Document" params="" file="/usr/lib/haxe/std/js/html/svg/Document.hx" extern="1">
		<extends path="js.html.Document"/>
		<rootElement public="1" set="null"><c path="js.html.svg.SVGElement"/></rootElement>
		<meta><m n=":native"><e>"SVGDocument"</e></m></meta>
	</class>
	<class path="js.html.svg.Element" params="" file="/usr/lib/haxe/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.Element"/>
		<ownerSVGElement public="1" set="null">
			<c path="js.html.svg.SVGElement"/>
			<haxe_doc><![CDATA[The nearest ancestor <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element. <code>Null</code> if the given element is the outermost svg element.]]></haxe_doc>
		</ownerSVGElement>
		<viewportElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc><![CDATA[The element which established the current viewport. Often, the nearest ancestor <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element. <code>Null</code> if the given element is the outermost svg element.]]></haxe_doc>
		</viewportElement>
		<xmlbase public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Corresponds to attribute 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/xml%3Abase" class="new">xml:base</a></code> on the given element. Setter throws DOMException.]]></haxe_doc>
		</xmlbase>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the <code>SVGElement</code> interface.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/usr/lib/haxe/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the cm units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" line="36" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the em units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" line="39" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the ex units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" line="42" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the in units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" line="45" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the mm units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" line="48" static="1">
			<x path="Int"/>
			<haxe_doc>No unit type was provided (i.e., a unitless value was specified), which indicates a value in user units.</haxe_doc>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" line="51" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the pc units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_PC>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" line="54" static="1">
			<x path="Int"/>
			<haxe_doc>A percentage value was specified.</haxe_doc>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" line="57" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the pt units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" line="60" static="1">
			<x path="Int"/>
			<haxe_doc>A value was specified using the px units defined in CSS2.</haxe_doc>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" line="63" static="1">
			<x path="Int"/>
			<haxe_doc>The unit type is not one of predefined unit types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</haxe_doc>
		</SVG_LENGTHTYPE_UNKNOWN>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the SVG_LENGTHTYPE_* constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<p>The value as a floating point value, in user units. Setting this attribute will cause <code>valueInSpecifiedUnits</code> and <code>valueAsString</code> to be updated automatically to reflect this setting.</p> <p><strong>Exceptions on setting:</strong> a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is raised when the length corresponds to a read only attribute or when the object itself is read only.</p> Getter throws DOMException. Setter throws DOMException.]]></haxe_doc>
		</value>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[<p>The value as a string value, in the units expressed by <code>unitType</code>. Setting this attribute will cause <code>value</code>, <code>valueInSpecifiedUnits</code> and <code>unitType</code> to be updated automatically to reflect this setting.</p> <p><strong>Exceptions on setting:</strong></p> <ul> <li>a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>SYNTAX_ERR</code> is raised if the assigned string cannot be parsed as a valid <a title="https://developer.mozilla.org/en/SVG/Content_type#Length" rel="internal" href="https://developer.mozilla.org/en/SVG/Content_type#Length">&lt;length&gt;</a>.</li> <li>a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is raised when the length corresponds to a read only attribute or when the object itself is read only.</li> </ul> Setter throws DOMException.]]></haxe_doc>
		</valueAsString>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<p>The value as a floating point value, in the units expressed by <code>unitType</code>. Setting this attribute will cause <code>value</code> and <code>valueAsString</code> to be updated automatically to reflect this setting.</p> <p><strong>Exceptions on setting:</strong> a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is raised when the length corresponds to a read only attribute or when the object itself is read only.</p>]]></haxe_doc>
		</valueInSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method"><f a="unitType">
	<x path="Int"/>
	<x path="Void"/>
</f></convertToSpecifiedUnits>
		<newValueSpecifiedUnits public="1" set="method"><f a="unitType:valueInSpecifiedUnits">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></newValueSpecifiedUnits>
		<haxe_doc><![CDATA[<p>The <code>SVGLength</code> interface correspond to the <a title="https://developer.mozilla.org/en/SVG/Content_type#Length" rel="internal" href="https://developer.mozilla.org/en/SVG/Content_type#Length">&lt;length&gt;</a> basic data type.</p>
<p>An <code>SVGLength</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/Document_Object_Model_(DOM)/SVGLength">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/usr/lib/haxe/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<e public="1"><x path="Float"/></e>
		<f public="1"><x path="Float"/></f>
		<flipX public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></flipX>
		<flipY public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></flipY>
		<inverse public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></inverse>
		<multiply public="1" set="method"><f a="secondMatrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Matrix"/>
</f></multiply>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></rotate>
		<rotateFromVector public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></rotateFromVector>
		<scale public="1" set="method"><f a="scaleFactor">
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></scale>
		<scaleNonUniform public="1" set="method"><f a="scaleFactorX:scaleFactorY">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></scaleNonUniform>
		<skewX public="1" set="method"><f a="angle">
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></skewX>
		<skewY public="1" set="method"><f a="angle">
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></skewY>
		<translate public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></translate>
		<haxe_doc><![CDATA[<p>Many of SVG's graphics operations utilize 2x3 matrices of the form:</p>
<pre>[a c e]
[b d f]</pre>
<p>which, when expanded into a 3x3 matrix for the purposes of matrix arithmetic, become:</p>
<pre>[a c e]
[b d f]
[0 0 1]
</pre>
<p>An <code>SVGMatrix</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGMatrix">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/usr/lib/haxe/std/js/html/svg/Number.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[<p>The value of the given attribute.</p> <p><strong>Exceptions on setting:</strong> a <code><a rel="custom" href="https://developer.mozilla.org/en/DOM/DOMException">DOMException</a></code>
 with code <code>NO_MODIFICATION_ALLOWED_ERR</code> is Raised on an attempt to change the value of a read only attribute.</p>]]></haxe_doc>
		</value>
		<haxe_doc><![CDATA[<p>The <code>SVGNumber</code> interface correspond to the <a title="https://developer.mozilla.org/en/SVG/Content_type#Number" rel="internal" href="https://developer.mozilla.org/en/SVG/Content_type#Number">&lt;number&gt;</a> basic data type.</p>
<p>An <code>SVGNumber</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGNumber">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/usr/lib/haxe/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/usr/lib/haxe/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" line="35" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>meet</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" line="39" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>slice</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_MEETORSLICE_SLICE>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" line="42" static="1">
			<x path="Int"/>
			<haxe_doc>The enumeration was set to a value that is not one of predefined types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</haxe_doc>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" line="46" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>none</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" line="49" static="1">
			<x path="Int"/>
			<haxe_doc>The enumeration was set to a value that is not one of predefined types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</haxe_doc>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" line="53" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMaxYMax</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" line="57" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMaxYMid</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" line="61" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMaxYMin</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" line="65" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMidYMax</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" line="69" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMidYMid</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" line="73" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMidYMin</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" line="77" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMinYMax</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" line="81" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMinYMid</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" line="85" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Corresponds to value <code>xMinYMin</code> for attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>.]]></haxe_doc>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<align public="1">
			<x path="Int"/>
			<haxe_doc>The type of the alignment value as specified by one of the SVG_PRESERVEASPECTRATIO_* constants defined on this interface. Setter throws DOMException.</haxe_doc>
		</align>
		<meetOrSlice public="1">
			<x path="Int"/>
			<haxe_doc>The type of the meet-or-slice value as specified by one of the SVG_MEETORSLICE_* constants defined on this interface. Setter throws DOMException.</haxe_doc>
		</meetOrSlice>
		<haxe_doc><![CDATA[<p>The <code>SVGPreserveAspectRatio</code> interface corresponds to the 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code> attribute, which is available for some of SVG's elements.</p>
<p>An <code>SVGPreserveAspectRatio</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGPreserveAspectRatio">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/usr/lib/haxe/std/js/html/svg/Rect.hx" extern="1">
		<height public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The <em>height</em> coordinate of the rectangle, in user units.]]></haxe_doc>
		</height>
		<width public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[The <em>width</em> coordinate of the rectangle, in user units.]]></haxe_doc>
		</width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<haxe_doc><![CDATA[<p>The <code>SVGRect</code> represents rectangular geometry. Rectangles are defined as consisting of a (x,y) coordinate pair identifying a minimum X value, a minimum Y value, and a width and height, which are usually constrained to be non-negative.</p>
<p>An <code>SVGRect</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGRect">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/usr/lib/haxe/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<contentScriptType public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Corresponds to attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/contentScriptType">contentScriptType</a></code> on the given <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element.]]></haxe_doc>
		</contentScriptType>
		<contentStyleType public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Corresponds to attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/contentStyleType">contentStyleType</a></code> on the given <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element.]]></haxe_doc>
		</contentStyleType>
		<currentScale public="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[On an outermost <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element, this attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes <code>currentScale</code> and <code>currentTranslate</code> are equivalent to the 2x3 matrix <code>[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]</code>. If "magnification" is enabled (i.e., <code>zoomAndPan="magnify"</code>), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element).]]></haxe_doc>
		</currentScale>
		<currentTranslate public="1" set="null">
			<c path="js.html.svg.Point"/>
			<haxe_doc><![CDATA[On an outermost <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element, the corresponding translation factor that takes into account user "magnification".]]></haxe_doc>
		</currentTranslate>
		<currentView public="1" set="null">
			<c path="js.html.svg.ViewSpec"/>
			<haxe_doc><![CDATA[The definition of the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation:<br> <ul> <li>If the initial view was a "standard" view, then: <ul> <li>the values for 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewBox" class="new">viewBox</a></code>, 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code> and 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/zoomAndPan" class="new">zoomAndPan</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will match the values for the corresponding DOM attributes that are on <code>SVGSVGElement</code> directly</li> <li>the values for 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/transform">transform</a></code> and 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewTarget" class="new">viewTarget</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will be null</li> </ul> </li> <li>If the initial view was a link into a <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/view">&lt;view&gt;</a></code>
 element, then: <ul> <li>the values for 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewBox" class="new">viewBox</a></code>, 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code> and 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/zoomAndPan" class="new">zoomAndPan</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will correspond to the corresponding attributes for the given <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/view">&lt;view&gt;</a></code>
 element</li> <li>the values for 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/transform">transform</a></code> and 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewTarget" class="new">viewTarget</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will be null</li> </ul> </li> <li>If the initial view was a link into another element (i.e., other than a <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/view">&lt;view&gt;</a></code>
), then: <ul> <li>the values for 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewBox" class="new">viewBox</a></code>, 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code> and 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/zoomAndPan" class="new">zoomAndPan</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will match the values for the corresponding DOM attributes that are on <code>SVGSVGElement</code> directly for the closest ancestor <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element</li> <li>the values for 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/transform">transform</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will be null</li> <li>the 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewTarget" class="new">viewTarget</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will represent the target of the link</li> </ul> </li> <li>If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(...)), then: <ul> <li>the values for 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewBox" class="new">viewBox</a></code>, 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/preserveAspectRatio">preserveAspectRatio</a></code>, 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/zoomAndPan" class="new">zoomAndPan</a></code>, 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/transform">transform</a></code> and 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewTarget" class="new">viewTarget</a></code> within 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/currentView" class="new">currentView</a></code> will correspond to the values from the SVG view specification fragment identifier</li> </ul> </li> </ul>]]></haxe_doc>
		</currentView>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc><![CDATA[Corresponds to attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/height">height</a></code> on the given <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element.]]></haxe_doc>
		</height>
		<pixelUnitToMillimeterX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Size of a pixel units (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided.</haxe_doc>
		</pixelUnitToMillimeterX>
		<pixelUnitToMillimeterY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Corresponding size of a pixel unit along the y-axis of the viewport.</haxe_doc>
		</pixelUnitToMillimeterY>
		<screenPixelToMillimeterX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the browser actually knows the physical size of a "screen unit", this attribute will express that information; otherwise, user agents will provide a suitable default value such as .28mm.</haxe_doc>
		</screenPixelToMillimeterX>
		<screenPixelToMillimeterY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Corresponding size of a screen pixel along the y-axis of the viewport.</haxe_doc>
		</screenPixelToMillimeterY>
		<useCurrentView public="1" set="null">
			<x path="Bool"/>
			<haxe_doc><![CDATA[The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view (i.e., based on attributes on the <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element such as 
<code><a rel="internal" href="https://developer.mozilla.org/en/SVG/Attribute/viewBox" class="new">viewBox</a></code>) or to a "custom" view (i.e., a hyperlink into a particular <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/view">&lt;view&gt;</a></code>
 or other element). If the initial view is the "standard" view, then this attribute is false. If the initial view is a "custom" view, then this attribute is true.]]></haxe_doc>
		</useCurrentView>
		<viewport public="1" set="null">
			<c path="js.html.svg.Rect"/>
			<haxe_doc><![CDATA[The position and size of the viewport (implicit or explicit) that corresponds to this <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element. When the browser is actually rendering the content, then the position and size values represent the actual values when rendering. The position and size values are unitless values in the coordinate system of the parent element. If no parent element exists (i.e., <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element represents the root of the document tree), if this SVG document is embedded as part of another document (e.g., via the HTML <code><a rel="custom" href="https://developer.mozilla.org/en/HTML/Element/object">&lt;object&gt;</a></code>
 element), then the position and size are unitless values in the coordinate system of the parent document. (If the parent uses CSS or XSL layout, then unitless values represent pixel units for the current CSS or XSL viewport.)]]></haxe_doc>
		</viewport>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc><![CDATA[Corresponds to attribute 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/width">width</a></code> on the given <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 element.]]></haxe_doc>
		</width>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<animationsPaused public="1" set="method"><f a=""><x path="Bool"/></f></animationsPaused>
		<checkEnclosure public="1" set="method"><f a="element:rect">
	<c path="js.html.svg.Element"/>
	<c path="js.html.svg.Rect"/>
	<x path="Bool"/>
</f></checkEnclosure>
		<checkIntersection public="1" set="method"><f a="element:rect">
	<c path="js.html.svg.Element"/>
	<c path="js.html.svg.Rect"/>
	<x path="Bool"/>
</f></checkIntersection>
		<createSVGAngle public="1" set="method"><f a=""><c path="js.html.svg.Angle"/></f></createSVGAngle>
		<createSVGLength public="1" set="method"><f a=""><c path="js.html.svg.Length"/></f></createSVGLength>
		<createSVGMatrix public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></createSVGMatrix>
		<createSVGNumber public="1" set="method"><f a=""><c path="js.html.svg.Number"/></f></createSVGNumber>
		<createSVGPoint public="1" set="method"><f a=""><c path="js.html.svg.Point"/></f></createSVGPoint>
		<createSVGRect public="1" set="method"><f a=""><c path="js.html.svg.Rect"/></f></createSVGRect>
		<createSVGTransform public="1" set="method"><f a=""><c path="js.html.svg.Transform"/></f></createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<deselectAll public="1" set="method"><f a=""><x path="Void"/></f></deselectAll>
		<forceRedraw public="1" set="method"><f a=""><x path="Void"/></f></forceRedraw>
		<getCurrentTime public="1" set="method"><f a=""><x path="Float"/></f></getCurrentTime>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getEnclosureList public="1" set="method"><f a="rect:referenceElement">
	<c path="js.html.svg.Rect"/>
	<c path="js.html.svg.Element"/>
	<c path="js.html.NodeList"/>
</f></getEnclosureList>
		<getIntersectionList public="1" set="method"><f a="rect:referenceElement">
	<c path="js.html.svg.Rect"/>
	<c path="js.html.svg.Element"/>
	<c path="js.html.NodeList"/>
</f></getIntersectionList>
		<pauseAnimations public="1" set="method"><f a=""><x path="Void"/></f></pauseAnimations>
		<setCurrentTime public="1" set="method"><f a="seconds">
	<x path="Float"/>
	<x path="Void"/>
</f></setCurrentTime>
		<suspendRedraw public="1" set="method"><f a="maxWaitMilliseconds">
	<x path="Int"/>
	<x path="Int"/>
</f></suspendRedraw>
		<unpauseAnimations public="1" set="method"><f a=""><x path="Void"/></f></unpauseAnimations>
		<unsuspendRedraw public="1" set="method"><f a="suspendHandleId">
	<x path="Int"/>
	<x path="Void"/>
</f></unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method"><f a=""><x path="Void"/></f></unsuspendRedrawAll>
		<haxe_doc><![CDATA[The <code>SVGSVGElement</code> interface provides access to the properties of <code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Element/svg">&lt;svg&gt;</a></code>
 elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.<br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGSVGElement">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/usr/lib/haxe/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" line="35" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[A <code>matrix(…)</code> transformation]]></haxe_doc>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" line="40" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[A <code>scale(…)</code> transformation]]></haxe_doc>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" line="44" static="1"><x path="Int"/></SVG_TRANSFORM_SKEWY>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" line="47" static="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[A <code>translate(…)</code> transformation]]></haxe_doc>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" line="50" static="1">
			<x path="Int"/>
			<haxe_doc>The unit type is not one of predefined unit types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</haxe_doc>
		</SVG_TRANSFORM_UNKNOWN>
		<angle public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[A convenience attribute for <code>SVG_TRANSFORM_ROTATE</code>, <code>SVG_TRANSFORM_SKEWX</code> and <code>SVG_TRANSFORM_SKEWY</code>. It holds the angle that was specified.<br> <br> For <code>SVG_TRANSFORM_MATRIX</code>, <code>SVG_TRANSFORM_TRANSLATE</code> and <code>SVG_TRANSFORM_SCALE</code>, <code>angle</code> will be zero.]]></haxe_doc>
		</angle>
		<matrix public="1" set="null">
			<c path="js.html.svg.Matrix"/>
			<haxe_doc><![CDATA[<p>The matrix that represents this transformation. The matrix object is live, meaning that any changes made to the <code>SVGTransform</code> object are immediately reflected in the matrix object and vice versa. In case the matrix object is changed directly (i.e., without using the methods on the <code>SVGTransform</code> interface itself) then the type of the <code>SVGTransform</code> changes to <code>SVG_TRANSFORM_MATRIX</code>.</p> <ul> <li>For <code>SVG_TRANSFORM_MATRIX</code>, the matrix contains the a, b, c, d, e, f values supplied by the user.</li> <li>For <code>SVG_TRANSFORM_TRANSLATE</code>, e and f represent the translation amounts (a=1, b=0, c=0 and d=1).</li> <li>For <code>SVG_TRANSFORM_SCALE</code>, a and d represent the scale amounts (b=0, c=0, e=0 and f=0).</li> <li>For <code>SVG_TRANSFORM_SKEWX</code> and <code>SVG_TRANSFORM_SKEWY</code>, a, b, c and d represent the matrix which will result in the given skew (e=0 and f=0).</li> <li>For <code>SVG_TRANSFORM_ROTATE</code>, a, b, c, d, e and f together represent the matrix which will result in the given rotation. When the rotation is around the center point (0, 0), e and f will be zero.</li> </ul>]]></haxe_doc>
		</matrix>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the SVG_TRANSFORM_* constants defined on this interface.</haxe_doc>
		</type>
		<setMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<x path="Void"/>
</f></setMatrix>
		<setRotate public="1" set="method"><f a="angle:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRotate>
		<setScale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setScale>
		<setSkewX public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></setSkewX>
		<setSkewY public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></setSkewY>
		<setTranslate public="1" set="method"><f a="tx:ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTranslate>
		<haxe_doc><![CDATA[<p><code>SVGTransform</code> is the interface for one of the component transformations within an <code><a rel="custom" href="/api/js/html/svg/TransformList">SVGTransformList</a></code>
; thus, an <code>SVGTransform</code> object corresponds to a single component (e.g., <code>scale(…)</code> or <code>matrix(…)</code>) within a 
<code><a rel="custom" href="https://developer.mozilla.org/en/SVG/Attribute/transform">transform</a></code> attribute.</p>
<p>An <code>SVGTransform</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGTransform">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/usr/lib/haxe/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<appendItem public="1" set="method"><f a="item">
	<c path="js.html.svg.Transform"/>
	<c path="js.html.svg.Transform"/>
</f></appendItem>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<consolidate public="1" set="method"><f a=""><c path="js.html.svg.Transform"/></f></consolidate>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<getItem public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.svg.Transform"/>
</f></getItem>
		<initialize public="1" set="method"><f a="item">
	<c path="js.html.svg.Transform"/>
	<c path="js.html.svg.Transform"/>
</f></initialize>
		<insertItemBefore public="1" set="method"><f a="item:index">
	<c path="js.html.svg.Transform"/>
	<x path="Int"/>
	<c path="js.html.svg.Transform"/>
</f></insertItemBefore>
		<removeItem public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.svg.Transform"/>
</f></removeItem>
		<replaceItem public="1" set="method"><f a="item:index">
	<c path="js.html.svg.Transform"/>
	<x path="Int"/>
	<c path="js.html.svg.Transform"/>
</f></replaceItem>
		<haxe_doc><![CDATA[<p>The <code>SVGTransformList</code> defines a list of <code><a rel="custom" href="/api/js/html/svg/Transform">SVGTransform</a></code>
 objects.</p>
<p>An <code>SVGTransformList</code> object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</p>
<div class="geckoVersionNote"> <p>
</p><div class="geckoVersionHeading">Gecko 9.0 note<div>(Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
</div></div>
<p></p> <p>Starting in Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)
,the <code>SVGTransformList</code> DOM interface is now indexable and can be accessed like Arrays</p>
</div><br><br>
Documentation for this class was provided by <a href="https://developer.mozilla.org/en/DOM/SVGTransformList">MDN</a>.]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.svg.ViewSpec" params="" file="/usr/lib/haxe/std/js/html/svg/ViewSpec.hx" extern="1">
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<preserveAspectRatioString public="1" set="null"><c path="String"/></preserveAspectRatioString>
		<transform public="1" set="null"><c path="js.html.svg.TransformList"/></transform>
		<transformString public="1" set="null"><c path="String"/></transformString>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<viewBoxString public="1" set="null"><c path="String"/></viewBoxString>
		<viewTarget public="1" set="null"><c path="js.html.svg.Element"/></viewTarget>
		<viewTargetString public="1" set="null"><c path="String"/></viewTargetString>
		<zoomAndPan public="1">
			<x path="Int"/>
			<haxe_doc>Setter throws DOMException.</haxe_doc>
		</zoomAndPan>
		<meta><m n=":native"><e>"SVGViewSpec"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/usr/lib/haxe/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<size public="1" set="null"><x path="Int"/></size>
		<type public="1" set="null"><x path="Int"/></type>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/usr/lib/haxe/std/js/html/webgl/Buffer.hx" extern="1"><meta><m n=":native"><e>"WebGLBuffer"</e></m></meta></class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/usr/lib/haxe/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<depth>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<class path="js.html.webgl.Framebuffer" params="" file="/usr/lib/haxe/std/js/html/webgl/Framebuffer.hx" extern="1"><meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta></class>
	<class path="js.html.webgl.Program" params="" file="/usr/lib/haxe/std/js/html/webgl/Program.hx" extern="1"><meta><m n=":native"><e>"WebGLProgram"</e></m></meta></class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/usr/lib/haxe/std/js/html/webgl/Renderbuffer.hx" extern="1"><meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta></class>
	<class path="js.html.webgl.RenderingContext" params="" file="/usr/lib/haxe/std/js/html/webgl/RenderingContext.hx" extern="1">
		<extends path="js.html.CanvasRenderingContext"/>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></ACTIVE_ATTRIBUTES>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></ACTIVE_TEXTURE>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></ACTIVE_UNIFORMS>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></ALIASED_LINE_WIDTH_RANGE>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></ALIASED_POINT_SIZE_RANGE>
		<ALPHA public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></ALPHA>
		<ALPHA_BITS public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></ALPHA_BITS>
		<ALWAYS public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></ALWAYS>
		<ARRAY_BUFFER public="1" get="inline" set="null" line="45" static="1"><x path="Int"/></ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="47" static="1"><x path="Int"/></ARRAY_BUFFER_BINDING>
		<ATTACHED_SHADERS public="1" get="inline" set="null" line="49" static="1"><x path="Int"/></ATTACHED_SHADERS>
		<BACK public="1" get="inline" set="null" line="51" static="1"><x path="Int"/></BACK>
		<BLEND public="1" get="inline" set="null" line="53" static="1"><x path="Int"/></BLEND>
		<BLEND_COLOR public="1" get="inline" set="null" line="55" static="1"><x path="Int"/></BLEND_COLOR>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" line="57" static="1"><x path="Int"/></BLEND_DST_ALPHA>
		<BLEND_DST_RGB public="1" get="inline" set="null" line="59" static="1"><x path="Int"/></BLEND_DST_RGB>
		<BLEND_EQUATION public="1" get="inline" set="null" line="61" static="1"><x path="Int"/></BLEND_EQUATION>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" line="63" static="1"><x path="Int"/></BLEND_EQUATION_ALPHA>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" line="65" static="1"><x path="Int"/></BLEND_EQUATION_RGB>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" line="67" static="1"><x path="Int"/></BLEND_SRC_ALPHA>
		<BLEND_SRC_RGB public="1" get="inline" set="null" line="69" static="1"><x path="Int"/></BLEND_SRC_RGB>
		<BLUE_BITS public="1" get="inline" set="null" line="71" static="1"><x path="Int"/></BLUE_BITS>
		<BOOL public="1" get="inline" set="null" line="73" static="1"><x path="Int"/></BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" line="75" static="1"><x path="Int"/></BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" line="77" static="1"><x path="Int"/></BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" line="79" static="1"><x path="Int"/></BOOL_VEC4>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" line="81" static="1"><x path="Int"/></BROWSER_DEFAULT_WEBGL>
		<BUFFER_SIZE public="1" get="inline" set="null" line="83" static="1"><x path="Int"/></BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" line="85" static="1"><x path="Int"/></BUFFER_USAGE>
		<BYTE public="1" get="inline" set="null" line="87" static="1"><x path="Int"/></BYTE>
		<CCW public="1" get="inline" set="null" line="89" static="1"><x path="Int"/></CCW>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" line="91" static="1"><x path="Int"/></CLAMP_TO_EDGE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" line="93" static="1"><x path="Int"/></COLOR_ATTACHMENT0>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" line="95" static="1"><x path="Int"/></COLOR_BUFFER_BIT>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" line="97" static="1"><x path="Int"/></COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" line="99" static="1"><x path="Int"/></COLOR_WRITEMASK>
		<COMPILE_STATUS public="1" get="inline" set="null" line="101" static="1"><x path="Int"/></COMPILE_STATUS>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" line="103" static="1"><x path="Int"/></COMPRESSED_TEXTURE_FORMATS>
		<CONSTANT_ALPHA public="1" get="inline" set="null" line="105" static="1"><x path="Int"/></CONSTANT_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" line="107" static="1"><x path="Int"/></CONSTANT_COLOR>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" line="109" static="1"><x path="Int"/></CONTEXT_LOST_WEBGL>
		<CULL_FACE public="1" get="inline" set="null" line="111" static="1"><x path="Int"/></CULL_FACE>
		<CULL_FACE_MODE public="1" get="inline" set="null" line="113" static="1"><x path="Int"/></CULL_FACE_MODE>
		<CURRENT_PROGRAM public="1" get="inline" set="null" line="115" static="1"><x path="Int"/></CURRENT_PROGRAM>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" line="117" static="1"><x path="Int"/></CURRENT_VERTEX_ATTRIB>
		<CW public="1" get="inline" set="null" line="119" static="1"><x path="Int"/></CW>
		<DECR public="1" get="inline" set="null" line="121" static="1"><x path="Int"/></DECR>
		<DECR_WRAP public="1" get="inline" set="null" line="123" static="1"><x path="Int"/></DECR_WRAP>
		<DELETE_STATUS public="1" get="inline" set="null" line="125" static="1"><x path="Int"/></DELETE_STATUS>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" line="127" static="1"><x path="Int"/></DEPTH_ATTACHMENT>
		<DEPTH_BITS public="1" get="inline" set="null" line="129" static="1"><x path="Int"/></DEPTH_BITS>
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" line="131" static="1"><x path="Int"/></DEPTH_BUFFER_BIT>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" line="133" static="1"><x path="Int"/></DEPTH_CLEAR_VALUE>
		<DEPTH_COMPONENT public="1" get="inline" set="null" line="135" static="1"><x path="Int"/></DEPTH_COMPONENT>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" line="137" static="1"><x path="Int"/></DEPTH_COMPONENT16>
		<DEPTH_FUNC public="1" get="inline" set="null" line="139" static="1"><x path="Int"/></DEPTH_FUNC>
		<DEPTH_RANGE public="1" get="inline" set="null" line="141" static="1"><x path="Int"/></DEPTH_RANGE>
		<DEPTH_STENCIL public="1" get="inline" set="null" line="143" static="1"><x path="Int"/></DEPTH_STENCIL>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" line="145" static="1"><x path="Int"/></DEPTH_STENCIL_ATTACHMENT>
		<DEPTH_TEST public="1" get="inline" set="null" line="147" static="1"><x path="Int"/></DEPTH_TEST>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" line="149" static="1"><x path="Int"/></DEPTH_WRITEMASK>
		<DITHER public="1" get="inline" set="null" line="151" static="1"><x path="Int"/></DITHER>
		<DONT_CARE public="1" get="inline" set="null" line="153" static="1"><x path="Int"/></DONT_CARE>
		<DST_ALPHA public="1" get="inline" set="null" line="155" static="1"><x path="Int"/></DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" line="157" static="1"><x path="Int"/></DST_COLOR>
		<DYNAMIC_DRAW public="1" get="inline" set="null" line="159" static="1"><x path="Int"/></DYNAMIC_DRAW>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" line="161" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="163" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER_BINDING>
		<EQUAL public="1" get="inline" set="null" line="165" static="1"><x path="Int"/></EQUAL>
		<FASTEST public="1" get="inline" set="null" line="167" static="1"><x path="Int"/></FASTEST>
		<FLOAT public="1" get="inline" set="null" line="169" static="1"><x path="Int"/></FLOAT>
		<FLOAT_MAT2 public="1" get="inline" set="null" line="171" static="1"><x path="Int"/></FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" line="173" static="1"><x path="Int"/></FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" line="175" static="1"><x path="Int"/></FLOAT_MAT4>
		<FLOAT_VEC2 public="1" get="inline" set="null" line="177" static="1"><x path="Int"/></FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" line="179" static="1"><x path="Int"/></FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" line="181" static="1"><x path="Int"/></FLOAT_VEC4>
		<FRAGMENT_SHADER public="1" get="inline" set="null" line="183" static="1"><x path="Int"/></FRAGMENT_SHADER>
		<FRAMEBUFFER public="1" get="inline" set="null" line="185" static="1"><x path="Int"/></FRAMEBUFFER>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" line="187" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" line="189" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" line="191" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" line="193" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" line="195" static="1"><x path="Int"/></FRAMEBUFFER_BINDING>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" line="197" static="1"><x path="Int"/></FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" line="199" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" line="201" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" line="203" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" line="205" static="1"><x path="Int"/></FRAMEBUFFER_UNSUPPORTED>
		<FRONT public="1" get="inline" set="null" line="207" static="1"><x path="Int"/></FRONT>
		<FRONT_AND_BACK public="1" get="inline" set="null" line="209" static="1"><x path="Int"/></FRONT_AND_BACK>
		<FRONT_FACE public="1" get="inline" set="null" line="211" static="1"><x path="Int"/></FRONT_FACE>
		<FUNC_ADD public="1" get="inline" set="null" line="213" static="1"><x path="Int"/></FUNC_ADD>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" line="215" static="1"><x path="Int"/></FUNC_REVERSE_SUBTRACT>
		<FUNC_SUBTRACT public="1" get="inline" set="null" line="217" static="1"><x path="Int"/></FUNC_SUBTRACT>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" line="219" static="1"><x path="Int"/></GENERATE_MIPMAP_HINT>
		<GEQUAL public="1" get="inline" set="null" line="221" static="1"><x path="Int"/></GEQUAL>
		<GREATER public="1" get="inline" set="null" line="223" static="1"><x path="Int"/></GREATER>
		<GREEN_BITS public="1" get="inline" set="null" line="225" static="1"><x path="Int"/></GREEN_BITS>
		<HIGH_FLOAT public="1" get="inline" set="null" line="227" static="1"><x path="Int"/></HIGH_FLOAT>
		<HIGH_INT public="1" get="inline" set="null" line="229" static="1"><x path="Int"/></HIGH_INT>
		<INCR public="1" get="inline" set="null" line="231" static="1"><x path="Int"/></INCR>
		<INCR_WRAP public="1" get="inline" set="null" line="233" static="1"><x path="Int"/></INCR_WRAP>
		<INT public="1" get="inline" set="null" line="235" static="1"><x path="Int"/></INT>
		<INT_VEC2 public="1" get="inline" set="null" line="237" static="1"><x path="Int"/></INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" line="239" static="1"><x path="Int"/></INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" line="241" static="1"><x path="Int"/></INT_VEC4>
		<INVALID_ENUM public="1" get="inline" set="null" line="243" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" line="245" static="1"><x path="Int"/></INVALID_FRAMEBUFFER_OPERATION>
		<INVALID_OPERATION public="1" get="inline" set="null" line="247" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_VALUE public="1" get="inline" set="null" line="249" static="1"><x path="Int"/></INVALID_VALUE>
		<INVERT public="1" get="inline" set="null" line="251" static="1"><x path="Int"/></INVERT>
		<KEEP public="1" get="inline" set="null" line="253" static="1"><x path="Int"/></KEEP>
		<LEQUAL public="1" get="inline" set="null" line="255" static="1"><x path="Int"/></LEQUAL>
		<LESS public="1" get="inline" set="null" line="257" static="1"><x path="Int"/></LESS>
		<LINEAR public="1" get="inline" set="null" line="259" static="1"><x path="Int"/></LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" line="261" static="1"><x path="Int"/></LINEAR_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" line="263" static="1"><x path="Int"/></LINEAR_MIPMAP_NEAREST>
		<LINES public="1" get="inline" set="null" line="265" static="1"><x path="Int"/></LINES>
		<LINE_LOOP public="1" get="inline" set="null" line="267" static="1"><x path="Int"/></LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" line="269" static="1"><x path="Int"/></LINE_STRIP>
		<LINE_WIDTH public="1" get="inline" set="null" line="271" static="1"><x path="Int"/></LINE_WIDTH>
		<LINK_STATUS public="1" get="inline" set="null" line="273" static="1"><x path="Int"/></LINK_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" line="275" static="1"><x path="Int"/></LOW_FLOAT>
		<LOW_INT public="1" get="inline" set="null" line="277" static="1"><x path="Int"/></LOW_INT>
		<LUMINANCE public="1" get="inline" set="null" line="279" static="1"><x path="Int"/></LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" line="281" static="1"><x path="Int"/></LUMINANCE_ALPHA>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="283" static="1"><x path="Int"/></MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" line="285" static="1"><x path="Int"/></MAX_CUBE_MAP_TEXTURE_SIZE>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" line="287" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_VECTORS>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" line="289" static="1"><x path="Int"/></MAX_RENDERBUFFER_SIZE>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="291" static="1"><x path="Int"/></MAX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" line="293" static="1"><x path="Int"/></MAX_TEXTURE_SIZE>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" line="295" static="1"><x path="Int"/></MAX_VARYING_VECTORS>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" line="297" static="1"><x path="Int"/></MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="299" static="1"><x path="Int"/></MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" line="301" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" line="303" static="1"><x path="Int"/></MAX_VIEWPORT_DIMS>
		<MEDIUM_FLOAT public="1" get="inline" set="null" line="305" static="1"><x path="Int"/></MEDIUM_FLOAT>
		<MEDIUM_INT public="1" get="inline" set="null" line="307" static="1"><x path="Int"/></MEDIUM_INT>
		<MIRRORED_REPEAT public="1" get="inline" set="null" line="309" static="1"><x path="Int"/></MIRRORED_REPEAT>
		<NEAREST public="1" get="inline" set="null" line="311" static="1"><x path="Int"/></NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" line="313" static="1"><x path="Int"/></NEAREST_MIPMAP_LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" line="315" static="1"><x path="Int"/></NEAREST_MIPMAP_NEAREST>
		<NEVER public="1" get="inline" set="null" line="317" static="1"><x path="Int"/></NEVER>
		<NICEST public="1" get="inline" set="null" line="319" static="1"><x path="Int"/></NICEST>
		<NONE public="1" get="inline" set="null" line="321" static="1"><x path="Int"/></NONE>
		<NOTEQUAL public="1" get="inline" set="null" line="323" static="1"><x path="Int"/></NOTEQUAL>
		<NO_ERROR public="1" get="inline" set="null" line="325" static="1"><x path="Int"/></NO_ERROR>
		<ONE public="1" get="inline" set="null" line="327" static="1"><x path="Int"/></ONE>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" line="329" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" line="331" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_COLOR>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" line="333" static="1"><x path="Int"/></ONE_MINUS_DST_ALPHA>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" line="335" static="1"><x path="Int"/></ONE_MINUS_DST_COLOR>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" line="337" static="1"><x path="Int"/></ONE_MINUS_SRC_ALPHA>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" line="339" static="1"><x path="Int"/></ONE_MINUS_SRC_COLOR>
		<OUT_OF_MEMORY public="1" get="inline" set="null" line="341" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<PACK_ALIGNMENT public="1" get="inline" set="null" line="343" static="1"><x path="Int"/></PACK_ALIGNMENT>
		<POINTS public="1" get="inline" set="null" line="345" static="1"><x path="Int"/></POINTS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" line="347" static="1"><x path="Int"/></POLYGON_OFFSET_FACTOR>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" line="349" static="1"><x path="Int"/></POLYGON_OFFSET_FILL>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" line="351" static="1"><x path="Int"/></POLYGON_OFFSET_UNITS>
		<RED_BITS public="1" get="inline" set="null" line="353" static="1"><x path="Int"/></RED_BITS>
		<RENDERBUFFER public="1" get="inline" set="null" line="355" static="1"><x path="Int"/></RENDERBUFFER>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" line="357" static="1"><x path="Int"/></RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" line="359" static="1"><x path="Int"/></RENDERBUFFER_BINDING>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" line="361" static="1"><x path="Int"/></RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" line="363" static="1"><x path="Int"/></RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" line="365" static="1"><x path="Int"/></RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" line="367" static="1"><x path="Int"/></RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" line="369" static="1"><x path="Int"/></RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" line="371" static="1"><x path="Int"/></RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" line="373" static="1"><x path="Int"/></RENDERBUFFER_STENCIL_SIZE>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" line="375" static="1"><x path="Int"/></RENDERBUFFER_WIDTH>
		<RENDERER public="1" get="inline" set="null" line="377" static="1"><x path="Int"/></RENDERER>
		<REPEAT public="1" get="inline" set="null" line="379" static="1"><x path="Int"/></REPEAT>
		<REPLACE public="1" get="inline" set="null" line="381" static="1"><x path="Int"/></REPLACE>
		<RGB public="1" get="inline" set="null" line="383" static="1"><x path="Int"/></RGB>
		<RGB565 public="1" get="inline" set="null" line="385" static="1"><x path="Int"/></RGB565>
		<RGB5_A1 public="1" get="inline" set="null" line="387" static="1"><x path="Int"/></RGB5_A1>
		<RGBA public="1" get="inline" set="null" line="389" static="1"><x path="Int"/></RGBA>
		<RGBA4 public="1" get="inline" set="null" line="391" static="1"><x path="Int"/></RGBA4>
		<SAMPLER_2D public="1" get="inline" set="null" line="393" static="1"><x path="Int"/></SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" line="395" static="1"><x path="Int"/></SAMPLER_CUBE>
		<SAMPLES public="1" get="inline" set="null" line="397" static="1"><x path="Int"/></SAMPLES>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" line="399" static="1"><x path="Int"/></SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" line="401" static="1"><x path="Int"/></SAMPLE_BUFFERS>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" line="403" static="1"><x path="Int"/></SAMPLE_COVERAGE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" line="405" static="1"><x path="Int"/></SAMPLE_COVERAGE_INVERT>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" line="407" static="1"><x path="Int"/></SAMPLE_COVERAGE_VALUE>
		<SCISSOR_BOX public="1" get="inline" set="null" line="409" static="1"><x path="Int"/></SCISSOR_BOX>
		<SCISSOR_TEST public="1" get="inline" set="null" line="411" static="1"><x path="Int"/></SCISSOR_TEST>
		<SHADER_TYPE public="1" get="inline" set="null" line="413" static="1"><x path="Int"/></SHADER_TYPE>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" line="415" static="1"><x path="Int"/></SHADING_LANGUAGE_VERSION>
		<SHORT public="1" get="inline" set="null" line="417" static="1"><x path="Int"/></SHORT>
		<SRC_ALPHA public="1" get="inline" set="null" line="419" static="1"><x path="Int"/></SRC_ALPHA>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" line="421" static="1"><x path="Int"/></SRC_ALPHA_SATURATE>
		<SRC_COLOR public="1" get="inline" set="null" line="423" static="1"><x path="Int"/></SRC_COLOR>
		<STATIC_DRAW public="1" get="inline" set="null" line="425" static="1"><x path="Int"/></STATIC_DRAW>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" line="427" static="1"><x path="Int"/></STENCIL_ATTACHMENT>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" line="429" static="1"><x path="Int"/></STENCIL_BACK_FAIL>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" line="431" static="1"><x path="Int"/></STENCIL_BACK_FUNC>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" line="433" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" line="435" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" line="437" static="1"><x path="Int"/></STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" line="439" static="1"><x path="Int"/></STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" line="441" static="1"><x path="Int"/></STENCIL_BACK_WRITEMASK>
		<STENCIL_BITS public="1" get="inline" set="null" line="443" static="1"><x path="Int"/></STENCIL_BITS>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" line="445" static="1"><x path="Int"/></STENCIL_BUFFER_BIT>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" line="447" static="1"><x path="Int"/></STENCIL_CLEAR_VALUE>
		<STENCIL_FAIL public="1" get="inline" set="null" line="449" static="1"><x path="Int"/></STENCIL_FAIL>
		<STENCIL_FUNC public="1" get="inline" set="null" line="451" static="1"><x path="Int"/></STENCIL_FUNC>
		<STENCIL_INDEX public="1" get="inline" set="null" line="453" static="1"><x path="Int"/></STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" get="inline" set="null" line="455" static="1"><x path="Int"/></STENCIL_INDEX8>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" line="457" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" line="459" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" line="461" static="1"><x path="Int"/></STENCIL_REF>
		<STENCIL_TEST public="1" get="inline" set="null" line="463" static="1"><x path="Int"/></STENCIL_TEST>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" line="465" static="1"><x path="Int"/></STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" line="467" static="1"><x path="Int"/></STENCIL_WRITEMASK>
		<STREAM_DRAW public="1" get="inline" set="null" line="469" static="1"><x path="Int"/></STREAM_DRAW>
		<SUBPIXEL_BITS public="1" get="inline" set="null" line="471" static="1"><x path="Int"/></SUBPIXEL_BITS>
		<TEXTURE public="1" get="inline" set="null" line="473" static="1"><x path="Int"/></TEXTURE>
		<TEXTURE0 public="1" get="inline" set="null" line="475" static="1"><x path="Int"/></TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" line="477" static="1"><x path="Int"/></TEXTURE1>
		<TEXTURE10 public="1" get="inline" set="null" line="479" static="1"><x path="Int"/></TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" line="481" static="1"><x path="Int"/></TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" line="483" static="1"><x path="Int"/></TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" line="485" static="1"><x path="Int"/></TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" line="487" static="1"><x path="Int"/></TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" line="489" static="1"><x path="Int"/></TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" line="491" static="1"><x path="Int"/></TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" line="493" static="1"><x path="Int"/></TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" line="495" static="1"><x path="Int"/></TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" line="497" static="1"><x path="Int"/></TEXTURE19>
		<TEXTURE2 public="1" get="inline" set="null" line="499" static="1"><x path="Int"/></TEXTURE2>
		<TEXTURE20 public="1" get="inline" set="null" line="501" static="1"><x path="Int"/></TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" line="503" static="1"><x path="Int"/></TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" line="505" static="1"><x path="Int"/></TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" line="507" static="1"><x path="Int"/></TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" line="509" static="1"><x path="Int"/></TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" line="511" static="1"><x path="Int"/></TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" line="513" static="1"><x path="Int"/></TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" line="515" static="1"><x path="Int"/></TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" line="517" static="1"><x path="Int"/></TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" line="519" static="1"><x path="Int"/></TEXTURE29>
		<TEXTURE3 public="1" get="inline" set="null" line="521" static="1"><x path="Int"/></TEXTURE3>
		<TEXTURE30 public="1" get="inline" set="null" line="523" static="1"><x path="Int"/></TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" line="525" static="1"><x path="Int"/></TEXTURE31>
		<TEXTURE4 public="1" get="inline" set="null" line="527" static="1"><x path="Int"/></TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" line="529" static="1"><x path="Int"/></TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" line="531" static="1"><x path="Int"/></TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" line="533" static="1"><x path="Int"/></TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" line="535" static="1"><x path="Int"/></TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" line="537" static="1"><x path="Int"/></TEXTURE9>
		<TEXTURE_2D public="1" get="inline" set="null" line="539" static="1"><x path="Int"/></TEXTURE_2D>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" line="541" static="1"><x path="Int"/></TEXTURE_BINDING_2D>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" line="543" static="1"><x path="Int"/></TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" line="545" static="1"><x path="Int"/></TEXTURE_CUBE_MAP>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" line="547" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" line="549" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" line="551" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" line="553" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" line="555" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" line="557" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" line="559" static="1"><x path="Int"/></TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" line="561" static="1"><x path="Int"/></TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" line="563" static="1"><x path="Int"/></TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" line="565" static="1"><x path="Int"/></TEXTURE_WRAP_T>
		<TRIANGLES public="1" get="inline" set="null" line="567" static="1"><x path="Int"/></TRIANGLES>
		<TRIANGLE_FAN public="1" get="inline" set="null" line="569" static="1"><x path="Int"/></TRIANGLE_FAN>
		<TRIANGLE_STRIP public="1" get="inline" set="null" line="571" static="1"><x path="Int"/></TRIANGLE_STRIP>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" line="573" static="1"><x path="Int"/></UNPACK_ALIGNMENT>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" line="575" static="1"><x path="Int"/></UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" line="577" static="1"><x path="Int"/></UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" line="579" static="1"><x path="Int"/></UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<UNSIGNED_BYTE public="1" get="inline" set="null" line="581" static="1"><x path="Int"/></UNSIGNED_BYTE>
		<UNSIGNED_INT public="1" get="inline" set="null" line="583" static="1"><x path="Int"/></UNSIGNED_INT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" line="585" static="1"><x path="Int"/></UNSIGNED_SHORT>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" line="587" static="1"><x path="Int"/></UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" line="589" static="1"><x path="Int"/></UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" line="591" static="1"><x path="Int"/></UNSIGNED_SHORT_5_6_5>
		<VALIDATE_STATUS public="1" get="inline" set="null" line="593" static="1"><x path="Int"/></VALIDATE_STATUS>
		<VENDOR public="1" get="inline" set="null" line="595" static="1"><x path="Int"/></VENDOR>
		<VERSION public="1" get="inline" set="null" line="597" static="1"><x path="Int"/></VERSION>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="599" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" line="601" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" line="603" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" line="605" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" line="607" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" line="609" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" line="611" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_SHADER public="1" get="inline" set="null" line="613" static="1"><x path="Int"/></VERTEX_SHADER>
		<VIEWPORT public="1" get="inline" set="null" line="615" static="1"><x path="Int"/></VIEWPORT>
		<ZERO public="1" get="inline" set="null" line="617" static="1"><x path="Int"/></ZERO>
		<drawingBufferHeight public="1" set="null"><x path="Int"/></drawingBufferHeight>
		<drawingBufferWidth public="1" set="null"><x path="Int"/></drawingBufferWidth>
		<activeTexture public="1" set="method"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<bufferData public="1" set="method">
			<f a="target:size:usage">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.html.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.html.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><bufferSubData public="1" set="method">
	<f a="target:offset:data">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.html.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</bufferSubData></overloads>
		</bufferSubData>
		<checkFramebufferStatus public="1" set="method"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<copyTexImage2D public="1" set="method"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="js.html.webgl.Shader"/></c>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><getAttachedShaders public="1" set="method">
	<f a="program">
		<c path="js.html.webgl.Program"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</getAttachedShaders></overloads>
		</getAttachedShaders>
		<getAttribLocation public="1" set="method"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getBufferParameter public="1" set="method"><f a=""><x path="Void"/></f></getBufferParameter></overloads>
		</getBufferParameter>
		<getContextAttributes public="1" set="method"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<getError public="1" set="method"><f a=""><x path="Int"/></f></getError>
		<getExtension public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getExtension>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getFramebufferAttachmentParameter public="1" set="method"><f a=""><x path="Void"/></f></getFramebufferAttachmentParameter></overloads>
		</getFramebufferAttachmentParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getParameter public="1" set="method"><f a=""><x path="Void"/></f></getParameter></overloads>
		</getParameter>
		<getProgramInfoLog public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getProgramParameter public="1" set="method">
			<f a="program:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getProgramParameter public="1" set="method"><f a=""><x path="Void"/></f></getProgramParameter></overloads>
		</getProgramParameter>
		<getRenderbufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getRenderbufferParameter public="1" set="method"><f a=""><x path="Void"/></f></getRenderbufferParameter></overloads>
		</getRenderbufferParameter>
		<getShaderInfoLog public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderParameter public="1" set="method">
			<f a="shader:pname">
				<c path="js.html.webgl.Shader"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads><getShaderParameter public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>Throws DOMException.</haxe_doc>
</getShaderParameter></overloads>
		</getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderSource public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getSupportedExtensions public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getTexParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getTexParameter public="1" set="method"><f a=""><x path="Void"/></f></getTexParameter></overloads>
		</getTexParameter>
		<getUniform public="1" set="method">
			<f a="program:location">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.UniformLocation"/>
				<d/>
			</f>
			<overloads><getUniform public="1" set="method"><f a=""><x path="Void"/></f></getUniform></overloads>
		</getUniform>
		<getUniformLocation public="1" set="method"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<overloads><getVertexAttrib public="1" set="method"><f a=""><x path="Void"/></f></getVertexAttrib></overloads>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isContextLost public="1" set="method"><f a=""><x path="Bool"/></f></isContextLost>
		<isEnabled public="1" set="method"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<readPixels public="1" set="method"><f a="x:y:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></readPixels>
		<releaseShaderCompiler public="1" set="method"><f a=""><x path="Void"/></f></releaseShaderCompiler>
		<renderbufferStorage public="1" set="method"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method"><f a="shader:string">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Throws DOMException.</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Throws DOMException.</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform1fv>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform1iv>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform2fv>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform2iv>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform3fv>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform3iv>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform4fv>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform4iv>
		<uniformMatrix2fv public="1" set="method"><f a="location:transpose:array">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method"><f a="location:transpose:array">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method"><f a="location:transpose:array">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
		<useProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/usr/lib/haxe/std/js/html/webgl/Shader.hx" extern="1"><meta><m n=":native"><e>"WebGLShader"</e></m></meta></class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/usr/lib/haxe/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<precision public="1" set="null"><x path="Int"/></precision>
		<rangeMax public="1" set="null"><x path="Int"/></rangeMax>
		<rangeMin public="1" set="null"><x path="Int"/></rangeMin>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/usr/lib/haxe/std/js/html/webgl/Texture.hx" extern="1"><meta><m n=":native"><e>"WebGLTexture"</e></m></meta></class>
	<class path="js.html.webgl.UniformLocation" params="" file="/usr/lib/haxe/std/js/html/webgl/UniformLocation.hx" extern="1"><meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta></class>
	<class path="neko.NativeArray" params="T" file="/usr/lib/haxe/std/neko/NativeArray.hx">
		<alloc public="1" params="T" get="inline" set="null" line="26" static="1"><f a="length">
	<x path="Int"/>
	<c path="neko.NativeArray"><c path="alloc.T"/></c>
</f></alloc>
		<blit public="1" params="T" get="inline" set="null" line="30" static="1"><f a="dst:dstPos:src:srcPos:length">
	<c path="neko.NativeArray"><c path="blit.T"/></c>
	<x path="Int"/>
	<c path="neko.NativeArray"><c path="blit.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<ofArrayCopy public="1" params="T" get="inline" set="null" line="34" static="1"><f a="a">
	<c path="Array"><c path="ofArrayCopy.T"/></c>
	<c path="neko.NativeArray"><c path="ofArrayCopy.T"/></c>
</f></ofArrayCopy>
		<ofArrayRef public="1" params="T" get="inline" set="null" line="38" static="1"><f a="a">
	<c path="Array"><c path="ofArrayRef.T"/></c>
	<c path="neko.NativeArray"><c path="ofArrayRef.T"/></c>
</f></ofArrayRef>
		<sub public="1" params="T" get="inline" set="null" line="42" static="1"><f a="a:pos:len">
	<c path="neko.NativeArray"><c path="sub.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="neko.NativeArray"><c path="sub.T"/></c>
</f></sub>
		<toArray public="1" params="T" get="inline" set="null" line="46" static="1"><f a="a">
	<c path="neko.NativeArray"><c path="toArray.T"/></c>
	<c path="Array"><c path="toArray.T"/></c>
</f></toArray>
		<length public="1" get="inline" set="null" line="50" static="1"><f a="a">
	<c path="neko.NativeArray"><d/></c>
	<x path="Int"/>
</f></length>
	</class>
	<class path="neko.NativeString" params="" file="/usr/lib/haxe/std/neko/NativeString.hx">
		<ofString public="1" get="inline" set="null" line="26" static="1"><f a="s">
	<c path="String"/>
	<c path="neko.NativeString"/>
</f></ofString>
		<toString public="1" get="inline" set="null" line="30" static="1"><f a="s">
	<c path="neko.NativeString"/>
	<c path="String"/>
</f></toString>
		<length public="1" get="inline" set="null" line="34" static="1"><f a="s">
	<c path="neko.NativeString"/>
	<x path="Int"/>
</f></length>
	</class>
</haxe>